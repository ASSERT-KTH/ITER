bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  long  nextByte  =  ByteOrder.NAME.read(bitsCachedSize);  [CE]  cannot  find  symbol  NAME  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  ByteOrder.NAME.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  ByteOrder.NAME.read(bitsCachedSize);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.NAME);    	non-compiled	[CE]  cannot  find  symbol  NAME	86	None	replace
2	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.NAME,  count);  [CE]  cannot  find  symbol  NAME  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.NAME,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.NAME,  count);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.NAME);    	non-compiled	[CE]  cannot  find  symbol  NAME	86	None	replace
3	[BUG]  [BUGGY]  final  long  nextByte  =  bytesCachedSize.read(ByteOrder.NAME);  [CE]  cannot  find  symbol  NAME  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bytesCachedSize.read(ByteOrder.NAME);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bytesCachedSize.read(ByteOrder.NAME);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.NAME);    	non-compiled	[CE]  cannot  find  symbol  NAME	86	None	replace
4	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(ByteOrder.NAME);  [CE]  cannot  find  symbol  NAME  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(ByteOrder.NAME);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read(ByteOrder.NAME);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.NAME);    	non-compiled	[CE]  cannot  find  symbol  NAME	86	None	replace
5	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(byteOrder.NAME);  [CE]  cannot  find  symbol  NAME  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(byteOrder.NAME);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(byteOrder.NAME);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.NAME);    	non-compiled	[CE]  cannot  find  symbol  NAME	86	None	replace
6	[BUG]  [BUGGY]  final  short  nextByte  =  in.read(bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  short  nextByte  =  in.read(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  short  nextByte  =  in.read(bitsCachedSize,  count);	  final    short    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	77	None	replace
7	[BUG]  [BUGGY]  final  double  nextByte  =  in.read(bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int)  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  double  nextByte  =  in.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  double  nextByte  =  in.read(bitsCachedSize);	  final    short    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	77	None	replace
8	[BUG]  [BUGGY]  final  short  nextByte  =  in.read(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  short  nextByte  =  in.read(bytesCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  short  nextByte  =  in.read(bytesCachedSize);	  final    short    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	77	None	replace
9	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read(bitsCachedSize  -  1);  [CE]  no  suitable  method  found  for  read(int)  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read(bitsCachedSize  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read(bitsCachedSize  -  1);	  final    long    nextByte    =    this.in.read(bitsCachedSize    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	61	None	replace
10	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  count  -  1);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  count  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  count  -  1);	  final    long    nextByte    =    this.in.read(bitsCachedSize    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	61	None	replace
11	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize  -  1,  count);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize  -  1,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize  -  1,  count);	  final    long    nextByte    =    this.in.read(bitsCachedSize    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	61	None	replace
12	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize  /  1);  [CE]  no  suitable  method  found  for  read(int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize  /  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize  /  1);	  final    long    nextByte    =    this.in.read(bitsCachedSize    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	61	None	replace
13	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize  -  1);  [CE]  no  suitable  method  found  for  read(int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize  -  1);	  final    long    nextByte    =    this.in.read(bitsCachedSize    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	61	None	replace
14	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bytesCachedSize  -  1);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bytesCachedSize  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bytesCachedSize  -  1);	  final    long    nextByte    =    this.in.read(bitsCachedSize    -    1);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	61	None	replace
15	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  bits);  [CE]  cannot  find  symbol  bits  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  bits);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count,  bits);	  final    long    nextByte    =    in.read(bitsCachedSize,    bitsOut,    count);    	non-compiled	[CE]  cannot  find  symbol  bits	38	None	replace
16	[BUG]  [BUGGY]  final  long  nextByte  =  readBits.read(bitsCachedSize,  bitsCachedSize,  count);  [CE]  cannot  find  symbol  readBits  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits.read(bitsCachedSize,  bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits.read(bitsCachedSize,  bitsCachedSize,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    bitsOut,    count);    	non-compiled	[CE]  cannot  find  symbol  readBits	38	None	replace
17	[BUG]  [BUGGY]  final  long  nextByte  =  readBits.read(bitsCachedSize,  count,  bitsCachedSize);  [CE]  cannot  find  symbol  readBits  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits.read(bitsCachedSize,  count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits.read(bitsCachedSize,  count,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    bitsOut,    count);    	non-compiled	[CE]  cannot  find  symbol  readBits	38	None	replace
18	[BUG]  [BUGGY]  final  long  nextByte  =  reader.read(bitsCachedSize,  bitsCachedSize,  count);  [CE]  cannot  find  symbol  reader  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  reader.read(bitsCachedSize,  bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  reader.read(bitsCachedSize,  bitsCachedSize,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    bitsOut,    count);    	non-compiled	[CE]  cannot  find  symbol  reader	38	None	replace
19	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bits,  count,  bitsCachedSize);  [CE]  cannot  find  symbol  bits  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bits,  count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bits,  count,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    bitsOut,    count);    	non-compiled	[CE]  cannot  find  symbol  bits	38	None	replace
20	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(in,  bitsCachedSize,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(in,  bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(in,  bitsCachedSize,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    bitsOut,    count);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	38	None	replace
21	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bytesCachedSize.read());  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bytesCachedSize.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bytesCachedSize.read());	  final    long    nextByte    =    readBits(bitsCachedSize.read());    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	32	None	replace
22	[BUG]  [BUGGY]  final  int  nextByte  =  readBits(bitsCachedSize.read());  [CE]  int  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readBits(bitsCachedSize.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readBits(bitsCachedSize.read());	  final    long    nextByte    =    readBits(bitsCachedSize.read());    	non-compiled	[CE]  int  cannot  be  dereferenced	32	None	replace
23	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(count,  bitsCachedSize.read());  [CE]  int  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(count,  bitsCachedSize.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(count,  bitsCachedSize.read());	  final    long    nextByte    =    readBits(bitsCachedSize.read());    	non-compiled	[CE]  int  cannot  be  dereferenced	32	None	replace
24	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  bits.read());  [CE]  cannot  find  symbol  bits  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  bits.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize,  bits.read());	  final    long    nextByte    =    readBits(bitsCachedSize.read());    	non-compiled	[CE]  cannot  find  symbol  bits	32	None	replace
25	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  0,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  0,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize,  0,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	40	None	replace
26	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  count,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int,int)  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  0,  count,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int,int)	40	None	replace
27	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  count,  bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  count,  bitsOut);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  0,  count,  bitsOut);	  final    long    nextByte    =    in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	40	None	replace
28	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  count  -  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  count  -  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  0,  count  -  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	40	None	replace
29	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  0,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	40	None	replace
30	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  bitsOut,  count);  [CE]  cannot  find  symbol  bitsOut  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  bitsOut,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  0,  bitsOut,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	40	None	replace
31	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	19	None	replace
32	[BUG]  [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	19	None	replace
33	[BUG]  [BUGGY]  final  double  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  double  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  double  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	19	None	replace
34	[BUG]  [BUGGY]  final  long  nextByte  =  ByteOrder.LITTLE_ENDIAN.read(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  ByteOrder.LITTLE_ENDIAN.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  ByteOrder.LITTLE_ENDIAN.read(bitsCachedSize);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
35	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN,  count);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN,  count);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  int  cannot  be  dereferenced	82	None	replace
36	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  int  cannot  be  dereferenced	82	None	replace
37	[BUG]  [BUGGY]  final  long  nextByte  =  bytesCachedSize.read(ByteOrder.LITTLE_ENDIAN);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bytesCachedSize.read(ByteOrder.LITTLE_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bytesCachedSize.read(ByteOrder.LITTLE_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	82	None	replace
38	[BUG]  [BUGGY]  final  long  nextByte  =  byteOrder.read(ByteOrder.LITTLE_ENDIAN);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  byteOrder.read(ByteOrder.LITTLE_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  byteOrder.read(ByteOrder.LITTLE_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
39	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(byteOrder.LITTLE_ENDIAN);  [CE]  int  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(byteOrder.LITTLE_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(byteOrder.LITTLE_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  int  cannot  be  dereferenced	82	None	replace
40	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read(bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read(bitsCachedSize,  count);	  final    int    nextByte    =    this.in.read(bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	80	None	replace
41	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read(bytesCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read(bytesCachedSize);	  final    int    nextByte    =    this.in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	80	None	replace
42	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read(bits,  count);  [CE]  cannot  find  symbol  bits  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read(bits,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read(bits,  count);	  final    int    nextByte    =    this.in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bits	80	None	replace
43	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read(bytesCachedSize,  bitsCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read(bytesCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read(bytesCachedSize,  bitsCachedSize);	  final    int    nextByte    =    this.in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	80	None	replace
44	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read(this.bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read(this.bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read(this.bitsCachedSize,  count);	  final    int    nextByte    =    this.in.read(bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	80	None	replace
45	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read(bytesCachedSize,  count);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read(bytesCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read(bytesCachedSize,  count);	  final    int    nextByte    =    this.in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	80	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  in.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read());    	compilable	  [FE]  AssertionError  	26	2	replace
47	[BUG]  [BUGGY]  int  nextByte  =  in.read();  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  in.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read());    	compilable	  [FE]  AssertionError  	26	2	replace
48	[BUG]  [BUGGY]  byte[]  nextByte  =  in.read();  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  byte[]  nextByte  =  in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	byte[]  nextByte  =  in.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read());    	non-compiled	[CE]  incompatible  types	26	None	replace
49	[BUG]  [BUGGY]  long  nextByte  =  in.read();  final  int  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  in.read();  final  int  nextByte  =  in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  in.read();  final  int  nextByte  =  in.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read());    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	26	None	replace
50	[BUG]  [BUGGY]  Integer  nextByte  =  in.readInt();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  Integer  nextByte  =  in.readInt();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	Integer  nextByte  =  in.readInt();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
51	[BUG]  [BUGGY]  byte[]  nextByte  =  in.read(bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int)  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  byte[]  nextByte  =  in.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	byte[]  nextByte  =  in.read(bitsCachedSize);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read());    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	26	None	replace
52	[BUG]  [BUGGY]  final  long  nextByte  =  byteOrder.read(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  byteOrder.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  byteOrder.read(bitsCachedSize);	  final    long    nextByte    =    byteOrder.read();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
53	[BUG]  [BUGGY]  final  long  nextByte  =  byteOrder.read(bitsCachedSize,  count);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  byteOrder.read(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  byteOrder.read(bitsCachedSize,  count);	  final    long    nextByte    =    byteOrder.read();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
54	[BUG]  [BUGGY]  final  long  nextByte  =  ByteOrder.LITTLE_ENDIAN.read();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  ByteOrder.LITTLE_ENDIAN.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  ByteOrder.LITTLE_ENDIAN.read();	  final    long    nextByte    =    byteOrder.read();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
55	[BUG]  [BUGGY]  final  int  nextByte  =  byteOrder.read();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  byteOrder.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  byteOrder.read();	  final    long    nextByte    =    byteOrder.read();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
56	[BUG]  [BUGGY]  final  long  nextByte  =  bytesOut.read();  [CE]  cannot  find  symbol  bytesOut  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bytesOut.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bytesOut.read();	  final    long    nextByte    =    byteOrder.read();    	non-compiled	[CE]  cannot  find  symbol  bytesOut	7	None	replace
57	[BUG]  [BUGGY]  final  long  nextByte  =  byteOrder.readFully(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  byteOrder.readFully(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  byteOrder.readFully(bitsCachedSize);	  final    long    nextByte    =    byteOrder.read();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
58	[BUG]  [BUGGY]  final  byte  nextByte  =  in.read(bits,  count);  [CE]  cannot  find  symbol  bits  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  in.read(bits,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  in.read(bits,  count);	  final    byte    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bits	21	None	replace
59	[BUG]  [BUGGY]  long  nextByte  =  in.read();  final  int  nextByte  =  out.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  in.read();  final  int  nextByte  =  out.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  in.read();  final  int  nextByte  =  out.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    out.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	24	None	replace
60	[BUG]  [BUGGY]  int  nextByte  =  in.read();  final  int  nextByte  =  out.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  in.read();  final  int  nextByte  =  out.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  in.read();  final  int  nextByte  =  out.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    out.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	24	None	replace
61	[BUG]  [BUGGY]  final  int  nextByte  =  out.read();  [CE]  cannot  find  symbol  out  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  out.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  out.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    out.read();    	non-compiled	[CE]  cannot  find  symbol  out	24	None	replace
62	[BUG]  [BUGGY]  final  int  nextByte  =  readBits(count,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readBits(count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readBits(count,  bitsCachedSize);	  final    long    nextByte    =    readBits(count,    bitsCachedSize);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	9	None	replace
63	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize,  count);	  final    long    nextByte    =    readBits(count,    bitsCachedSize);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	9	None	replace
64	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bytesCachedSize,  count);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bytesCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bytesCachedSize,  count);	  final    long    nextByte    =    readBits(count,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	9	None	replace
65	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(count,  bitsCachedSize,  bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(count,  bitsCachedSize,  bitsOut);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(count,  bitsCachedSize,  bitsOut);	  final    long    nextByte    =    readBits(count,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	9	None	replace
66	[BUG]  [BUGGY]  final  byte  nextByte  =  readBits(count,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  readBits(count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  readBits(count,  bitsCachedSize);	  final    long    nextByte    =    readBits(count,    bitsCachedSize);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	9	None	replace
67	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(in,  count,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(in,  count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(in,  count,  bitsCachedSize);	  final    long    nextByte    =    readBits(count,    bitsCachedSize);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	9	None	replace
68	[BUG]  [BUGGY]  final  int  nextByte  =  readBits(bitsCachedSize,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readBits(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readBits(bitsCachedSize,  count);	  final    long    nextByte    =    readBits(count,    bitsCachedSize);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	9	None	replace
69	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(byteOrder.VALUE_ENDIAN);  [CE]  cannot  find  symbol  VALUE_ENDIAN  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(byteOrder.VALUE_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(byteOrder.VALUE_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.VALUE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  VALUE_ENDIAN	83	None	replace
70	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_ENDIAN);  [CE]  cannot  find  symbol  VALUE_ENDIAN  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.VALUE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  VALUE_ENDIAN	83	None	replace
71	[BUG]  [BUGGY]  final  long  nextByte  =  ByteOrder.VALUE_ENDIAN.read(bitsCachedSize);  [CE]  cannot  find  symbol  VALUE_ENDIAN  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  ByteOrder.VALUE_ENDIAN.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  ByteOrder.VALUE_ENDIAN.read(bitsCachedSize);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.VALUE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  VALUE_ENDIAN	83	None	replace
72	[BUG]  [BUGGY]  final  long  nextByte  =  bytesCachedSize.read(ByteOrder.VALUE_ENDIAN);  [CE]  cannot  find  symbol  VALUE_ENDIAN  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bytesCachedSize.read(ByteOrder.VALUE_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bytesCachedSize.read(ByteOrder.VALUE_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.VALUE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  VALUE_ENDIAN	83	None	replace
73	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(nextByte);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(nextByte);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(nextByte);	  final    long    nextByte    =    bitsCachedSize.read(bytes);    	non-compiled	[CE]  int  cannot  be  dereferenced	71	None	replace
74	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(buffer);  [CE]  cannot  find  symbol  buffer  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(buffer);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(buffer);	  final    long    nextByte    =    bitsCachedSize.read(bytes);    	non-compiled	[CE]  cannot  find  symbol  buffer	71	None	replace
75	[BUG]  [BUGGY]  final  int  nextByte  =  in.readInt();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.readInt();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.readInt();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
76	[BUG]  [BUGGY]  byte  nextByte  =  in.read();  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  byte  nextByte  =  in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	byte  nextByte  =  in.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read();    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	long  nextByte  =  in.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read();    	compilable	  [FE]  AssertionError  	22	2	replace
78	[BUG]  [BUGGY]  long  nextByte  =  in.read();  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  in.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read();    	compilable	  [FE]  AssertionError  	22	2	replace
79	[BUG]  [BUGGY]  final  int  nextByte  =  input.read();  [CE]  cannot  find  symbol  input  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  input.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  input.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  input	73	None	replace
80	[BUG]  [BUGGY]  Integer  nextByte  =  input.readInt();  [CE]  cannot  find  symbol  input  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  Integer  nextByte  =  input.readInt();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	Integer  nextByte  =  input.readInt();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  input	73	None	replace
81	[BUG]  [BUGGY]  final  int  nextByte  =  input.readInt();  [CE]  cannot  find  symbol  input  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  input.readInt();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  input.readInt();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  input	73	None	replace
82	[BUG]  [BUGGY]  int  nextByte  =  input.read();  [CE]  cannot  find  symbol  input  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  input.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  input.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  input	73	None	replace
83	[BUG]  [BUGGY]  Integer  nextByte  =  input.read();  [CE]  cannot  find  symbol  input  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  Integer  nextByte  =  input.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	Integer  nextByte  =  input.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  input	73	None	replace
84	[BUG]  [BUGGY]  final  int  nextByte  =  readStream.read();  [CE]  cannot  find  symbol  readStream  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readStream.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readStream.read();	  final    long    nextByte    =    readStream.read();    	non-compiled	[CE]  cannot  find  symbol  readStream	60	None	replace
85	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER_ENDIAN);  [CE]  cannot  find  symbol  CENTER_ENDIAN  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  CENTER_ENDIAN	84	None	replace
86	[BUG]  [BUGGY]  final  long  nextByte  =  ByteOrder.LITTLE_ENDIAN.read(ByteOrder.CENTER_ENDIAN);  [CE]  cannot  find  symbol  CENTER_ENDIAN  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  ByteOrder.LITTLE_ENDIAN.read(ByteOrder.CENTER_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  ByteOrder.LITTLE_ENDIAN.read(ByteOrder.CENTER_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  CENTER_ENDIAN	84	None	replace
87	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(byteOrder.ByteOrder.CENTER_ENDIAN);  [CE]  cannot  find  symbol  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(byteOrder.ByteOrder.CENTER_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(byteOrder.ByteOrder.CENTER_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  ByteOrder	84	None	replace
88	[BUG]  [BUGGY]  final  long  nextByte  =  ByteOrder.BYTE_ENDIAN.read(bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  ByteOrder.BYTE_ENDIAN.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  ByteOrder.BYTE_ENDIAN.read(bitsCachedSize);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	84	None	replace
89	[BUG]  [BUGGY]  final  double  nextByte  =  this.in.read();  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  double  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  double  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    Final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  possible  loss  of  precision	43	None	replace
90	[BUG]  [BUGGY]  final  byte  nextByte  =  this.in.read();  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    Final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  possible  loss  of  precision	43	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    Final    long    nextByte    =    this.in.read();    	compilable	  [FE]  AssertionError  	43	2	replace
92	[BUG]  [BUGGY]  int  nextByte  =  this.in.read();  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    Final    long    nextByte    =    this.in.read();    	compilable	  [FE]  AssertionError  	43	2	replace
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	long  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    Final    long    nextByte    =    this.in.read();    	compilable	  [FE]  AssertionError  	43	2	replace
94	[BUG]  [BUGGY]  long  nextByte  =  this.in.read();  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    Final    long    nextByte    =    this.in.read();    	compilable	  [FE]  AssertionError  	43	2	replace
95	[BUG]  [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  count,  bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  count,  bitsOut);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  in.read(bitsCachedSize,  count,  bitsOut);	  final    byte    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	63	None	replace
96	[BUG]  [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);	  final    byte    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	63	None	replace
97	[BUG]  [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  count);	  final    byte    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	63	None	replace
98	[BUG]  [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  bitsOut,  count);  [CE]  cannot  find  symbol  bitsOut  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  bitsOut,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  in.read(bitsCachedSize,  bitsOut,  count);	  final    byte    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	63	None	replace
99	[BUG]  [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  0,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  0,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  in.read(bitsCachedSize,  0,  count);	  final    byte    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	63	None	replace
100	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bytesCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bytesCachedSize);	  final    long    nextByte    =    in.read(bytesCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	17	None	replace
101	[BUG]  [BUGGY]  final  long  nextByte  =  bitsOut.read(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsOut.read(bytesCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsOut.read(bytesCachedSize);	  final    long    nextByte    =    in.read(bytesCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	17	None	replace
102	[BUG]  [BUGGY]  final  long  nextByte  =  readBitsOut(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBitsOut(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBitsOut(bitsCachedSize);	  final    long    nextByte    =    bits.read();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
103	[BUG]  [BUGGY]  final  long  nextByte  =  readBitsOut(bitsCachedSize,  count);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBitsOut(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBitsOut(bitsCachedSize,  count);	  final    long    nextByte    =    bits.read();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
104	[BUG]  [BUGGY]  final  long  nextByte  =  bytes.read();  [CE]  cannot  find  symbol  bytes  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bytes.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bytes.read();	  final    long    nextByte    =    bits.read();    	non-compiled	[CE]  cannot  find  symbol  bytes	59	None	replace
105	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  readBits(bitsCachedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(bitsCachedSize);    final  long  nextByte  =  readBits(bitsCachedSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	57	None	add
106	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  int  nextByte  =  readBits(bitsCachedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  int  nextByte  =  readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(bitsCachedSize);    final  int  nextByte  =  readBits(bitsCachedSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	57	None	add
107	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  ReadBits(bitsCachedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  ReadBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(bitsCachedSize);    final  long  nextByte  =  ReadBits(bitsCachedSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	57	None	add
108	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  short  nextByte  =  readBits(bitsCachedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  short  nextByte  =  readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(bitsCachedSize);    final  short  nextByte  =  readBits(bitsCachedSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	57	None	add
109	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  Final  long  nextByte  =  readBits(bitsCachedSize);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  Final  long  nextByte  =  readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(bitsCachedSize);    Final  long  nextByte  =  readBits(bitsCachedSize);	  timeout    	non-compiled	[CE]  not  a  statement	57	None	add
110	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  readBits(bitsCalculatedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  readBits(bitsCalculatedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(bitsCachedSize);    final  long  nextByte  =  readBits(bitsCalculatedSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	57	None	add
111	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  readBits(bitsCachedSize));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  readBits(bitsCachedSize));  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(bitsCachedSize);    final  long  nextByte  =  readBits(bitsCachedSize));	  timeout    	non-compiled	[CE]  ';'  expected	57	None	add
112	[BUG]  [BUGGY]  in.read(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bytesCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bytesCachedSize);	  in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	87	None	replace
113	[BUG]  [BUGGY]  in.read(bytesCachedSize,  count);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bytesCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bytesCachedSize,  count);	  in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	87	None	replace
114	[BUG]  [BUGGY]  in.read(nextByte,  bitsCachedSize);  [CE]  cannot  find  symbol  nextByte  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(nextByte,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(nextByte,  bitsCachedSize);	  in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  nextByte	87	None	replace
115	[BUG]  [BUGGY]  in.read(bits,  count);  [CE]  cannot  find  symbol  bits  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bits,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bits,  count);	  in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bits	87	None	replace
116	[BUG]  [BUGGY]  in.readFully(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.readFully(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.readFully(bitsCachedSize);	  in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
117	[BUG]  [BUGGY]  in.read(bitsCachedSize,  nextByte);  [CE]  cannot  find  symbol  nextByte  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bitsCachedSize,  nextByte);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bitsCachedSize,  nextByte);	  in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  nextByte	87	None	replace
118	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	36	None	replace
119	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	36	None	replace
120	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bytesCachedSize,  count,  bitsCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bytesCachedSize,  count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bytesCachedSize,  count,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	36	None	replace
121	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	36	None	replace
122	[BUG]  [BUGGY]  final  int  nextByte  =  this.bitsCachedSize.read(bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.bitsCachedSize.read(bitsOut);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.bitsCachedSize.read(bitsOut);	  final    int    nextByte    =    this.bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	14	None	replace
123	[BUG]  [BUGGY]  final  int  nextByte  =  this.bitsCachedSize.read(bits);  [CE]  cannot  find  symbol  bits  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.bitsCachedSize.read(bits);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.bitsCachedSize.read(bits);	  final    int    nextByte    =    this.bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bits	14	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  count  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  count  -  1;	  int    nextByte    =    bitsCachedSize    -    1;    	compilable	  [FE]  AssertionError  	68	12	replace
125	[BUG]  [BUGGY]  int  nextByte  =  count  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  count  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  count  -  1;	  int    nextByte    =    bitsCachedSize    -    1;    	compilable	  [FE]  AssertionError  	68	12	replace
126	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  bitsCachedSize  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	long  nextByte  =  bitsCachedSize  -  1;	  int    nextByte    =    bitsCachedSize    -    1;    	compilable	  [FE]  AssertionError  	68	12	replace
127	[BUG]  [BUGGY]  long  nextByte  =  bitsCachedSize  -  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  bitsCachedSize  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  bitsCachedSize  -  1;	  int    nextByte    =    bitsCachedSize    -    1;    	compilable	  [FE]  AssertionError  	68	12	replace
128	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  /  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  bitsCachedSize  /  1;	  int    nextByte    =    bitsCachedSize    -    1;    	compilable	  [FE]  AssertionError  	68	12	replace
129	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  /  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  /  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize  /  1;	  int    nextByte    =    bitsCachedSize    -    1;    	compilable	  [FE]  AssertionError  	68	12	replace
130	[BUG]  [BUGGY]  short  nextByte  =  bitsCachedSize  -  1;  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  short  nextByte  =  bitsCachedSize  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	short  nextByte  =  bitsCachedSize  -  1;	  int    nextByte    =    bitsCachedSize    -    1;    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
131	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  1L;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  1L;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize  -  1L;	  int    nextByte    =    bitsCachedSize    -    1;    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  count  -  bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  count  -  bitsCachedSize;	  int    nextByte    =    bitsCachedSize    -    count;    	compilable	  [FE]  AssertionError  	49	12	replace
133	[BUG]  [BUGGY]  int  nextByte  =  count  -  bitsCachedSize;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  count  -  bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  count  -  bitsCachedSize;	  int    nextByte    =    bitsCachedSize    -    count;    	compilable	  [FE]  AssertionError  	49	12	replace
134	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  bitsCachedSize  -  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	long  nextByte  =  bitsCachedSize  -  count;	  int    nextByte    =    bitsCachedSize    -    count;    	compilable	  [FE]  AssertionError  	49	12	replace
135	[BUG]  [BUGGY]  long  nextByte  =  bitsCachedSize  -  count;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  bitsCachedSize  -  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  bitsCachedSize  -  count;	  int    nextByte    =    bitsCachedSize    -    count;    	compilable	  [FE]  AssertionError  	49	12	replace
136	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  count  +  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  bitsCachedSize  -  count  +  1;	  int    nextByte    =    bitsCachedSize    -    count;    	compilable	  [FE]  AssertionError  	49	12	replace
137	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  count  +  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  count  +  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize  -  count  +  1;	  int    nextByte    =    bitsCachedSize    -    count;    	compilable	  [FE]  AssertionError  	49	12	replace
138	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  /  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  bitsCachedSize  /  count;	  int    nextByte    =    bitsCachedSize    -    count;    	compilable	  [FE]  AssertionError  	49	12	replace
139	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  /  count;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  /  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize  /  count;	  int    nextByte    =    bitsCachedSize    -    count;    	compilable	  [FE]  AssertionError  	49	12	replace
140	[BUG]  [BUGGY]  int  nextByte  =  counts  -  bitsCachedSize;  [CE]  cannot  find  symbol  counts  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  counts  -  bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  counts  -  bitsCachedSize;	  int    nextByte    =    bitsCachedSize    -    count;    	non-compiled	[CE]  cannot  find  symbol  counts	49	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  Integer  nextByte  =  in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	Integer  nextByte  =  in.read();	  final    int    nextByte    =    in.read();    Final    int    nextByte    =    in.read();    	compilable	  [FE]  AssertionError  	23	2	replace
142	[BUG]  [BUGGY]  Integer  nextByte  =  in.read();  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  Integer  nextByte  =  in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	Integer  nextByte  =  in.read();	  final    int    nextByte    =    in.read();    Final    int    nextByte    =    in.read();    	compilable	  [FE]  AssertionError  	23	2	replace
143	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(byteOrder);  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(byteOrder);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize.read(byteOrder);	  final    long    nextByte    =    byteOrder.read(this.bitsCachedSize);    	non-compiled	[CE]  int  cannot  be  dereferenced	66	None	replace
144	[BUG]  [BUGGY]  final  int  nextByte  =  byteOrder.read(this.bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  byteOrder.read(this.bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  byteOrder.read(this.bitsCachedSize);	  final    long    nextByte    =    byteOrder.read(this.bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
145	[BUG]  [BUGGY]  final  long  nextByte  =  byteOrder.read(this,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  byteOrder.read(this,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  byteOrder.read(this,  bitsCachedSize);	  final    long    nextByte    =    byteOrder.read(this.bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
146	[BUG]  [BUGGY]  final  long  nextByte  =  byteOrder.read(this.bitsCachedSize,  count);  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  byteOrder.read(this.bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  byteOrder.read(this.bitsCachedSize,  count);	  final    long    nextByte    =    byteOrder.read(this.bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
147	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.readInt();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.readInt();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.readInt();	  final    int    nextByte    =    this.in.read();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
148	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.readShort(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.readShort(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.readShort(bitsCachedSize);	  final    int    nextByte    =    this.in.read();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
149	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bytesCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bytesCachedSize);	  final    long    nextByte    =    this.in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	1	None	replace
150	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bits,  count);  [CE]  cannot  find  symbol  bits  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bits,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bits,  count);	  final    long    nextByte    =    this.in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bits	1	None	replace
151	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bytesCachedSize,  bitsCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bytesCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bytesCachedSize,  bitsCachedSize);	  final    long    nextByte    =    this.in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	1	None	replace
152	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(this.bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(this.bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(this.bitsCachedSize,  count);	  final    long    nextByte    =    this.in.read(bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	1	None	replace
153	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  final  long  nextByte  =  this.in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  while(count  <  bitsCachedSize)  {  final  long  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	while(count  <  bitsCachedSize)  {  final  long  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
154	[BUG]  [BUGGY]  lastByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  [CE]  cannot  find  symbol  lastByte  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  lastByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	lastByte  =  this.in.read();  final  long  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  cannot  find  symbol  lastByte	41	None	replace
155	[BUG]  [BUGGY]  byte[]  nextByte  =  this.in.read();  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  byte[]  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	byte[]  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  incompatible  types	41	None	replace
156	[BUG]  [BUGGY]  final  int  nextByte  =  readInt(bytesCachedSize,  bitsCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readInt(bytesCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt(bytesCachedSize,  bitsCachedSize);	  final    int    nextByte    =    readInt(in,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	79	None	replace
157	[BUG]  [BUGGY]  final  int  nextByte  =  readInt(bitsCachedSize,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readInt(bitsCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt(bitsCachedSize,  bitsCachedSize);	  final    int    nextByte    =    readInt(in,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
158	[BUG]  [BUGGY]  final  long  nextByte  =  readInt(in,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readInt(in,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readInt(in,  bitsCachedSize);	  final    int    nextByte    =    readInt(in,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
159	[BUG]  [BUGGY]  final  int  nextByte  =  readInt(in,  count);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readInt(in,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt(in,  count);	  final    int    nextByte    =    readInt(in,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
160	[BUG]  [BUGGY]  final  int  nextByte  =  readInt(count,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readInt(count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt(count,  bitsCachedSize);	  final    int    nextByte    =    readInt(in,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
161	[BUG]  [BUGGY]  final  long  nextByte  =  readInt(bitsCachedSize,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readInt(bitsCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readInt(bitsCachedSize,  bitsCachedSize);	  final    int    nextByte    =    readInt(in,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
162	[BUG]  [BUGGY]  final  int  nextByte  =  readInt(bytes,  bitsCachedSize);  [CE]  cannot  find  symbol  bytes  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readInt(bytes,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt(bytes,  bitsCachedSize);	  final    int    nextByte    =    readInt(in,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytes	79	None	replace
163	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  this.bitsCachedSize.read());  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  this.bitsCachedSize.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(this.bitsCachedSize,  this.bitsCachedSize.read());	  final    long    nextByte    =    readBits(this.bitsCachedSize.read());    	non-compiled	[CE]  int  cannot  be  dereferenced	65	None	replace
164	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  bitsCachedSize.read());  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  bitsCachedSize.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(this.bitsCachedSize,  bitsCachedSize.read());	  final    long    nextByte    =    readBits(this.bitsCachedSize.read());    	non-compiled	[CE]  int  cannot  be  dereferenced	65	None	replace
165	[BUG]  [BUGGY]  final  int  nextByte  =  readBits(this.bitsCachedSize.read());  [CE]  int  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readBits(this.bitsCachedSize.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readBits(this.bitsCachedSize.read());	  final    long    nextByte    =    readBits(this.bitsCachedSize.read());    	non-compiled	[CE]  int  cannot  be  dereferenced	65	None	replace
166	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  count.read());  [CE]  int  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  count.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(this.bitsCachedSize,  count.read());	  final    long    nextByte    =    readBits(this.bitsCachedSize.read());    	non-compiled	[CE]  int  cannot  be  dereferenced	65	None	replace
167	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  bitsOut.read());  [CE]  cannot  find  symbol  bitsOut  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  bitsOut.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(this.bitsCachedSize,  bitsOut.read());	  final    long    nextByte    =    readBits(this.bitsCachedSize.read());    	non-compiled	[CE]  cannot  find  symbol  bitsOut	65	None	replace
168	[BUG]  [BUGGY]  final  int  nextByte  =  readBits.read();  [CE]  cannot  find  symbol  readBits  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readBits.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readBits.read();	  final    long    nextByte    =    readBits.read();    	non-compiled	[CE]  cannot  find  symbol  readBits	56	None	replace
169	[BUG]  [BUGGY]  final  long  nextByte  =  bitsout.read();  [CE]  cannot  find  symbol  bitsout  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsout.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsout.read();	  final    long    nextByte    =    readBits.read();    	non-compiled	[CE]  cannot  find  symbol  bitsout	56	None	replace
170	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize?  readBits.read()  :  count;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize?  readBits.read()  :  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize?  readBits.read()  :  count;	  final    long    nextByte    =    readBits.read();    	non-compiled	[CE]  incompatible  types	56	None	replace
171	[BUG]  [BUGGY]  InputStream  in  =  readInt(count);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  InputStream  in  =  readInt(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  readInt(count);	  InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
172	[BUG]  [BUGGY]  InputStream  in  =  readInt(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  InputStream  in  =  readInt(bytesCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  readInt(bytesCachedSize);	  InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	69	None	replace
173	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  count);  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  readInt(bitsCachedSize,  count);	  InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
174	[BUG]  [BUGGY]  InputStream  in  =  readInt(count,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  InputStream  in  =  readInt(count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  readInt(count,  bitsCachedSize);	  InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
175	[BUG]  [BUGGY]  InputStream  in  =  readInt(0);  [CE]  cannot  find  symbol  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  InputStream  in  =  readInt(0);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  readInt(0);	  InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
176	[BUG]  [BUGGY]  in.read(bitsCachedSize,  0,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bitsCachedSize,  0,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bitsCachedSize,  0,  count);	  in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	50	None	replace
177	[BUG]  [BUGGY]  in.read(bitsCachedSize,  count,  bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bitsCachedSize,  count,  bitsOut);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bitsCachedSize,  count,  bitsOut);	  in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	50	None	replace
178	[BUG]  [BUGGY]  in.read(bits,  count,  bitsCachedSize);  [CE]  cannot  find  symbol  bits  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bits,  count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bits,  count,  bitsCachedSize);	  in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  bits	50	None	replace
179	[BUG]  [BUGGY]  in.read(bitsCachedSize,  count,  MASKS);  [CE]  no  suitable  method  found  for  read(int,int,long[])  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bitsCachedSize,  count,  MASKS);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bitsCachedSize,  count,  MASKS);	  in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,long[])	50	None	replace
180	[BUG]  [BUGGY]  in.read(bitsCachedSize,  nextByte,  count);  [CE]  cannot  find  symbol  nextByte  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bitsCachedSize,  nextByte,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bitsCachedSize,  nextByte,  count);	  in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  nextByte	50	None	replace
181	[BUG]  [BUGGY]  in.read(bitsCachedSize,  bitsOut,  count);  [CE]  cannot  find  symbol  bitsOut  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bitsCachedSize,  bitsOut,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bitsCachedSize,  bitsOut,  count);	  in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	50	None	replace
182	[BUG]  [BUGGY]  final  int  nextByte  =  readBits(count);  [CE]  possible  loss  of  precision  [FE]    StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readBits(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readBits(count);	  final    long    nextByte    =    readBits(count);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
183	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]      StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bytesCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bytesCachedSize);	  final    long    nextByte    =    readBits(count);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	11	None	replace
184	[BUG]  [BUGGY]  final  long  nextByte  =  byteOrder.readBits(count);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  byteOrder.readBits(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  byteOrder.readBits(count);	  final    long    nextByte    =    readBits(count);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
185	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize  -  readBits(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	final  long  nextByte  =  this.bitsCachedSize  -  readBits(count);	  final    long    nextByte    =    readBits(count);    	compilable	  [FE]  StackOverflowError  	11	12	replace
186	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize  -  readBits(count);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize  -  readBits(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize  -  readBits(count);	  final    long    nextByte    =    readBits(count);    	compilable	  [FE]  StackOverflowError  	11	12	replace
187	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	final  long  nextByte  =  this.bitsCachedSize;	  final    long    nextByte    =    readBits(count);    	compilable	  [FE]  AssertionError  	11	12	replace
188	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize;  [FE]  AssertionError  [FE]            StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize;	  final    long    nextByte    =    readBits(count);    	compilable	  [FE]  AssertionError  	11	12	replace
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  count;	  int    nextByte    =    bitsCachedSize;    	compilable	  [FE]  AssertionError  	46	12	replace
190	[BUG]  [BUGGY]  int  nextByte  =  count;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  count;	  int    nextByte    =    bitsCachedSize;    	compilable	  [FE]  AssertionError  	46	12	replace
191	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	long  nextByte  =  bitsCachedSize;	  int    nextByte    =    bitsCachedSize;    	compilable	  [FE]  AssertionError  	46	12	replace
192	[BUG]  [BUGGY]  long  nextByte  =  bitsCachedSize;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  bitsCachedSize;	  int    nextByte    =    bitsCachedSize;    	compilable	  [FE]  AssertionError  	46	12	replace
193	[BUG]  [BUGGY]  int  nextByte  =(bytesCachedSize  <  <  1)?  bitsCachedSize  :  count;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(bytesCachedSize  <  <  1)?  bitsCachedSize  :  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =(bytesCachedSize  <  <  1)?  bitsCachedSize  :  count;	  int    nextByte    =    bitsCachedSize;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
194	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  count;	  int    nextByte    =    bitsCachedSize;    	compilable	  [FE]  AssertionError  	46	12	replace
195	[BUG]  [BUGGY]  int  nextByte  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  count;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  count;	  int    nextByte    =    bitsCachedSize;    	compilable	  [FE]  AssertionError  	46	12	replace
196	[BUG]  [BUGGY]  int  nextByte  =(bitsCachedSize  <  <  1)?  bitsCachedSize  :  count;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(bitsCachedSize  <  <  1)?  bitsCachedSize  :  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =(bitsCachedSize  <  <  1)?  bitsCachedSize  :  count;	  int    nextByte    =    bitsCachedSize;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
197	[BUG]  [BUGGY]  int  nextByte  =(bytesCachedSize  <  <  8)?  bitsCachedSize  :  count;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(bytesCachedSize  <  <  8)?  bitsCachedSize  :  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =(bytesCachedSize  <  <  8)?  bitsCachedSize  :  count;	  int    nextByte    =    bitsCachedSize;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
198	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  MAXIMUM_CACHE_SIZE;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  MAXIMUM_CACHE_SIZE;	  int    nextByte    =    bitsCachedSize;    	compilable	  [FE]  AssertionError  	46	12	replace
199	[BUG]  [BUGGY]  int  nextByte  =  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  MAXIMUM_CACHE_SIZE;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  MAXIMUM_CACHE_SIZE;	  int    nextByte    =    bitsCachedSize;    	compilable	  [FE]  AssertionError  	46	12	replace
200	[BUG]  [BUGGY]  final  long  nextByte  =  in.readUTF();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.readUTF();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.readUTF();	  final    long    nextByte    =    this.in.readUTF();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
201	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.readUTF();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.readUTF();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.readUTF();	  final    long    nextByte    =    this.in.readUTF();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
202	[BUG]  [BUGGY]  final  long  nextByte  =  Integer.parseInt(this.in,  count);  [CE]  no  suitable  method  found  for  parseInt(InputStream,int)  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  Integer.parseInt(this.in,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  Integer.parseInt(this.in,  count);	  final    long    nextByte    =    this.in.readUTF();    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(InputStream,int)	5	None	replace
203	[BUG]  [BUGGY]  final  long  nextByte  =  Integer.parseInt(this.in);  [CE]  no  suitable  method  found  for  parseInt(InputStream)  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  Integer.parseInt(this.in);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  Integer.parseInt(this.in);	  final    long    nextByte    =    this.in.readUTF();    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(InputStream)	5	None	replace
204	[BUG]  [BUGGY]  final  long  nextByte  =  Integer.toHexString(count,  this.in.readUTF());  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  Integer.toHexString(count,  this.in.readUTF());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  Integer.toHexString(count,  this.in.readUTF());	  final    long    nextByte    =    this.in.readUTF();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
205	[BUG]  [BUGGY]  final  long  nextByte  =  Integer.toString(count,  this.in.readUTF());  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  Integer.toString(count,  this.in.readUTF());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  Integer.toString(count,  this.in.readUTF());	  final    long    nextByte    =    this.in.readUTF();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
206	[BUG]  [BUGGY]  int  nextByte  =  readInt(count);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  readInt(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  readInt(count);	  int    nextByte    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
207	[BUG]  [BUGGY]  int  nextByte  =  byteOrder.readInt(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  byteOrder.readInt(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  byteOrder.readInt(bitsCachedSize);	  int    nextByte    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
208	[BUG]  [BUGGY]  int  nextByte  =  readInt(count,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  readInt(count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  readInt(count,  bitsCachedSize);	  int    nextByte    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
209	[BUG]  [BUGGY]  long  nextByte  =  readInt(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readInt(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  readInt(bitsCachedSize);	  int    nextByte    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
210	[BUG]  [BUGGY]  int  nextByte  =  readInt(bitsCachedSize,  count);  [CE]  cannot  find  symbol  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  readInt(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  readInt(bitsCachedSize,  count);	  int    nextByte    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
211	[BUG]  [BUGGY]  int  nextByte  =  readInt(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  readInt(bytesCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  readInt(bytesCachedSize);	  int    nextByte    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	47	None	replace
212	[BUG]  [BUGGY]  final  long  nextByte  =  in.readFully(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.readFully(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.readFully(bitsCachedSize);	  final    long    nextByte    =    this.in.readFully(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
213	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.readFully(this.in);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.readFully(this.in);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.readFully(this.in);	  final    long    nextByte    =    this.in.readFully(bitsCachedSize);    	non-compiled	[CE]  int  cannot  be  dereferenced	62	None	replace
214	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.readFully(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.readFully(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.readFully(bitsCachedSize);	  final    long    nextByte    =    this.in.readFully(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
215	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.readFully(count);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.readFully(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.readFully(count);	  final    long    nextByte    =    this.in.readFully(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
216	[BUG]  [BUGGY]  final  long  nextByte  =  readFully(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readFully(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readFully(bitsCachedSize);	  final    long    nextByte    =    this.in.readFully(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
217	[BUG]  [BUGGY]  final  int  nextByte  =  as.read();  [CE]  cannot  find  symbol  as  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  as.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  as.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    as.read();    	non-compiled	[CE]  cannot  find  symbol  as	25	None	replace
218	[BUG]  [BUGGY]  long  nextByte  =  in.read();  final  int  nextByte  =  as.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  in.read();  final  int  nextByte  =  as.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  in.read();  final  int  nextByte  =  as.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    as.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	25	None	replace
219	[BUG]  [BUGGY]  int  nextByte  =  as.read();  [CE]  cannot  find  symbol  as  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  as.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  as.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    as.read();    	non-compiled	[CE]  cannot  find  symbol  as	25	None	replace
220	[BUG]  [BUGGY]  Integer  nextByte  =  as.read();  [CE]  cannot  find  symbol  as  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  Integer  nextByte  =  as.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	Integer  nextByte  =  as.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    as.read();    	non-compiled	[CE]  cannot  find  symbol  as	25	None	replace
221	[BUG]  [BUGGY]  final  int  nextByte  =  as.read(bitsCachedSize);  [CE]  cannot  find  symbol  as  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  as.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  as.read(bitsCachedSize);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    as.read();    	non-compiled	[CE]  cannot  find  symbol  as	25	None	replace
222	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  int  nextByte  =  bitsCachedSize  -  count;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  int  nextByte  =  bitsCachedSize  -  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    count;    int  nextByte  =  bitsCachedSize  -  count;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	48	None	add
223	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  Integer  nextByte  =  bitsCachedSize  -  count;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  Integer  nextByte  =  bitsCachedSize  -  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    count;    Integer  nextByte  =  bitsCachedSize  -  count;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	48	None	add
224	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  int  nextByte  =  bitsCachedSize  -  count);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  int  nextByte  =  bitsCachedSize  -  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    count;    int  nextByte  =  bitsCachedSize  -  count);	  	non-compiled	[CE]  ';'  expected	48	None	add
225	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  int  nextByte  =  bitscachedSize  -  count;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  int  nextByte  =  bitscachedSize  -  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    count;    int  nextByte  =  bitscachedSize  -  count;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	48	None	add
226	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  long  nextByte  =  bitsCachedSize  -  count;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  long  nextByte  =  bitsCachedSize  -  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    count;    long  nextByte  =  bitsCachedSize  -  count;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	48	None	add
227	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  Int  nextByte  =  bitsCachedSize  -  count;  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  Int  nextByte  =  bitsCachedSize  -  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    count;    Int  nextByte  =  bitsCachedSize  -  count;	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
228	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  int  nextByte  =  bitsCachedSize  -  count.length;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  int  nextByte  =  bitsCachedSize  -  count.length;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    count;    int  nextByte  =  bitsCachedSize  -  count.length;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	48	None	add
229	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(bitsOut);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read(bitsOut);	  final    int    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	13	None	replace
230	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(bytesOut);  [CE]  cannot  find  symbol  bytesOut  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(bytesOut);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read(bytesOut);	  final    int    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bytesOut	13	None	replace
231	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(bits);  [CE]  cannot  find  symbol  bits  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(bits);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read(bits);	  final    int    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bits	13	None	replace
232	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(count);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read(count);	  final    int    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  int  cannot  be  dereferenced	13	None	replace
233	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(bitsOut,  count);  [CE]  cannot  find  symbol  bitsOut  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(bitsOut,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read(bitsOut,  count);	  final    int    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	13	None	replace
234	[BUG]  [BUGGY]  final  long  nextByte  =  bitsOut.read(bits,  count);  [CE]  cannot  find  symbol  bits  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsOut.read(bits,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsOut.read(bits,  count);	  final    long    nextByte    =    in.read(bits,    count);    	non-compiled	[CE]  cannot  find  symbol  bits	18	None	replace
235	[BUG]  [BUGGY]  final  long  nextByte  =  readBitsOut.read(bits,  count);  [CE]  cannot  find  symbol  bits  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBitsOut.read(bits,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBitsOut.read(bits,  count);	  final    long    nextByte    =    in.read(bits,    count);    	non-compiled	[CE]  cannot  find  symbol  bits	18	None	replace
236	[BUG]  [BUGGY]  final  long  nextByte  =  readBits.read(bits,  count);  [CE]  cannot  find  symbol  bits  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits.read(bits,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits.read(bits,  count);	  final    long    nextByte    =    in.read(bits,    count);    	non-compiled	[CE]  cannot  find  symbol  bits	18	None	replace
237	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(in,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(in,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(in,  count);	  final    long    nextByte    =    in.read(bits,    count);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	18	None	replace
238	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count,  MAXIMUM_CACHE_SIZE);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsOut);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	37	None	replace
239	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  MASKS);  [CE]  no  suitable  method  found  for  read(int,int,long[])  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  MASKS);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count,  MASKS);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsOut);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,long[])	37	None	replace
240	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  BYTE_ENDIAN);  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  BYTE_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count,  BYTE_ENDIAN);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	37	None	replace
241	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  MISSING_BITS);  [CE]  cannot  find  symbol  MISSING_BITS  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  MISSING_BITS);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count,  MISSING_BITS);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  MISSING_BITS	37	None	replace
242	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  int  nextByte  =  bitsCachedSize  -  1;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  int  nextByte  =  bitsCachedSize  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    1;    int  nextByte  =  bitsCachedSize  -  1;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	67	None	add
243	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  Integer  nextByte  =  bitsCachedSize  -  1;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  Integer  nextByte  =  bitsCachedSize  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    1;    Integer  nextByte  =  bitsCachedSize  -  1;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	67	None	add
244	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  long  nextByte  =  bitsCachedSize  -  1;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  long  nextByte  =  bitsCachedSize  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    1;    long  nextByte  =  bitsCachedSize  -  1;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	67	None	add
245	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  int  nextByte  =  bitscachedSize  -  1;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  int  nextByte  =  bitscachedSize  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    1;    int  nextByte  =  bitscachedSize  -  1;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	67	None	add
246	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  Int  nextByte  =  bitsCachedSize  -  1;  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  Int  nextByte  =  bitsCachedSize  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    1;    Int  nextByte  =  bitsCachedSize  -  1;	  	non-compiled	[CE]  cannot  find  symbol	67	None	add
247	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  float  nextByte  =  bitsCachedSize  -  1;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  float  nextByte  =  bitsCachedSize  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    1;    float  nextByte  =  bitsCachedSize  -  1;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	67	None	add
248	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  Long  nextByte  =  bitsCachedSize  -  1;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  Long  nextByte  =  bitsCachedSize  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    1;    Long  nextByte  =  bitsCachedSize  -  1;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	67	None	add
249	[BUG]  [BUGGY]  final  long  nextByte  =  in.readShort(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.readShort(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.readShort(bitsCachedSize);	  final    long    nextByte    =    this.in.readShort(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
250	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.readShort(this.in);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.readShort(this.in);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.readShort(this.in);	  final    long    nextByte    =    this.in.readShort(bitsCachedSize);    	non-compiled	[CE]  int  cannot  be  dereferenced	6	None	replace
251	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.readShort(count);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.readShort(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.readShort(count);	  final    long    nextByte    =    this.in.readShort(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
252	[BUG]  [BUGGY]  final  long  nextByte  =  Integer.readShort(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  Integer.readShort(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  Integer.readShort(bitsCachedSize);	  final    long    nextByte    =    this.in.readShort(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
253	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    int  nextByte  =  bitsCachedSize;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	45	None	add
254	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  Integer  nextByte  =  bitsCachedSize;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  Integer  nextByte  =  bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    Integer  nextByte  =  bitsCachedSize;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	45	None	add
255	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  long  nextByte  =  bitsCachedSize;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  long  nextByte  =  bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    long  nextByte  =  bitsCachedSize;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	45	None	add
256	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  Int  nextByte  =  bitsCachedSize;  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  Int  nextByte  =  bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    Int  nextByte  =  bitsCachedSize;	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
257	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitscachedSize;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitscachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    int  nextByte  =  bitscachedSize;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	45	None	add
258	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize.length;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize.length;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    int  nextByte  =  bitsCachedSize.length;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	45	None	add
259	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    int  nextByte  =  bitsCachedSize);	  	non-compiled	[CE]  ';'  expected	45	None	add
260	[BUG]  [BUGGY]  final  int  nextByte  =  bytesCachedSize.read();  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bytesCachedSize.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bytesCachedSize.read();	  final    int    nextByte    =    bitsOut.read();    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	12	None	replace
261	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  bitsCachedSize);	  final    long    nextByte    =    in.read(bytesCachedSize,    bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	20	None	replace
262	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bytesCachedSize,  count);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bytesCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bytesCachedSize,  count);	  final    long    nextByte    =    in.read(bytesCachedSize,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	20	None	replace
263	[BUG]  [BUGGY]  final  long  nextByte  =  bytesOut.read(bitsCachedSize,  bitsCachedSize);  [CE]  cannot  find  symbol  bytesOut  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bytesOut.read(bitsCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bytesOut.read(bitsCachedSize,  bitsCachedSize);	  final    long    nextByte    =    in.read(bytesCachedSize,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesOut	20	None	replace
264	[BUG]  [BUGGY]  final  long  nextByte  =  readBitsOut.read(bitsCachedSize,  bitsCachedSize);  [CE]  cannot  find  symbol  readBitsOut  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBitsOut.read(bitsCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBitsOut.read(bitsCachedSize,  bitsCachedSize);	  final    long    nextByte    =    in.read(bytesCachedSize,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  readBitsOut	20	None	replace
265	[BUG]  [BUGGY]  InputStream  in  =  readBits(count);  [CE]  incompatible  types  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  InputStream  in  =  readBits(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  readBits(count);	  InputStream    in    =    readInt();    	non-compiled	[CE]  incompatible  types	70	None	replace
266	[BUG]  [BUGGY]  InputStream  in  =  this.readInt();  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  InputStream  in  =  this.readInt();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  this.readInt();	  InputStream    in    =    readInt();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
267	[BUG]  [BUGGY]  InputStream  in  =  readBitsInt();  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  InputStream  in  =  readBitsInt();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  readBitsInt();	  InputStream    in    =    readInt();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
268	[BUG]  [BUGGY]  int  nextByte  =  read(count);  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  read(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  read(count);	  int    nextByte    =    read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
269	[BUG]  [BUGGY]  int  nextByte  =  read(bitsCachedSize,  count);  [CE]  cannot  find  symbol  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  read(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  read(bitsCachedSize,  count);	  int    nextByte    =    read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
270	[BUG]  [BUGGY]  int  nextByte  =  read(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  read(bytesCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  read(bytesCachedSize);	  int    nextByte    =    read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	51	None	replace
271	[BUG]  [BUGGY]  int  nextByte  =  read(bitsCachedSize  -  count);  [CE]  cannot  find  symbol  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  read(bitsCachedSize  -  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  read(bitsCachedSize  -  count);	  int    nextByte    =    read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
272	[BUG]  [BUGGY]  int  nextByte  =  read(bitsCachedSize  +  count);  [CE]  cannot  find  symbol  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  read(bitsCachedSize  +  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  read(bitsCachedSize  +  count);	  int    nextByte    =    read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
273	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    int    nextByte    =    this.in.read();    final  int  nextByte  =  this.in.read();	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	2	None	add
274	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read();  Final  int  nextByte  =  this.in.read();  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read();  Final  int  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    int    nextByte    =    this.in.read();    Final  int  nextByte  =  this.in.read();	  	non-compiled	[CE]  not  a  statement	2	None	add
275	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read();  final  int  nextByte  =  this.out.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read();  final  int  nextByte  =  this.out.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    int    nextByte    =    this.in.read();    final  int  nextByte  =  this.out.read();	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	2	None	add
276	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read();  final  int  nextByte  =  that.in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read();  final  int  nextByte  =  that.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    int    nextByte    =    this.in.read();    final  int  nextByte  =  that.in.read();	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	2	None	add
277	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    int    nextByte    =    this.in.read();    final  int  nextByte  =  this.in.read());	  	non-compiled	[CE]  ';'  expected	2	None	add
278	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(count);  final  long  nextByte  =  readBits(count);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]    StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(count);  final  long  nextByte  =  readBits(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(count);    final  long  nextByte  =  readBits(count);	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	10	None	add
279	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(count);  final  int  nextByte  =  readBits(count);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]      StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(count);  final  int  nextByte  =  readBits(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(count);    final  int  nextByte  =  readBits(count);	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	10	None	add
280	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(count);  Final  long  nextByte  =  readBits(count);  [CE]  not  a  statement  [FE]        StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(count);  Final  long  nextByte  =  readBits(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(count);    Final  long  nextByte  =  readBits(count);	  	non-compiled	[CE]  not  a  statement	10	None	add
281	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(count);  final  short  nextByte  =  readBits(count);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(count);  final  short  nextByte  =  readBits(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(count);    final  short  nextByte  =  readBits(count);	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	10	None	add
282	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(count);  final  long  nextByte  =  readBits(count;  [CE]  ')'  expected  [FE]            StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(count);  final  long  nextByte  =  readBits(count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(count);    final  long  nextByte  =  readBits(count;	  	non-compiled	[CE]  ')'  expected	10	None	add
283	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(count);  final  long  nextByte  =  ReadBits(count);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]              StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(count);  final  long  nextByte  =  ReadBits(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(count);    final  long  nextByte  =  ReadBits(count);	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	10	None	add
284	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(count);  final  Long  nextByte  =  readBits(count);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(count);  final  Long  nextByte  =  readBits(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(count);    final  Long  nextByte  =  readBits(count);	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	10	None	add
285	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  count,  bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  count,  bitsOut);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize,  count,  bitsOut);	  final    int    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	35	None	replace
286	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  bitsOut,  count);  [CE]  cannot  find  symbol  bitsOut  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  bitsOut,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize,  bitsOut,  count);	  final    int    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	35	None	replace
287	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  count);	  final    int    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	35	None	replace
288	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bits,  MAXIMUM_CACHE_SIZE,  count);  [CE]  cannot  find  symbol  bits  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bits,  MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bits,  MAXIMUM_CACHE_SIZE,  count);	  final    int    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  bits	35	None	replace
289	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bitsOut,  count);  [CE]  cannot  find  symbol  bitsOut  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bitsOut,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(bitsOut,  count);	  final    long    nextByte    =    bitsCachedSize.read(count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	30	None	replace
290	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(bitsCachedSize);  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read(bitsCachedSize);	  final    long    nextByte    =    bitsCachedSize.read(count);    	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	replace
291	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bytesOut,  count);  [CE]  cannot  find  symbol  bytesOut  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bytesOut,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(bytesOut,  count);	  final    long    nextByte    =    bitsCachedSize.read(count);    	non-compiled	[CE]  cannot  find  symbol  bytesOut	30	None	replace
292	[BUG]  [BUGGY]  final  int  nextByte  =  InputStream.read();  [CE]  non-static  method  read()  cannot  be  referenced  from  a  static  context  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  InputStream.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  InputStream.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read();    	non-compiled	[CE]  non-static  method  read()  cannot  be  referenced  from  a  static  context	72	None	replace
293	[BUG]  [BUGGY]  final  int  nextByte  =  InputStream.readInt();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  InputStream.readInt();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  InputStream.readInt();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
294	[BUG]  [BUGGY]  final  int  nextByte  =  InputStream.read(bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  InputStream.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  InputStream.read(bitsCachedSize);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	72	None	replace
295	[BUG]  [BUGGY]  final  int  nextByte  =  InputStream.read(bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  InputStream.read(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  InputStream.read(bitsCachedSize,  count);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	72	None	replace
296	[BUG]  [BUGGY]  nextByte  =  InputStream.read(bitsCachedSize);  [CE]  cannot  find  symbol  nextByte  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  nextByte  =  InputStream.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	nextByte  =  InputStream.read(bitsCachedSize);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	72	None	replace
297	[BUG]  [BUGGY]  final  long  nextByte  =  that.in.read();  [CE]  package  that  does  not  exist  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  that.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  that.in.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    that.in.read();    	non-compiled	[CE]  package  that  does  not  exist	76	None	replace
298	[BUG]  [BUGGY]  lastByte  =  this.in.read();  final  long  nextByte  =  that.in.read();  [CE]  cannot  find  symbol  lastByte  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  lastByte  =  this.in.read();  final  long  nextByte  =  that.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	lastByte  =  this.in.read();  final  long  nextByte  =  that.in.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    that.in.read();    	non-compiled	[CE]  cannot  find  symbol  lastByte	76	None	replace
299	[BUG]  [BUGGY]  int  nextByte  =  this.in.read();  final  long  nextByte  =  that.in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  this.in.read();  final  long  nextByte  =  that.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  this.in.read();  final  long  nextByte  =  that.in.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    that.in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	76	None	replace
300	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  count,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  count,  bitsCachedSize);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	4	None	replace
301	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  count,  bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  count,  bitsOut);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  count,  bitsOut);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	4	None	replace
302	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  bitsCachedSize,  count);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	4	None	replace
303	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  bitsOut,  count);  [CE]  cannot  find  symbol  bitsOut  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  bitsOut,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  bitsOut,  count);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	4	None	replace
304	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  count);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	4	None	replace
305	[BUG]  [BUGGY]  final  long  nextByte  =  this.out.read();  [CE]  cannot  find  symbol  out  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.out.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.out.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.out.read();    	non-compiled	[CE]  cannot  find  symbol  out	55	None	replace
306	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read();  final  long  nextByte  =  this.out.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read();  final  long  nextByte  =  this.out.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read();  final  long  nextByte  =  this.out.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.out.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	55	None	replace
307	[BUG]  [BUGGY]  lastByte  =  this.in.read();  final  long  nextByte  =  this.out.read();  [CE]  cannot  find  symbol  lastByte  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  lastByte  =  this.in.read();  final  long  nextByte  =  this.out.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	lastByte  =  this.in.read();  final  long  nextByte  =  this.out.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.out.read();    	non-compiled	[CE]  cannot  find  symbol  lastByte	55	None	replace
308	[BUG]  [BUGGY]  int  nextByte  =  this.in.read();  final  int  nextByte  =  this.out.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  this.in.read();  final  int  nextByte  =  this.out.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  this.in.read();  final  int  nextByte  =  this.out.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.out.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	55	None	replace
309	[BUG]  [BUGGY]  int  nextByte  =  this.in.read();  int  nextByte  =  this.out.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  this.in.read();  int  nextByte  =  this.out.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  this.in.read();  int  nextByte  =  this.out.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.out.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	55	None	replace
310	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(buffs);  [CE]  cannot  find  symbol  buffs  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(buffs);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(buffs);	  final    long    nextByte    =    bitsCachedSize.read(bytesOut);    	non-compiled	[CE]  cannot  find  symbol  buffs	29	None	replace
311	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	long  nextByte  =  readBits(count);	  long    nextByte    =    readBits(bitsCachedSize);    timeout    	compilable	  [FE]  StackOverflowError  	89	12	replace
312	[BUG]  [BUGGY]  long  nextByte  =  readBits(count);  [FE]  StackOverflowError  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  readBits(count);	  long    nextByte    =    readBits(bitsCachedSize);    timeout    	compilable	  [FE]  StackOverflowError  	89	12	replace
313	[BUG]  [BUGGY]  int  nextByte  =  readBits(bitsCachedSize);  [CE]  possible  loss  of  precision  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  readBits(bitsCachedSize);	  long    nextByte    =    readBits(bitsCachedSize);    timeout    	non-compiled	[CE]  possible  loss  of  precision	89	None	replace
314	[BUG]  [BUGGY]  long  nextByte  =  MASKS.readBits(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  MASKS.readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  MASKS.readBits(bitsCachedSize);	  long    nextByte    =    readBits(bitsCachedSize);    timeout    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
315	[BUG]  [BUGGY]  timeout  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  this.readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	long  nextByte  =  this.readBits(bitsCachedSize);	  long    nextByte    =    readBits(bitsCachedSize);    timeout    	compilable	timeout	89	1	replace
316	[BUG]  [BUGGY]  long  nextByte  =  this.readBits(bitsCachedSize);  timeout  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  this.readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  this.readBits(bitsCachedSize);	  long    nextByte    =    readBits(bitsCachedSize);    timeout    	compilable	timeout	89	1	replace
317	[BUG]  [BUGGY]  long  nextByte  =  readBits(bitsCachedSize,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  readBits(bitsCachedSize,  count);	  long    nextByte    =    readBits(bitsCachedSize);    timeout    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	89	None	replace
318	[BUG]  [BUGGY]  long  nextByte  =  in.readBits(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  in.readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  in.readBits(bitsCachedSize);	  long    nextByte    =    readBits(bitsCachedSize);    timeout    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
319	[BUG]  [BUGGY]  long  nextByte  =  readBits(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bytesCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  readBits(bytesCachedSize);	  long    nextByte    =    readBits(bitsCachedSize);    timeout    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	89	None	replace
320	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read(bitsCachedSize,  0,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read(bitsCachedSize,  0,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read(bitsCachedSize,  0,  count);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	75	None	replace
321	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int,int)  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count,  bitsCachedSize);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int,int)	75	None	replace
322	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int,int,int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  bitsCachedSize,  count);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int,int)	75	None	replace
323	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  bitsCachedSize);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	75	None	replace
324	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count,  bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count,  bitsOut);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count,  bitsOut);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	75	None	replace
325	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  bitsOut,  count);  [CE]  cannot  find  symbol  bitsOut  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  bitsOut,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  bitsOut,  count);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	75	None	replace
326	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    MAXIMUM_CACHE_SIZE,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	39	None	replace
327	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  count,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize,  count,  MAXIMUM_CACHE_SIZE);	  final    long    nextByte    =    in.read(bitsCachedSize,    MAXIMUM_CACHE_SIZE,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	39	None	replace
328	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bits,  count,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bits  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bits,  count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bits,  count,  MAXIMUM_CACHE_SIZE);	  final    long    nextByte    =    in.read(bitsCachedSize,    MAXIMUM_CACHE_SIZE,    count);    	non-compiled	[CE]  cannot  find  symbol  bits	39	None	replace
329	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    MAXIMUM_CACHE_SIZE,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	39	None	replace
330	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  count  -  1);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  count  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize,  count  -  1);	  final    long    nextByte    =    in.read(bitsCachedSize,    count    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	64	None	replace
331	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count  -  1,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count  -  1,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count  -  1,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    count    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	64	None	replace
332	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize  -  1);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize  -  1);	  final    long    nextByte    =    in.read(bitsCachedSize,    count    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	64	None	replace
333	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  bitsOut  -  1);  [CE]  cannot  find  symbol  bitsOut  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  bitsOut  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count,  bitsOut  -  1);	  final    long    nextByte    =    in.read(bitsCachedSize,    count    -    1);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	64	None	replace
334	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count  -  1,  bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count  -  1,  bitsOut);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count  -  1,  bitsOut);	  final    long    nextByte    =    in.read(bitsCachedSize,    count    -    1);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	64	None	replace
335	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bits,  count,  bitsCachedSize  -  1);  [CE]  cannot  find  symbol  bits  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bits,  count,  bitsCachedSize  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bits,  count,  bitsCachedSize  -  1);	  final    long    nextByte    =    in.read(bitsCachedSize,    count    -    1);    	non-compiled	[CE]  cannot  find  symbol  bits	64	None	replace
336	[BUG]  [BUGGY]  final  long  nextByte  =  BitsOut.read(bitsCachedSize);  [CE]  cannot  find  symbol  BitsOut  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  BitsOut.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  BitsOut.read(bitsCachedSize);	  final    long    nextByte    =    bytesCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  BitsOut	8	None	replace
337	[BUG]  [BUGGY]  final  int  nextByte  =  readBits(bitsCachedSize);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readBits(bitsCachedSize);	  final    long    nextByte    =    readBits(bitsCachedSize);    timeout    	non-compiled	[CE]  possible  loss  of  precision	58	None	replace
338	[BUG]  [BUGGY]  final  long  nextByte  =  MASKS.readBits(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  MASKS.readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  MASKS.readBits(bitsCachedSize);	  final    long    nextByte    =    readBits(bitsCachedSize);    timeout    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
339	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	final  long  nextByte  =  this.readBits(bitsCachedSize);	  final    long    nextByte    =    readBits(bitsCachedSize);    timeout    	compilable	timeout	58	1	replace
340	[BUG]  [BUGGY]  final  long  nextByte  =  this.readBits(bitsCachedSize);  timeout  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.readBits(bitsCachedSize);	  final    long    nextByte    =    readBits(bitsCachedSize);    timeout    	compilable	timeout	58	1	replace
341	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  count  +  bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  count  +  bitsCachedSize;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
342	[BUG]  [BUGGY]  int  nextByte  =  count  +  bitsCachedSize;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  count  +  bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  count  +  bitsCachedSize;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
343	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  bitsCachedSize  +  1;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
344	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize  +  1;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
345	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(bitsCachedSize  +  count)/  MAXIMUM_CACHE_SIZE;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =(bitsCachedSize  +  count)/  MAXIMUM_CACHE_SIZE;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
346	[BUG]  [BUGGY]  int  nextByte  =(bitsCachedSize  +  count)/  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(bitsCachedSize  +  count)/  MAXIMUM_CACHE_SIZE;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =(bitsCachedSize  +  count)/  MAXIMUM_CACHE_SIZE;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
347	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(bitsCachedSize  +  count)%  MAXIMUM_CACHE_SIZE;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =(bitsCachedSize  +  count)%  MAXIMUM_CACHE_SIZE;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
348	[BUG]  [BUGGY]  int  nextByte  =(bitsCachedSize  +  count)%  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(bitsCachedSize  +  count)%  MAXIMUM_CACHE_SIZE;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =(bitsCachedSize  +  count)%  MAXIMUM_CACHE_SIZE;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
349	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  count  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  bitsCachedSize  +  count  -  1;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
350	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  +  count  -  1;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  count  -  1;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize  +  count  -  1;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
351	[BUG]  [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  long  nextByte  =  readBits(bitsCachedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  long  nextByte  =  readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long    nextByte    =    readBits(bitsCachedSize);    long  nextByte  =  readBits(bitsCachedSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	88	None	add
352	[BUG]  [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  int  nextByte  =  readBits(bitsCachedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  int  nextByte  =  readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long    nextByte    =    readBits(bitsCachedSize);    int  nextByte  =  readBits(bitsCachedSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	88	None	add
353	[BUG]  [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  Long  nextByte  =  readBits(bitsCachedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  Long  nextByte  =  readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long    nextByte    =    readBits(bitsCachedSize);    Long  nextByte  =  readBits(bitsCachedSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	88	None	add
354	[BUG]  [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  short  nextByte  =  readBits(bitsCachedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  short  nextByte  =  readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long    nextByte    =    readBits(bitsCachedSize);    short  nextByte  =  readBits(bitsCachedSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	88	None	add
355	[BUG]  [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  long  nextByte  =  ReadBits(bitsCachedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  long  nextByte  =  ReadBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long    nextByte    =    readBits(bitsCachedSize);    long  nextByte  =  ReadBits(bitsCachedSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	88	None	add
356	[BUG]  [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  long  nextByte  =  readBits(bitsCalculatedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  long  nextByte  =  readBits(bitsCalculatedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long    nextByte    =    readBits(bitsCachedSize);    long  nextByte  =  readBits(bitsCalculatedSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	88	None	add
357	[BUG]  [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  long  nextByte  =  readBits(bitsSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  long  nextByte  =  readBits(bitsSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long    nextByte    =    readBits(bitsCachedSize);    long  nextByte  =  readBits(bitsSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	88	None	add
358	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  int  nextByte  =  bitsCachedSize  +  count;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  int  nextByte  =  bitsCachedSize  +  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    +    count;    int  nextByte  =  bitsCachedSize  +  count;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	52	None	add
359	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  Integer  nextByte  =  bitsCachedSize  +  count;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  Integer  nextByte  =  bitsCachedSize  +  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    +    count;    Integer  nextByte  =  bitsCachedSize  +  count;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	52	None	add
360	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  int  nextByte  =  bitscachedSize  +  count;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  int  nextByte  =  bitscachedSize  +  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    +    count;    int  nextByte  =  bitscachedSize  +  count;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	52	None	add
361	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  int  nextByte  =  bitsCachedSize  +  count);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  int  nextByte  =  bitsCachedSize  +  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    +    count;    int  nextByte  =  bitsCachedSize  +  count);	  	non-compiled	[CE]  ';'  expected	52	None	add
362	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  long  nextByte  =  bitsCachedSize  +  count;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  long  nextByte  =  bitsCachedSize  +  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    +    count;    long  nextByte  =  bitsCachedSize  +  count;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	52	None	add
363	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  Int  nextByte  =  bitsCachedSize  +  count;  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  Int  nextByte  =  bitsCachedSize  +  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    +    count;    Int  nextByte  =  bitsCachedSize  +  count;	  	non-compiled	[CE]  cannot  find  symbol	52	None	add
364	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  int  nextByte  =  bitsCalendarSize  +  count;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  int  nextByte  =  bitsCalendarSize  +  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    +    count;    int  nextByte  =  bitsCalendarSize  +  count;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	52	None	add
365	[BUG]  [BUGGY]  byte  nextByte  =  this.in.read();  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  byte  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	byte  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    int    nextByte    =    this.in.read();    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
366	[BUG]  [BUGGY]  final  short  nextByte  =  this.in.read();  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  short  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  short  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    short    nextByte    =    this.in.read();    	non-compiled	[CE]  possible  loss  of  precision	44	None	replace
367	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  final  long  nextByte  =  this.in.read();  final  short  nextByte  =  this.in.read();  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  while(count  <  bitsCachedSize)  {  final  long  nextByte  =  this.in.read();  final  short  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	while(count  <  bitsCachedSize)  {  final  long  nextByte  =  this.in.read();  final  short  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    short    nextByte    =    this.in.read();    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
368	[BUG]  [BUGGY]  lastByte  =  this.in.read();  final  short  nextByte  =  this.in.read();  [CE]  cannot  find  symbol  lastByte  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  lastByte  =  this.in.read();  final  short  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	lastByte  =  this.in.read();  final  short  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    short    nextByte    =    this.in.read();    	non-compiled	[CE]  cannot  find  symbol  lastByte	44	None	replace
369	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  while(count  <  bitsCachedSize)  {  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	while(count  <  bitsCachedSize)  {  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    short    nextByte    =    this.in.read();    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
370	[BUG]  [BUGGY]  lastByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  [CE]  cannot  find  symbol  lastByte  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  lastByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	lastByte  =  this.in.read();  final  int  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    short    nextByte    =    this.in.read();    	non-compiled	[CE]  cannot  find  symbol  lastByte	44	None	replace
371	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(count);  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize.read(count);	  final    long    nextByte    =    this.bitsCachedSize.read(bits);    	non-compiled	[CE]  int  cannot  be  dereferenced	33	None	replace
372	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(bytes);  [CE]  cannot  find  symbol  bytes  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(bytes);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize.read(bytes);	  final    long    nextByte    =    this.bitsCachedSize.read(bits);    	non-compiled	[CE]  cannot  find  symbol  bytes	33	None	replace
373	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(buf,  count);  [CE]  cannot  find  symbol  buf  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(buf,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize.read(buf,  count);	  final    long    nextByte    =    this.bitsCachedSize.read(bits);    	non-compiled	[CE]  cannot  find  symbol  buf	33	None	replace
374	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(b);  [CE]  cannot  find  symbol  b  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(b);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize.read(b);	  final    long    nextByte    =    this.bitsCachedSize.read(bits);    	non-compiled	[CE]  cannot  find  symbol  b	33	None	replace
375	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(buffs);  [CE]  cannot  find  symbol  buffs  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(buffs);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize.read(buffs);	  final    long    nextByte    =    this.bitsCachedSize.read(bits);    	non-compiled	[CE]  cannot  find  symbol  buffs	33	None	replace
376	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(buffer);  [CE]  cannot  find  symbol  buffer  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(buffer);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize.read(buffer);	  final    long    nextByte    =    this.bitsCachedSize.read(bits);    	non-compiled	[CE]  cannot  find  symbol  buffer	33	None	replace
377	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(buf,  count);  [CE]  cannot  find  symbol  buf  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(buf,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(buf,  count);	  final    long    nextByte    =    bitsCachedSize.read(bits);    	non-compiled	[CE]  cannot  find  symbol  buf	31	None	replace
378	[BUG]  [BUGGY]  final  int  nextByte  =  InputStream.read(bitsCachedSize,  in);  [CE]  no  suitable  method  found  for  read(int,InputStream)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  InputStream.read(bitsCachedSize,  in);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  InputStream.read(bitsCachedSize,  in);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read(in);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,InputStream)	74	None	replace
379	[BUG]  [BUGGY]  final  int  nextByte  =  InputStream.read(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  InputStream.read(bytesCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  InputStream.read(bytesCachedSize);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read(in);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	74	None	replace
380	[BUG]  [BUGGY]  final  int  nextByte  =  InputStream.readInt(bitsCachedSize,  count);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  InputStream.readInt(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  InputStream.readInt(bitsCachedSize,  count);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read(in);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
381	[BUG]  [BUGGY]  int  nextByte  =  InputStream.read(in);  [CE]  no  suitable  method  found  for  read(InputStream)  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  InputStream.read(in);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  InputStream.read(in);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read(in);    	non-compiled	[CE]  no  suitable  method  found  for  read(InputStream)	74	None	replace
382	[BUG]  [BUGGY]  final  int  nextByte  =  InputStream.read(bytesCachedSize,  in);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  InputStream.read(bytesCachedSize,  in);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  InputStream.read(bytesCachedSize,  in);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read(in);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	74	None	replace
383	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bits,  count);  [CE]  cannot  find  symbol  bits  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bits,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bits,  count);	  final    int    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bits	16	None	replace
384	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bytesCachedSize,  bitsCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bytesCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bytesCachedSize,  bitsCachedSize);	  final    int    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	16	None	replace
385	[BUG]  [BUGGY]  final  long  nextByte  =  readInt();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readInt();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readInt();	  final    int    nextByte    =    readInt();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
386	[BUG]  [BUGGY]  final  int  nextByte  =  readInt(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readInt(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt(bitsCachedSize);	  final    int    nextByte    =    readInt();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
387	[BUG]  [BUGGY]  final  int  nextByte  =  byteOrder.readInt();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  byteOrder.readInt();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  byteOrder.readInt();	  final    int    nextByte    =    readInt();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
388	[BUG]  [BUGGY]  final  int  nextByte  =  readInt(count);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readInt(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt(count);	  final    int    nextByte    =    readInt();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
389	[BUG]  [BUGGY]  final  int  nextByte  =  this.bitsCachedSize();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.bitsCachedSize();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.bitsCachedSize();	  final    int    nextByte    =    readInt();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
390	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	final  int  nextByte  =  this.bitsCachedSize;	  final    int    nextByte    =    readInt();    	compilable	  [FE]  AssertionError  	15	12	replace
391	[BUG]  [BUGGY]  final  int  nextByte  =  this.bitsCachedSize;  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.bitsCachedSize;	  final    int    nextByte    =    readInt();    	compilable	  [FE]  AssertionError  	15	12	replace
392	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(nextByte);  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(nextByte);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize.read(nextByte);	  final    long    nextByte    =    this.bitsCachedSize.read(bitsOut);    	non-compiled	[CE]  int  cannot  be  dereferenced	34	None	replace
393	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  count.read());  [CE]  int  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  count.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize,  count.read());	  final    long    nextByte    =    readBits(bitsCachedSize,    bitsOut.read());    	non-compiled	[CE]  int  cannot  be  dereferenced	78	None	replace
394	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bytesCachedSize,  bits.read());  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bytesCachedSize,  bits.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bytesCachedSize,  bits.read());	  final    long    nextByte    =    readBits(bitsCachedSize,    bitsOut.read());    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	78	None	replace
395	[BUG]  [BUGGY]  final  int  nextByte  =  readBits(bitsCachedSize,  bits.read());  [CE]  cannot  find  symbol  bits  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readBits(bitsCachedSize,  bits.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readBits(bitsCachedSize,  bits.read());	  final    long    nextByte    =    readBits(bitsCachedSize,    bitsOut.read());    	non-compiled	[CE]  cannot  find  symbol  bits	78	None	replace
396	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  data.read());  [CE]  cannot  find  symbol  data  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  data.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize,  data.read());	  final    long    nextByte    =    readBits(bitsCachedSize,    bitsOut.read());    	non-compiled	[CE]  cannot  find  symbol  data	78	None	replace
397	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  bytes.read());  [CE]  cannot  find  symbol  bytes  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  bytes.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize,  bytes.read());	  final    long    nextByte    =    readBits(bitsCachedSize,    bitsOut.read());    	non-compiled	[CE]  cannot  find  symbol  bytes	78	None	replace
398	[BUG]  [BUGGY]  int  nextByte  =  count.longValue();  [CE]  int  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  count.longValue();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  count.longValue();	  int    nextByte    =    bitsCachedSize.longValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
399	[BUG]  [BUGGY]  int  nextByte  =  this.bitsCachedSize.longValue();  [CE]  int  cannot  be  dereferenced  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  this.bitsCachedSize.longValue();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  this.bitsCachedSize.longValue();	  int    nextByte    =    bitsCachedSize.longValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
400	[BUG]  [BUGGY]  int  nextByte  =  bytesCachedSize.longValue();  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bytesCachedSize.longValue();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bytesCachedSize.longValue();	  int    nextByte    =    bitsCachedSize.longValue();    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	54	None	replace
401	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize.length();  [CE]  int  cannot  be  dereferenced  [FE]                                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize.length();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize.length();	  int    nextByte    =    bitsCachedSize.longValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
402	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER,  count);  [CE]  cannot  find  symbol  CENTER  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER,  count);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER);    	non-compiled	[CE]  cannot  find  symbol  CENTER	85	None	replace
403	[BUG]  [BUGGY]  final  long  nextByte  =  ByteOrder.CENTER.read(bitsCachedSize);  [CE]  cannot  find  symbol  CENTER  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  ByteOrder.CENTER.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  ByteOrder.CENTER.read(bitsCachedSize);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER);    	non-compiled	[CE]  cannot  find  symbol  CENTER	85	None	replace
404	[BUG]  [BUGGY]  final  long  nextByte  =  bytesCachedSize.read(ByteOrder.CENTER);  [CE]  cannot  find  symbol  CENTER  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bytesCachedSize.read(ByteOrder.CENTER);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bytesCachedSize.read(ByteOrder.CENTER);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER);    	non-compiled	[CE]  cannot  find  symbol  CENTER	85	None	replace
405	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER);  [CE]  cannot  find  symbol  CENTER  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER);    	non-compiled	[CE]  cannot  find  symbol  CENTER	85	None	replace
406	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.END);  [CE]  cannot  find  symbol  END  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.END);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.END);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER);    	non-compiled	[CE]  cannot  find  symbol  END	85	None	replace
407	[BUG]  [BUGGY]  final  int  nextByte  =  this.bitsCachedSize.read(byteOrder);  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.bitsCachedSize.read(byteOrder);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.bitsCachedSize.read(byteOrder);	  final    long    nextByte    =    byteOrder.read(this.bitsCachedSize);    	non-compiled	[CE]  int  cannot  be  dereferenced	66	None	replace
408	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(byteOrder.read(this.bitsCachedSize);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(byteOrder.read(this.bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(byteOrder.read(this.bitsCachedSize);	  final    long    nextByte    =    byteOrder.read(this.bitsCachedSize);    	non-compiled	[CE]  ')'  expected	66	None	replace
409	[BUG]  [BUGGY]  final  long  nextByte  =  Integer.read(bitsCachedSize,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  Integer.read(bitsCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  Integer.read(bitsCachedSize,  bitsCachedSize);	  final    long    nextByte    =    in.read(bytesCachedSize,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
410	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(in,  bitsCachedSize);  [CE]  int  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(in,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(in,  bitsCachedSize);	  final    long    nextByte    =    in.read(bytesCachedSize,    bitsCachedSize);    	non-compiled	[CE]  int  cannot  be  dereferenced	20	None	replace
411	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(in,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(in,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(in,  bitsCachedSize);	  final    long    nextByte    =    in.read(bytesCachedSize,    bitsCachedSize);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	20	None	replace
412	[BUG]  [BUGGY]  Integer  nextByte  =  readInt(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  Integer  nextByte  =  readInt(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	Integer  nextByte  =  readInt(bitsCachedSize);	  int    nextByte    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
413	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bitsCachedSize  +  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	long  nextByte  =  readBits(bitsCachedSize  +  count);	  long    nextByte    =    readBits(bitsCachedSize);    timeout    	compilable	  [FE]  StackOverflowError  	89	12	replace
414	[BUG]  [BUGGY]  long  nextByte  =  readBits(bitsCachedSize  +  count);  [FE]  StackOverflowError  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bitsCachedSize  +  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  readBits(bitsCachedSize  +  count);	  long    nextByte    =    readBits(bitsCachedSize);    timeout    	compilable	  [FE]  StackOverflowError  	89	12	replace
415	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bitsCachedSize  -  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	long  nextByte  =  readBits(bitsCachedSize  -  count);	  long    nextByte    =    readBits(bitsCachedSize);    timeout    	compilable	  [FE]  IllegalArgumentException  	89	12	replace
416	[BUG]  [BUGGY]  long  nextByte  =  readBits(bitsCachedSize  -  count);  [FE]  IllegalArgumentException  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bitsCachedSize  -  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  readBits(bitsCachedSize  -  count);	  long    nextByte    =    readBits(bitsCachedSize);    timeout    	compilable	  [FE]  IllegalArgumentException  	89	12	replace
417	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  count,  bits);  [CE]  cannot  find  symbol  bits  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  count,  bits);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize,  count,  bits);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  bits	37	None	replace
418	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.BYTE_ENDIAN);  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.BYTE_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.BYTE_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER);    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	85	None	replace
419	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.FIELD_NAME);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.FIELD_NAME);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.FIELD_NAME);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	85	None	replace
420	[BUG]  [BUGGY]  final  long  nextByte  =  bitsOut.readFully(bitsCachedSize);  [CE]  cannot  find  symbol  bitsOut  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsOut.readFully(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsOut.readFully(bitsCachedSize);	  final    long    nextByte    =    this.in.readFully(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	62	None	replace
421	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read(bits);  [CE]  cannot  find  symbol  bits  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read(bits);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read(bits);	  final    int    nextByte    =    this.in.read();    	non-compiled	[CE]  cannot  find  symbol  bits	3	None	replace
422	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  float  nextByte  =  bitsCachedSize  -  count;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  float  nextByte  =  bitsCachedSize  -  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    count;    float  nextByte  =  bitsCachedSize  -  count;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	48	None	add
423	[BUG]  [BUGGY]  Integer  nextByte  =  in.read(bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int)  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  Integer  nextByte  =  in.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	Integer  nextByte  =  in.read(bitsCachedSize);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	22	None	replace
424	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(byteOrder.CENTER_ENDIAN);  [CE]  cannot  find  symbol  CENTER_ENDIAN  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(byteOrder.CENTER_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(byteOrder.CENTER_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  CENTER_ENDIAN	84	None	replace
425	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER_BYTE);  [CE]  cannot  find  symbol  CENTER_BYTE  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER_BYTE);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER_BYTE);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  CENTER_BYTE	84	None	replace
426	[BUG]  [BUGGY]  final  long  nextByte  =  readBits();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits();	  final    long    nextByte    =    bits.read();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	59	None	replace
427	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bits);  [CE]  cannot  find  symbol  bits  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bits);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bits);	  final    int    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bits	16	None	replace
428	[BUG]  [BUGGY]  final  long  nextByte  =  Integer.read(bitsCachedSize,  count);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  Integer.read(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  Integer.read(bitsCachedSize,  count);	  final    long    nextByte    =    in.read(bits,    count);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
429	[BUG]  [BUGGY]  final  long  nextByte  =  bitsOut.read(in,  count);  [CE]  cannot  find  symbol  bitsOut  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsOut.read(in,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsOut.read(in,  count);	  final    long    nextByte    =    in.read(bits,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	18	None	replace
430	[BUG]  [BUGGY]  final  int  nextByte  =  readBits(bitsCachedSize).read();  [CE]  long  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readBits(bitsCachedSize).read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readBits(bitsCachedSize).read();	  final    int    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  long  cannot  be  dereferenced	13	None	replace
431	[BUG]  [BUGGY]  final  int  nextByte  =  readInt(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readInt(bytesCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt(bytesCachedSize);	  final    int    nextByte    =    readInt();    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	15	None	replace
432	[BUG]  [BUGGY]  final  int  nextByte  =  readInt(0);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readInt(0);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt(0);	  final    int    nextByte    =    readInt();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
433	[BUG]  [BUGGY]  final  int  nextByte  =  readInt(bitsCachedSize,  count);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readInt(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt(bitsCachedSize,  count);	  final    int    nextByte    =    readInt();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
434	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  count  -  1);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  count  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  0,  count  -  1);	  final    long    nextByte    =    in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	40	None	replace
435	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bits,  0,  count);  [CE]  cannot  find  symbol  bits  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bits,  0,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bits,  0,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  cannot  find  symbol  bits	40	None	replace
436	[BUG]  [BUGGY]  final  int  nextByte  =  InputStream.read(in);  [CE]  no  suitable  method  found  for  read(InputStream)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  InputStream.read(in);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  InputStream.read(in);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read(in);    	non-compiled	[CE]  no  suitable  method  found  for  read(InputStream)	74	None	replace
437	[BUG]  [BUGGY]  final  int  nextByte  =  InputStream.read(in,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(InputStream,int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  InputStream.read(in,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  InputStream.read(in,  bitsCachedSize);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read(in);    	non-compiled	[CE]  no  suitable  method  found  for  read(InputStream,int)	74	None	replace
438	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_ENDIAN,  count);  [CE]  cannot  find  symbol  VALUE_ENDIAN  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_ENDIAN,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_ENDIAN,  count);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.VALUE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  VALUE_ENDIAN	83	None	replace
439	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  bitsCachedSize.read());  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  bitsCachedSize.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize,  bitsCachedSize.read());	  final    long    nextByte    =    readBits(bitsCachedSize.read());    	non-compiled	[CE]  int  cannot  be  dereferenced	32	None	replace
440	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  readBits());  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  readBits());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize,  readBits());	  final    long    nextByte    =    readBits(bitsCachedSize.read());    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	32	None	replace
441	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  this.read());  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  this.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(this.bitsCachedSize,  this.read());	  final    long    nextByte    =    readBits(this.bitsCachedSize.read());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
442	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  data.read());  [CE]  cannot  find  symbol  data  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  data.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(this.bitsCachedSize,  data.read());	  final    long    nextByte    =    readBits(this.bitsCachedSize.read());    	non-compiled	[CE]  cannot  find  symbol  data	65	None	replace
443	[BUG]  [BUGGY]  final  int  nextByte  =  bitscachedSize.read();  [CE]  cannot  find  symbol  bitscachedSize  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitscachedSize.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitscachedSize.read();	  final    long    nextByte    =    bitscachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bitscachedSize	81	None	replace
444	[BUG]  [BUGGY]  final  long  nextByte  =  readBitsOut.read();  [CE]  cannot  find  symbol  readBitsOut  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBitsOut.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBitsOut.read();	  final    long    nextByte    =    bitscachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  readBitsOut	81	None	replace
445	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read(bitsCachedSize,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read(bitsCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read(bitsCachedSize,  bitsCachedSize);	  final    int    nextByte    =    this.in.read(bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	80	None	replace
446	[BUG]  [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  count  -  1);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  count  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  in.read(bitsCachedSize,  count  -  1);	  final    long    nextByte    =    in.read(bitsCachedSize,    count    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	64	None	replace
447	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bits,  count  -  1);  [CE]  cannot  find  symbol  bits  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bits,  count  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bits,  count  -  1);	  final    long    nextByte    =    in.read(bitsCachedSize,    count    -    1);    	non-compiled	[CE]  cannot  find  symbol  bits	64	None	replace
448	[BUG]  [BUGGY]  final  short  nextByte  =  in.read(bitsCachedSize,  count  -  1);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  short  nextByte  =  in.read(bitsCachedSize,  count  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  short  nextByte  =  in.read(bitsCachedSize,  count  -  1);	  final    long    nextByte    =    in.read(bitsCachedSize,    count    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	64	None	replace
449	[BUG]  [BUGGY]  final  double  nextByte  =  in.read(bitsCachedSize,  count  -  1);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  double  nextByte  =  in.read(bitsCachedSize,  count  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  double  nextByte  =  in.read(bitsCachedSize,  count  -  1);	  final    long    nextByte    =    in.read(bitsCachedSize,    count    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	64	None	replace
450	[BUG]  [BUGGY]  in.read(bytesCachedSize,  bitsCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bytesCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bytesCachedSize,  bitsCachedSize);	  in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	87	None	replace
451	[BUG]  [BUGGY]  in.read(bits);  [CE]  cannot  find  symbol  bits  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bits);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bits);	  in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bits	87	None	replace
452	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(next);  [CE]  cannot  find  symbol  next  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(next);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize.read(next);	  final    long    nextByte    =    this.bitsCachedSize.read(bitsOut);    	non-compiled	[CE]  cannot  find  symbol  next	34	None	replace
453	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize.longValue()  +  count;  [CE]  int  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize.longValue()  +  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize.longValue()  +  count;	  int    nextByte    =    bitsCachedSize.longValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
454	[BUG]  [BUGGY]  long  nextByte  =  bitsCachedSize.longValue();  [CE]  int  cannot  be  dereferenced  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  bitsCachedSize.longValue();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  bitsCachedSize.longValue();	  int    nextByte    =    bitsCachedSize.longValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
455	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize.longValue()  -  count;  [CE]  int  cannot  be  dereferenced  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize.longValue()  -  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize.longValue()  -  count;	  int    nextByte    =    bitsCachedSize.longValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
456	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize.read(count));  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize.read(count));  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize.read(count));	  final    long    nextByte    =    bitsCachedSize.read(count);    	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	replace
457	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize;  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  return  bitsCached  |=(nextByte  <  <  bitsCachedSize);  }  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize;  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  return  bitsCached  |=(nextByte  <  <  bitsCachedSize);  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    int  nextByte  =  bitsCachedSize;  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  return  bitsCached  |=(nextByte  <  <  bitsCachedSize);  }	  	non-compiled	[CE]  >  expected	45	None	add
458	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize;  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  return  bitsCached  ||(nextByte  <  <  bitsCachedSize);  }  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize;  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  return  bitsCached  ||(nextByte  <  <  bitsCachedSize);  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    int  nextByte  =  bitsCachedSize;  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  return  bitsCached  ||(nextByte  <  <  bitsCachedSize);  }	  	non-compiled	[CE]  >  expected	45	None	add
459	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize;  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  return  (nextByte  <  <  bitsCachedSize);  }  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize;  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  return  (nextByte  <  <  bitsCachedSize);  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    int  nextByte  =  bitsCachedSize;  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  return  (nextByte  <  <  bitsCachedSize);  }	  	non-compiled	[CE]  >  expected	45	None	add
460	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize;  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  return  BitInputStream.readBits(bitsCachedSize);  }  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  int  nextByte  =  bitsCachedSize;  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  return  BitInputStream.readBits(bitsCachedSize);  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    int  nextByte  =  bitsCachedSize;  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  return  BitInputStream.readBits(bitsCachedSize);  }	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	45	None	add
461	[BUG]  [BUGGY]  in.read(bitsCachedSize,  count,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bitsCachedSize,  count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bitsCachedSize,  count,  bitsCachedSize);	  in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	50	None	replace
462	[BUG]  [BUGGY]  in.read(bits,  0,  count);  [CE]  cannot  find  symbol  bits  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bits,  0,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bits,  0,  count);	  in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  bits	50	None	replace
463	[BUG]  [BUGGY]  in.read(bitsCachedSize,  count,  byteOrder);  [CE]  no  suitable  method  found  for  read(int,int,ByteOrder)  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bitsCachedSize,  count,  byteOrder);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bitsCachedSize,  count,  byteOrder);	  in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,ByteOrder)	50	None	replace
464	[BUG]  [BUGGY]  in.read(bitsCachedSize,  offset,  count);  [CE]  cannot  find  symbol  offset  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bitsCachedSize,  offset,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bitsCachedSize,  offset,  count);	  in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  offset	50	None	replace
465	[BUG]  [BUGGY]  final  byte  nextByte  =  this.in.read(bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  this.in.read(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  this.in.read(bitsCachedSize,  count);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	4	None	replace
466	[BUG]  [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  Integer  nextByte  =  readBits(bitsCachedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  Integer  nextByte  =  readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long    nextByte    =    readBits(bitsCachedSize);    Integer  nextByte  =  readBits(bitsCachedSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	88	None	add
467	[BUG]  [BUGGY]  final  long  nextByte  =  readShort(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readShort(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readShort(bitsCachedSize);	  final    long    nextByte    =    this.in.readShort(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
468	[BUG]  [BUGGY]  final  short  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  short  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  short  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);	  final    short    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	77	None	replace
469	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(this.bits);  [CE]  cannot  find  symbol  bits  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(this.bits);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize.read(this.bits);	  final    long    nextByte    =    this.bitsCachedSize.read(bits);    	non-compiled	[CE]  cannot  find  symbol  bits	33	None	replace
470	[BUG]  [BUGGY]  float  nextByte  =  bitsCachedSize  -  count;  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  float  nextByte  =  bitsCachedSize  -  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	float  nextByte  =  bitsCachedSize  -  count;	  int    nextByte    =    bitsCachedSize    -    count;    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
471	[BUG]  [BUGGY]  int  nextByte  =  this.in.read();  final  long  nextByte  =  this.out.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  this.in.read();  final  long  nextByte  =  this.out.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  this.in.read();  final  long  nextByte  =  this.out.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.out.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	55	None	replace
472	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count  -  1);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count  -  1);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	75	None	replace
473	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bits,  0,  count);  [CE]  cannot  find  symbol  bits  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bits,  0,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bits,  0,  count);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  cannot  find  symbol  bits	75	None	replace
474	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count  -  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count  -  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count  -  bitsCachedSize);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	75	None	replace
475	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  int  nextByte  =  bitsCachedSize  -  2;  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  int  nextByte  =  bitsCachedSize  -  2;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    1;    int  nextByte  =  bitsCachedSize  -  2;	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	67	None	add
476	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(count);  final  long  nextByte  =  readBits(count));  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(count);  final  long  nextByte  =  readBits(count));  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(count);    final  long  nextByte  =  readBits(count));	  	non-compiled	[CE]  ';'  expected	10	None	add
477	[BUG]  [BUGGY]  final  byte  nextByte  =  this.in.read(bitsCachedSize  -  1);  [CE]  no  suitable  method  found  for  read(int)  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  this.in.read(bitsCachedSize  -  1);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  this.in.read(bitsCachedSize  -  1);	  final    long    nextByte    =    this.in.read(bitsCachedSize    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	61	None	replace
478	[BUG]  [BUGGY]  final  byte  =  in.read(bitsCachedSize,  bitsCachedSize);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  =  in.read(bitsCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  =  in.read(bitsCachedSize,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    bitsCachedSize);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
479	[BUG]  [BUGGY]  byteOrder  =  this.in.read();  final  long  nextByte  =  this.in.read();  [CE]  cannot  assign  a  value  to  final  variable  byteOrder  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  byteOrder  =  this.in.read();  final  long  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	byteOrder  =  this.in.read();  final  long  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  byteOrder	41	None	replace
480	[BUG]  [BUGGY]  int  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	41	None	replace
481	[BUG]  [BUGGY]  int  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	41	None	replace
482	[BUG]  [BUGGY]  long  nextByte  =  in.read();  final  int  nextByte  =  InputStream.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  in.read();  final  int  nextByte  =  InputStream.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  in.read();  final  int  nextByte  =  InputStream.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	72	None	replace
483	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(next);  [CE]  cannot  find  symbol  next  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(next);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(next);	  final    long    nextByte    =    bitsCachedSize.read(bytes);    	non-compiled	[CE]  cannot  find  symbol  next	71	None	replace
484	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  8;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  bitsCachedSize  -  8;	  int    nextByte    =    bitsCachedSize    -    1;    	compilable	  [FE]  AssertionError  	68	12	replace
485	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  8;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  8;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize  -  8;	  int    nextByte    =    bitsCachedSize    -    1;    	compilable	  [FE]  AssertionError  	68	12	replace
486	[BUG]  [BUGGY]  final  long  nextByte  =  ByteOrder.read(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  ByteOrder.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  ByteOrder.read(bitsCachedSize);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
487	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize  -  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	final  long  nextByte  =  readBits(bitsCachedSize  -  count);	  final    long    nextByte    =    readBits(count);    	compilable	  [FE]  IllegalArgumentException  	11	12	replace
488	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize  -  count);  [FE]  IllegalArgumentException  [FE]    StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize  -  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize  -  count);	  final    long    nextByte    =    readBits(count);    	compilable	  [FE]  IllegalArgumentException  	11	12	replace
489	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize(count);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize(count);	  final    long    nextByte    =    readBits(count);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
490	[BUG]  [BUGGY]  long  nextByte  =  in.read();  final  int  nextByte  =  input.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  in.read();  final  int  nextByte  =  input.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  in.read();  final  int  nextByte  =  input.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    input.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	73	None	replace
491	[BUG]  [BUGGY]  byte  nextByte  =  in.read();  final  int  nextByte  =  input.read();  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  byte  nextByte  =  in.read();  final  int  nextByte  =  input.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	byte  nextByte  =  in.read();  final  int  nextByte  =  input.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    input.read();    	non-compiled	[CE]  possible  loss  of  precision	73	None	replace
492	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  in.read());  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  in.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize,  in.read());	  final    long    nextByte    =    readBits(bitsCachedSize,    bitsOut.read());    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	78	None	replace
493	[BUG]  [BUGGY]  byteOrder  =  this.in.read();  final  long  nextByte  =  that.in.read();  [CE]  cannot  assign  a  value  to  final  variable  byteOrder  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  byteOrder  =  this.in.read();  final  long  nextByte  =  that.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	byteOrder  =  this.in.read();  final  long  nextByte  =  that.in.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    that.in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  byteOrder	76	None	replace
494	[BUG]  [BUGGY]  int  nextByte  =  this.in.read();  final  int  nextByte  =  that.in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  this.in.read();  final  int  nextByte  =  that.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  this.in.read();  final  int  nextByte  =  that.in.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    that.in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	76	None	replace
495	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  8;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  bitsCachedSize  +  8;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	11	replace
496	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  +  8;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  8;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize  +  8;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	11	replace
497	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(bitsCachedSize  +  1)/  MAXIMUM_CACHE_SIZE;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =(bitsCachedSize  +  1)/  MAXIMUM_CACHE_SIZE;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
498	[BUG]  [BUGGY]  int  nextByte  =(bitsCachedSize  +  1)/  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(bitsCachedSize  +  1)/  MAXIMUM_CACHE_SIZE;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =(bitsCachedSize  +  1)/  MAXIMUM_CACHE_SIZE;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
499	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  2;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  bitsCachedSize  +  2;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
500	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  +  2;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  2;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize  +  2;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
501	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  readBits(bitscachedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  readBits(bitscachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(bitsCachedSize);    final  long  nextByte  =  readBits(bitscachedSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	57	None	add
502	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  readBits(bitsCachedSsize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  readBits(bitsCachedSsize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(bitsCachedSize);    final  long  nextByte  =  readBits(bitsCachedSsize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	57	None	add
503	[BUG]  [BUGGY]  final  int  nextByte  =  bits.read();  [CE]  cannot  find  symbol  bits  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bits.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bits.read();	  final    int    nextByte    =    this.bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bits	14	None	replace
504	[BUG]  [BUGGY]  final  long  nextByte  =  Integer.MAX_VALUE.readUTF();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  Integer.MAX_VALUE.readUTF();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  Integer.MAX_VALUE.readUTF();	  final    long    nextByte    =    this.in.readUTF();    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
505	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.readUTF();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.readUTF();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.readUTF();	  final    long    nextByte    =    this.in.readUTF();    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
506	[BUG]  [BUGGY]  final  byte  nextByte  =  this.in.read(bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int)  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  this.in.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  this.in.read(bitsCachedSize);	  final    long    nextByte    =    this.in.read(bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	1	None	replace
507	[BUG]  [BUGGY]  final  int  nextByte  =  readInt(byteOrder,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readInt(byteOrder,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt(byteOrder,  bitsCachedSize);	  final    int    nextByte    =    readInt(in,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
508	[BUG]  [BUGGY]  int  nextByte  =  this.in.read();  final  short  nextByte  =  this.in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  this.in.read();  final  short  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  this.in.read();  final  short  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    short    nextByte    =    this.in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	44	None	replace
509	[BUG]  [BUGGY]  byte  nextByte  =  this.in.read();  final  short  nextByte  =  this.in.read();  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  byte  nextByte  =  this.in.read();  final  short  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	byte  nextByte  =  this.in.read();  final  short  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    short    nextByte    =    this.in.read();    	non-compiled	[CE]  possible  loss  of  precision	44	None	replace
510	[BUG]  [BUGGY]  final  byte  nextByte  =  in.read();  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  in.read();	  final    int    nextByte    =    in.read();    Final    int    nextByte    =    in.read();    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
511	[BUG]  [BUGGY]  final  double  nextByte  =  in.read();  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  double  nextByte  =  in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  double  nextByte  =  in.read();	  final    int    nextByte    =    in.read();    Final    int    nextByte    =    in.read();    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
512	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(byteOrder.read());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(byteOrder.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(byteOrder.read());	  final    long    nextByte    =    byteOrder.read();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
513	[BUG]  [BUGGY]  final  long  nextByte  =  byteOrder.read(bits);  [CE]  cannot  find  symbol  bits  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  byteOrder.read(bits);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  byteOrder.read(bits);	  final    long    nextByte    =    byteOrder.read();    	non-compiled	[CE]  cannot  find  symbol  bits	7	None	replace
514	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize  +  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	final  long  nextByte  =  readBits(bitsCachedSize  +  count);	  final    long    nextByte    =    readBits(bitsCachedSize);    timeout    	compilable	  [FE]  StackOverflowError  	58	12	replace
515	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize  +  count);  [FE]  StackOverflowError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize  +  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize  +  count);	  final    long    nextByte    =    readBits(bitsCachedSize);    timeout    	compilable	  [FE]  StackOverflowError  	58	12	replace
516	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  0;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  0;	  int    nextByte    =    bitsCachedSize;    	compilable	  [FE]  AssertionError  	46	12	replace
517	[BUG]  [BUGGY]  int  nextByte  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  0;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  0;	  int    nextByte    =    bitsCachedSize;    	compilable	  [FE]  AssertionError  	46	12	replace
518	[BUG]  [BUGGY]  int  nextByte  =(bitsCachedSize  <  <  8)?  bitsCachedSize  :  count;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(bitsCachedSize  <  <  8)?  bitsCachedSize  :  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =(bitsCachedSize  <  <  8)?  bitsCachedSize  :  count;	  int    nextByte    =    bitsCachedSize;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
519	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  0;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  0;	  int    nextByte    =    bitsCachedSize;    	compilable	  [FE]  AssertionError  	46	12	replace
520	[BUG]  [BUGGY]  int  nextByte  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  0;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  0;	  int    nextByte    =    bitsCachedSize;    	compilable	  [FE]  AssertionError  	46	12	replace
521	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bits);  [CE]  cannot  find  symbol  bits  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bits);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bits);	  final    long    nextByte    =    in.read(bytesCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bits	17	None	replace
522	[BUG]  [BUGGY]  final  long  nextByte  =  Integer.read(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  Integer.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  Integer.read(bitsCachedSize);	  final    long    nextByte    =    in.read(bytesCachedSize);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
523	[BUG]  [BUGGY]  byte  nextByte  =  in.read();  final  int  nextByte  =  as.read();  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  byte  nextByte  =  in.read();  final  int  nextByte  =  as.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	byte  nextByte  =  in.read();  final  int  nextByte  =  as.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    as.read();    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
524	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize  +  count);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize  +  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  readInt(bitsCachedSize  +  count);	  InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
525	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize  -  count);  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize  -  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  readInt(bitsCachedSize  -  count);	  InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
526	[BUG]  [BUGGY]  final  long  nextByte  =  Bits.read(bitsCachedSize);  [CE]  cannot  find  symbol  Bits  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  Bits.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  Bits.read(bitsCachedSize);	  final    long    nextByte    =    bytesCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  Bits	8	None	replace
527	[BUG]  [BUGGY]  final  short  nextByte  =  bitsCachedSize.read();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  short  nextByte  =  bitsCachedSize.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  short  nextByte  =  bitsCachedSize.read();	  final    long    nextByte    =    bytesCachedSize.read();    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
528	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.NAME,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  NAME  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.NAME,  MAXIMUM_CACHE_SIZE);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.NAME,  MAXIMUM_CACHE_SIZE);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.NAME);    	non-compiled	[CE]  cannot  find  symbol  NAME	86	None	replace
529	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  Integer  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	Integer  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    int    nextByte    =    this.in.read();    	compilable	  [FE]  AssertionError  	42	2	replace
530	[BUG]  [BUGGY]  Integer  nextByte  =  this.in.read();  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  Integer  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	Integer  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    final    int    nextByte    =    this.in.read();    	compilable	  [FE]  AssertionError  	42	2	replace
531	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(b  bits);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(b  bits);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize.read(b  bits);	  final    long    nextByte    =    this.bitsCachedSize.read(bits);    	non-compiled	[CE]  ')'  expected	33	None	replace
532	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  int  cannot  be  dereferenced	82	None	replace
533	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	4	None	replace
534	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read(bitsCachedSize  -  count);  [CE]  no  suitable  method  found  for  read(int)  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  this.in.read(bitsCachedSize  -  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read(bitsCachedSize  -  count);	  final    int    nextByte    =    this.in.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	3	None	replace
535	[BUG]  [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  }	  final    long    nextByte    =    this.in.read();    final    int    nextByte    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
536	[BUG]  [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    long    nextByte    =    this.in.read();    final    int    nextByte    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
537	[BUG]  [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  int  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  int  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(bitsCachedSize  <  =  count)  {  final  int  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  }	  final    long    nextByte    =    this.in.read();    final    int    nextByte    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
538	[BUG]  [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  }  else  {  return  bitsCachedSize  +  1;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  }  else  {  return  bitsCachedSize  +  1;  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  }  else  {  return  bitsCachedSize  +  1;  }	  final    long    nextByte    =    this.in.read();    final    int    nextByte    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
539	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_NUMBER);  [CE]  cannot  find  symbol  VALUE_NUMBER  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_NUMBER);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_NUMBER);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.VALUE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  VALUE_NUMBER	83	None	replace
540	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_BYTE);  [CE]  cannot  find  symbol  VALUE_BYTE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_BYTE);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_BYTE);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.VALUE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  VALUE_BYTE	83	None	replace
541	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER_ENDIAN,  count);  [CE]  cannot  find  symbol  CENTER_ENDIAN  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER_ENDIAN,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER_ENDIAN,  count);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.CENTER_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  CENTER_ENDIAN	84	None	replace
542	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  readBits(bitsSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  final  long  nextByte  =  readBits(bitsSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    readBits(bitsCachedSize);    final  long  nextByte  =  readBits(bitsSize);	  timeout    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	57	None	add
543	[BUG]  [BUGGY]  final  long  nextByte  =  inputStream.read(bits,  count);  [CE]  cannot  find  symbol  bits  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  inputStream.read(bits,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  inputStream.read(bits,  count);	  final    long    nextByte    =    in.read(bits,    count);    	non-compiled	[CE]  cannot  find  symbol  bits	18	None	replace
544	[BUG]  [BUGGY]  final  long  nextByte  =  inputStream.read(bitsCachedSize,  bitsCachedSize,  count);  [CE]  cannot  find  symbol  inputStream  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  inputStream.read(bitsCachedSize,  bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  inputStream.read(bitsCachedSize,  bitsCachedSize,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    bitsOut,    count);    	non-compiled	[CE]  cannot  find  symbol  inputStream	38	None	replace
545	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  InteByte  nextByte  =  bitsCachedSize  -  count;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  InteByte  nextByte  =  bitsCachedSize  -  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    -    count;    InteByte  nextByte  =  bitsCachedSize  -  count;	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
546	[BUG]  [BUGGY]  final  long  nextByte  =  input.read();  [CE]  cannot  find  symbol  input  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  input.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  input.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    input.read();    	non-compiled	[CE]  cannot  find  symbol  input	73	None	replace
547	[BUG]  [BUGGY]  final  long  nextByte  =  this.byteOrder.read();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.byteOrder.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.byteOrder.read();	  final    long    nextByte    =    byteOrder.read();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
548	[BUG]  [BUGGY]  final  long  nextByte  =  readByte(byteOrder.read());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readByte(byteOrder.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readByte(byteOrder.read());	  final    long    nextByte    =    byteOrder.read();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
549	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bytesCachedSize,  bitsCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(bytesCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bytesCachedSize,  bitsCachedSize);	  final    long    nextByte    =    readBits(count,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	9	None	replace
550	[BUG]  [BUGGY]  final  long  nextByte  =  in.read();  final  int  nextByte  =  as.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read();  final  int  nextByte  =  as.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read();  final  int  nextByte  =  as.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    as.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	25	None	replace
551	[BUG]  [BUGGY]  byte  nextByte  =  this.in.read();  final  long  nextByte  =  that.in.read();  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  byte  nextByte  =  this.in.read();  final  long  nextByte  =  that.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	byte  nextByte  =  this.in.read();  final  long  nextByte  =  that.in.read();	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    that.in.read();    	non-compiled	[CE]  possible  loss  of  precision	76	None	replace
552	[BUG]  [BUGGY]  in.read(bitsCachedSize,  1,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  in.read(bitsCachedSize,  1,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bitsCachedSize,  1,  count);	  in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	50	None	replace
553	[BUG]  [BUGGY]  final  long  nextByte  =  inputStream.read(bitsCachedSize);  [CE]  cannot  find  symbol  inputStream  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  inputStream.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  inputStream.read(bitsCachedSize);	  final    long    nextByte    =    in.read(bytesCachedSize);    	non-compiled	[CE]  cannot  find  symbol  inputStream	17	None	replace
554	[BUG]  [BUGGY]  final  long  nextByte  =  bitsOut.readShort(bitsCachedSize);  [CE]  cannot  find  symbol  bitsOut  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsOut.readShort(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsOut.readShort(bitsCachedSize);	  final    long    nextByte    =    this.in.readShort(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	6	None	replace
555	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize,  count.longValue();  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize,  count.longValue();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize,  count.longValue();	  int    nextByte    =    bitsCachedSize.longValue();    	non-compiled	[CE]  ';'  expected	54	None	replace
556	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(in);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(in);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(in);	  final    long    nextByte    =    bitsCachedSize.read(bitsOut);    	non-compiled	[CE]  int  cannot  be  dereferenced	28	None	replace
557	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bites);  [CE]  cannot  find  symbol  bites  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bites);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(bites);	  final    long    nextByte    =    bitsCachedSize.read(bitsOut);    	non-compiled	[CE]  cannot  find  symbol  bites	28	None	replace
558	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bbits);  [CE]  cannot  find  symbol  bbits  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bbits);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(bbits);	  final    long    nextByte    =    bitsCachedSize.read(bytes);    	non-compiled	[CE]  cannot  find  symbol  bbits	71	None	replace
559	[BUG]  [BUGGY]  long  nextByte  =  in.read();  final  int  nextByte  =  InputStream.read(bitsCachedSize);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  in.read();  final  int  nextByte  =  InputStream.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  in.read();  final  int  nextByte  =  InputStream.read(bitsCachedSize);	  final    int    nextByte    =    in.read();    final    int    nextByte    =    InputStream.read(in);    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	74	None	replace
560	[BUG]  [BUGGY]  final  short  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  short  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  short  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	36	None	replace
561	[BUG]  [BUGGY]  final  double  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  double  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  double  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	36	None	replace
562	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
563	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  return  bitsCached  +  1;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  return  bitsCached  +  1;  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  return  bitsCached  +  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
564	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  return  bitsCached.length;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  return  bitsCached.length;  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  return  bitsCached.length;  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
565	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  return  bitsCached[0];  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  return  bitsCached[0];  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  return  bitsCached[0];  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
566	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  long  nextByte  =  bitsCachedSize;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  long  nextByte  =  bitsCachedSize;  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  long  nextByte  =  bitsCachedSize;  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
567	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  return  bitsCached;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize;  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  return  bitsCached;  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize;    if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  nextByte  =  bitsCachedSize;  }  else  {  return  bitsCached;  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
568	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  bitsCachedSize  +  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	long  nextByte  =  bitsCachedSize  +  count;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
569	[BUG]  [BUGGY]  long  nextByte  =  bitsCachedSize  +  count;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  bitsCachedSize  +  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  bitsCachedSize  +  count;	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
570	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(bitsCachedSize  +  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =(bitsCachedSize  +  count);	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
571	[BUG]  [BUGGY]  int  nextByte  =(bitsCachedSize  +  count);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(bitsCachedSize  +  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =(bitsCachedSize  +  count);	  int    nextByte    =    bitsCachedSize    +    count;    	compilable	  [FE]  AssertionError  	53	12	replace
572	[BUG]  [BUGGY]  final  long  nextByte  =  in.readBits(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.readBits(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.readBits(bitsCachedSize);	  final    long    nextByte    =    readBits(bitsCachedSize);    timeout    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
573	[BUG]  [BUGGY]  long  nextByte  =  read(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  long  nextByte  =  read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  read(bitsCachedSize);	  int    nextByte    =    read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
574	[BUG]  [BUGGY]  Integer  nextByte  =  readInt(count);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  Integer  nextByte  =  readInt(count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	Integer  nextByte  =  readInt(count);	  int    nextByte    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
575	[BUG]  [BUGGY]  final  long  nextByte  =  inputStream.read(bitsCachedSize,  bitsCachedSize);  [CE]  cannot  find  symbol  inputStream  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  inputStream.read(bitsCachedSize,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  inputStream.read(bitsCachedSize,  bitsCachedSize);	  final    long    nextByte    =    in.read(bytesCachedSize,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  inputStream	20	None	replace
576	[BUG]  [BUGGY]  final  Byte  nextByte  =  in.read(bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  Byte  nextByte  =  in.read(bitsCachedSize,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  Byte  nextByte  =  in.read(bitsCachedSize,  count);	  final    byte    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	21	None	replace
577	[BUG]  [BUGGY]  Final  long  nextByte  =  this.in.read();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  Final  long  nextByte  =  this.in.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	Final  long  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    Final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  not  a  statement	43	None	replace
578	[BUG]  [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  }	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
579	[BUG]  [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
580	[BUG]  [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  }  else  {  return  Long.parseLong(this.bitsCachedSize);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  }  else  {  return  Long.parseLong(this.bitsCachedSize);  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  }  else  {  return  Long.parseLong(this.bitsCachedSize);  }	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
581	[BUG]  [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  }  else  {  return  bitsCachedSize  +  1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  }  else  {  return  bitsCachedSize  +  1;  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(bitsCachedSize  <  =  count)  {  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  }  else  {  return  bitsCachedSize  +  1;  }	  final    long    nextByte    =    this.in.read();    final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
582	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.NAME_ENDIAN);  [CE]  cannot  find  symbol  NAME_ENDIAN  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.NAME_ENDIAN);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.NAME_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read(ByteOrder.NAME);    	non-compiled	[CE]  cannot  find  symbol  NAME_ENDIAN	86	None	replace
583	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count  -  1,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int,int)  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count  -  1,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count  -  1,  bitsCachedSize);	  final    long    nextByte    =    this.in.read(bitsCachedSize,    0,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int,int)	75	None	replace
584	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(in);  [CE]  int  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(in);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read(in);	  final    int    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  int  cannot  be  dereferenced	13	None	replace
585	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(in,  count);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsCachedSize.read(in,  count);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read(in,  count);	  final    int    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  int  cannot  be  dereferenced	13	None	replace
586	[BUG]  [BUGGY]  final  int  nextByte  =  bitsout.read();  [CE]  cannot  find  symbol  bitsout  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  bitsout.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsout.read();	  final    int    nextByte    =    this.bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bitsout	14	None	replace
587	[BUG]  [BUGGY]  final  long  nextByte  =  bitsOut.readUTF();  [CE]  cannot  find  symbol  bitsOut  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsOut.readUTF();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsOut.readUTF();	  final    long    nextByte    =    this.in.readUTF();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	5	None	replace
588	[BUG]  [BUGGY]  final  long  nextByte  =  INVALID_BYTE_SIZE.readUTF();  [CE]  cannot  find  symbol  INVALID_BYTE_SIZE  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  INVALID_BYTE_SIZE.readUTF();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  INVALID_BYTE_SIZE.readUTF();	  final    long    nextByte    =    this.in.readUTF();    	non-compiled	[CE]  cannot  find  symbol  INVALID_BYTE_SIZE	5	None	replace
589	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  InteByte  nextByte  =  bitsCachedSize  +  count;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  InteByte  nextByte  =  bitsCachedSize  +  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int    nextByte    =    bitsCachedSize    +    count;    InteByte  nextByte  =  bitsCachedSize  +  count;	  	non-compiled	[CE]  cannot  find  symbol	52	None	add
590	[BUG]  [BUGGY]  if(in.read()  >  0)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(in.read()  >  0)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(in.read()  >  0)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read());    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	26	None	replace
591	[BUG]  [BUGGY]  if(in.read()  ==  nextByte)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  [CE]  cannot  find  symbol  nextByte  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(in.read()  ==  nextByte)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(in.read()  ==  nextByte)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read());    	non-compiled	[CE]  cannot  find  symbol  nextByte	26	None	replace
592	[BUG]  [BUGGY]  if(in.read()  ==  nextByte)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  else  {  return  bitsOut.toByte();  }  [CE]  cannot  find  symbol  nextByte  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(in.read()  ==  nextByte)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  else  {  return  bitsOut.toByte();  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(in.read()  ==  nextByte)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  else  {  return  bitsOut.toByte();  }	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read());    	non-compiled	[CE]  cannot  find  symbol  nextByte	26	None	replace
593	[BUG]  [BUGGY]  if(in.read()  >  0)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  else  {  return  bitsOut.toByte();  }  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(in.read()  >  0)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  else  {  return  bitsOut.toByte();  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(in.read()  >  0)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  else  {  return  bitsOut.toByte();  }	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read());    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	26	None	replace
594	[BUG]  [BUGGY]  if(in.read()  ==  nextByte)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  else  {  return  bitsCachedSize  +  1;  }  [CE]  cannot  find  symbol  nextByte  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(in.read()  ==  nextByte)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  else  {  return  bitsCachedSize  +  1;  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(in.read()  ==  nextByte)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  else  {  return  bitsCachedSize  +  1;  }	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read());    	non-compiled	[CE]  cannot  find  symbol  nextByte	26	None	replace
595	[BUG]  [BUGGY]  if(in.read()  >  0)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  if(in.read()  >  0)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	if(in.read()  >  0)  {  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    int    nextByte    =    in.read();    final    int    nextByte    =    in.read());    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	26	None	replace
596	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  this.bytesCachedSize.read());  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize,  this.bytesCachedSize.read());  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(this.bitsCachedSize,  this.bytesCachedSize.read());	  final    long    nextByte    =    readBits(this.bitsCachedSize.read());    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	65	None	replace
597	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  MISSING_BYTE);  [CE]  cannot  find  symbol  MISSING_BYTE  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  MISSING_BYTE);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count,  MISSING_BYTE);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  MISSING_BYTE	37	None	replace
598	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  MASKS_NAME);  [CE]  cannot  find  symbol  MASKS_NAME  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  MASKS_NAME);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count,  MASKS_NAME);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  MASKS_NAME	37	None	replace
599	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  MISSING_BYTE_SIZE);  [CE]  cannot  find  symbol  MISSING_BYTE_SIZE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  MISSING_BYTE_SIZE);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count,  MISSING_BYTE_SIZE);	  final    long    nextByte    =    in.read(bitsCachedSize,    count,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  MISSING_BYTE_SIZE	37	None	replace
600	[BUG]  [BUGGY]  final  int  nextByte  =  readInt()  -  bitsCachedSize;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  readInt()  -  bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt()  -  bitsCachedSize;	  final    int    nextByte    =    readInt();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
601	[BUG]  [BUGGY]  InputStream  in  =  readInt(),  bitsCachedSize;  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  InputStream  in  =  readInt(),  bitsCachedSize;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  readInt(),  bitsCachedSize;	  InputStream    in    =    readInt();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
602	[BUG]  [BUGGY]  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  InputStream  in  =  getInputStream();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  getInputStream();	  InputStream    in    =    readInt();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
603	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  final    int    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	35	None	replace
604	[BUG]  [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    MAXIMUM_CACHE_SIZE,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	39	None	replace
605	[BUG]  [BUGGY]  int  nextByte  =(byteOrder  <  <  8)?  bitsCachedSize  :  count;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  int  nextByte  =(byteOrder  <  <  8)?  bitsCachedSize  :  count;  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =(byteOrder  <  <  8)?  bitsCachedSize  :  count;	  int    nextByte    =    bitsCachedSize;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
606	[BUG]  [BUGGY]  final  long  nextByte  =  bitsOut.read(this.bitsCachedSize);  [CE]  cannot  find  symbol  bitsOut  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsOut.read(this.bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsOut.read(this.bitsCachedSize);	  final    long    nextByte    =    byteOrder.read(this.bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	66	None	replace
607	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bitsCachedSize);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bitsCachedSize);  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(bitsCachedSize);	  final    long    nextByte    =    bitsCachedSize.read(count);    	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	replace
608	[BUG]  [BUGGY]  final  long  nextByte  =  in.read();  final  int  nextByte  =  out.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  in.read();  final  int  nextByte  =  out.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read();  final  int  nextByte  =  out.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    out.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	24	None	replace
609	[BUG]  [BUGGY]  byte  nextByte  =  in.read();  final  int  nextByte  =  out.read();  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  byte  nextByte  =  in.read();  final  int  nextByte  =  out.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	byte  nextByte  =  in.read();  final  int  nextByte  =  out.read();	  final    int    nextByte    =    in.read();    final    int    nextByte    =    out.read();    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
610	[BUG]  [BUGGY]  final  long  nextByte  =  this.bits.read();  [CE]  cannot  find  symbol  bits  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {      [BUGGY]  final  long  nextByte  =  this.bits.read();  [BUGGY]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bits.read();	  final    long    nextByte    =    bits.read();    	non-compiled	[CE]  cannot  find  symbol  bits	59	None	replace
