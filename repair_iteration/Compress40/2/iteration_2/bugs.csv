bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int)  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize);	  final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	6	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  this.in.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	final  int  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    	compilable	  [FE]  AssertionError  	6	2	replace
3	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  this.in.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read();	  final    long    nextByte    =    this.in.read();    	compilable	  [FE]  AssertionError  	6	2	replace
4	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  count);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  count);	  final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	6	None	replace
5	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.readUTF();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.in.readUTF();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.readUTF();	  final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
6	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.readShort(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.in.readShort(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.readShort(bitsCachedSize);	  final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
7	[BUG]  [BUGGY]  final  long  nextByte  =  byteOrder.read();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  byteOrder.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  byteOrder.read();	  final    long    nextByte    =    bitsOut.read();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
8	[BUG]  [BUGGY]  final  long  nextByte  =  bytesCachedSize.read();  [CE]  cannot  find  symbol  bytesCachedSize  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  bytesCachedSize.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bytesCachedSize.read();	  final    long    nextByte    =    bitsOut.read();    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	1	None	replace
9	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(count,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  readBits(count,  bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(count,  bitsCachedSize);	  final    long    nextByte    =    bitsOut.read();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	1	None	replace
10	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  readBits(count);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	final  long  nextByte  =  readBits(count);	  final    long    nextByte    =    bitsOut.read();    	compilable	  [FE]  StackOverflowError  	1	12	replace
11	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(count);  [FE]  StackOverflowError  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  readBits(count);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(count);	  final    long    nextByte    =    bitsOut.read();    	compilable	  [FE]  StackOverflowError  	1	12	replace
12	[BUG]  [BUGGY]  final  int  nextByte  =  bitsOut.read();  [CE]  cannot  find  symbol  bitsOut  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  bitsOut.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsOut.read();	  final    int    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	3	None	replace
13	[BUG]  [BUGGY]  final  int  nextByte  =  bitsCachedSize.read();  [CE]  int  cannot  be  dereferenced  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  bitsCachedSize.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  bitsCachedSize.read();	  final    int    nextByte    =    in.read();    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
14	[BUG]  [BUGGY]  final  int  nextByte  =  this.bitsCachedSize.read();  [CE]  int  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  this.bitsCachedSize.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.bitsCachedSize.read();	  final    int    nextByte    =    in.read();    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
15	[BUG]  [BUGGY]  final  int  nextByte  =  readInt();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  readInt();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt();	  final    int    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
16	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int)  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	7	None	replace
17	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  in.read(bytesCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bytesCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	7	None	replace
18	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bits,  count);  [CE]  cannot  find  symbol  bits  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  in.read(bits,  count);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bits,  count);	  final    long    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bits	7	None	replace
19	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	7	None	replace
20	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bytesCachedSize,  bitsCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  in.read(bytesCachedSize,  bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bytesCachedSize,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	7	None	replace
21	[BUG]  [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int)  [FE]                          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  in.read(bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	7	None	replace
22	[BUG]  [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    int    nextByte    =    in.read();    final  int  nextByte  =  in.read();	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	2	None	add
23	[BUG]  [BUGGY]  final  int  nextByte  =  in.read();  Final  int  nextByte  =  in.read();  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  in.read();  Final  int  nextByte  =  in.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    int    nextByte    =    in.read();    Final  int  nextByte  =  in.read();	  	non-compiled	[CE]  not  a  statement	2	None	add
24	[BUG]  [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  out.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  out.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    int    nextByte    =    in.read();    final  int  nextByte  =  out.read();	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	2	None	add
25	[BUG]  [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  as.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  as.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    int    nextByte    =    in.read();    final  int  nextByte  =  as.read();	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	2	None	add
26	[BUG]  [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  in.read());  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    int    nextByte    =    in.read();    final  int  nextByte  =  in.read());	  	non-compiled	[CE]  ';'  expected	2	None	add
27	[BUG]  [BUGGY]  final  int  nextByte  =  inputStream.read();  [CE]  cannot  find  symbol  inputStream  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  inputStream.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  inputStream.read();	  final    long    nextByte    =    inputStream.read();    	non-compiled	[CE]  cannot  find  symbol  inputStream	11	None	replace
28	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bitsOut);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(bitsOut);	  final    long    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	4	None	replace
29	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bytesOut);  [CE]  cannot  find  symbol  bytesOut  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bytesOut);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(bytesOut);	  final    long    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bytesOut	4	None	replace
30	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(count);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(count);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(count);	  final    long    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
31	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bits);  [CE]  cannot  find  symbol  bits  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bits);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(bits);	  final    long    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bits	4	None	replace
32	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize.read());  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize.read());  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize.read());	  final    long    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
33	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(bits);  [CE]  cannot  find  symbol  bits  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(bits);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize.read(bits);	  final    long    nextByte    =    this.bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bits	8	None	replace
34	[BUG]  [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.bitsCachedSize.read(bitsOut);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.bitsCachedSize.read(bitsOut);	  final    long    nextByte    =    this.bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	8	None	replace
35	[BUG]  [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  in.read(bitsCachedSize,  count);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  in.read(bitsCachedSize,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	10	None	replace
36	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count,  bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	10	None	replace
37	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count,  bitsOut);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count,  bitsOut);	  final    long    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	10	None	replace
38	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  bitsOut,  count);  [CE]  cannot  find  symbol  bitsOut  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  bitsOut,  count);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  bitsOut,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  bitsOut	10	None	replace
39	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  count);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	10	None	replace
40	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  0,  count);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  0,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	10	None	replace
41	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.in.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    this.in.read();    final  long  nextByte  =  this.in.read();	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	5	None	add
42	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.in.read();  final  int  nextByte  =  this.in.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    this.in.read();    final  int  nextByte  =  this.in.read();	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	5	None	add
43	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read();  Final  long  nextByte  =  this.in.read();  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.in.read();  Final  long  nextByte  =  this.in.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    this.in.read();    Final  long  nextByte  =  this.in.read();	  	non-compiled	[CE]  not  a  statement	5	None	add
44	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read();  final  short  nextByte  =  this.in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.in.read();  final  short  nextByte  =  this.in.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    this.in.read();    final  short  nextByte  =  this.in.read();	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	5	None	add
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  int  nextByte  =  bitsCachedSize;  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  bitsCachedSize;	      	compilable	  [FE]  AssertionError  	9	12	replace
46	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize;  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  int  nextByte  =  bitsCachedSize;  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize;	      	compilable	  [FE]  AssertionError  	9	12	replace
47	[BUG]  [BUGGY]  int  nextByte  =  readInt(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  int  nextByte  =  readInt(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  readInt(bitsCachedSize);	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  bitsCachedSize  -  count;	      	compilable	  [FE]  AssertionError  	9	12	replace
49	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  [FE]  AssertionError  [FE]                        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  int  nextByte  =  bitsCachedSize  -  count;  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize  -  count;	      	compilable	  [FE]  AssertionError  	9	12	replace
50	[BUG]  [BUGGY]  in.read(bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  in.read(bitsCachedSize,  count);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bitsCachedSize,  count);	      	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	9	None	replace
51	[BUG]  [BUGGY]  int  nextByte  =  read(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  int  nextByte  =  read(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  read(bitsCachedSize);	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  bitsCachedSize  +  count;	      	compilable	  [FE]  AssertionError  	9	12	replace
53	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  [FE]  AssertionError  [FE]                              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  int  nextByte  =  bitsCachedSize  +  count;  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize  +  count;	      	compilable	  [FE]  AssertionError  	9	12	replace
54	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize.longValue();  [CE]  int  cannot  be  dereferenced  [FE]                                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  int  nextByte  =  bitsCachedSize.longValue();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize.longValue();	      	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
55	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.out.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  this.out.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    this.in.read();    final  long  nextByte  =  this.out.read();	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	5	None	add
56	[BUG]  [BUGGY]  final  long  nextByte  =  readBits.read();  [CE]  cannot  find  symbol  readBits  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  readBits.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits.read();	  final    long    nextByte    =    bitsOut.read();    	non-compiled	[CE]  cannot  find  symbol  readBits	1	None	replace
57	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	final  long  nextByte  =  readBits(bitsCachedSize);	  final    long    nextByte    =    bitsOut.read();    	compilable	timeout	1	1	replace
58	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  timeout  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize);	  final    long    nextByte    =    bitsOut.read();    	compilable	timeout	1	1	replace
59	[BUG]  [BUGGY]  final  long  nextByte  =  bits.read();  [CE]  cannot  find  symbol  bits  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  bits.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bits.read();	  final    long    nextByte    =    bitsOut.read();    	non-compiled	[CE]  cannot  find  symbol  bits	1	None	replace
60	[BUG]  [BUGGY]  final  long  nextByte  =  readStream.read();  [CE]  cannot  find  symbol  readStream  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  readStream.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readStream.read();	  final    long    nextByte    =    inputStream.read();    	non-compiled	[CE]  cannot  find  symbol  readStream	11	None	replace
61	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize  -  1);  [CE]  no  suitable  method  found  for  read(int)  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize  -  1);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize  -  1);	  final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	6	None	replace
62	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.readFully(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.in.readFully(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.readFully(bitsCachedSize);	  final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
63	[BUG]  [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  count);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  byte  nextByte  =  in.read(bitsCachedSize,  count);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  byte  nextByte  =  in.read(bitsCachedSize,  count);	  final    long    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	10	None	replace
64	[BUG]  [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count  -  1);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  in.read(bitsCachedSize,  count  -  1);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  in.read(bitsCachedSize,  count  -  1);	  final    long    nextByte    =    in.read(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	10	None	replace
65	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize.read());  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  readBits(this.bitsCachedSize.read());  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(this.bitsCachedSize.read());	  final    long    nextByte    =    this.bitsCachedSize.read();    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
66	[BUG]  [BUGGY]  final  long  nextByte  =  byteOrder.read(this.bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  byteOrder.read(this.bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  byteOrder.read(this.bitsCachedSize);	  final    long    nextByte    =    this.bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	int  nextByte  =  bitsCachedSize  -  1;	      	compilable	  [FE]  AssertionError  	9	12	replace
68	[BUG]  [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  int  nextByte  =  bitsCachedSize  -  1;  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	int  nextByte  =  bitsCachedSize  -  1;	      	compilable	  [FE]  AssertionError  	9	12	replace
69	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  InputStream  in  =  readInt(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  readInt(bitsCachedSize);	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
70	[BUG]  [BUGGY]  InputStream  in  =  readInt();  [CE]  cannot  find  symbol  [FE]                        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  InputStream  in  =  readInt();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	InputStream  in  =  readInt();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
71	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bytes);  [CE]  cannot  find  symbol  bytes  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(bytes);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(bytes);	  final    long    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bytes	4	None	replace
72	[BUG]  [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  InputStream.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  InputStream.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    int    nextByte    =    in.read();    final  int  nextByte  =  InputStream.read();	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	2	None	add
73	[BUG]  [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  input.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  input.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    int    nextByte    =    in.read();    final  int  nextByte  =  input.read();	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	2	None	add
74	[BUG]  [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  InputStream.read(in);  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  in.read();  final  int  nextByte  =  InputStream.read(in);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    int    nextByte    =    in.read();    final  int  nextByte  =  InputStream.read(in);	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	2	None	add
75	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count);  [CE]  no  suitable  method  found  for  read(int,int,int)  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  this.in.read(bitsCachedSize,  0,  count);	  final    long    nextByte    =    this.in.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int,int)	6	None	replace
76	[BUG]  [BUGGY]  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  that.in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  this.in.read();  final  long  nextByte  =  that.in.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final    long    nextByte    =    this.in.read();    final  long  nextByte  =  that.in.read();	  	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	5	None	add
77	[BUG]  [BUGGY]  final  short  nextByte  =  in.read(bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int)  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  short  nextByte  =  in.read(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  short  nextByte  =  in.read(bitsCachedSize);	  final    long    nextByte    =    in.read(bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	7	None	replace
78	[BUG]  [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  bitsOut.read());  [CE]  cannot  find  symbol  bitsOut  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  readBits(bitsCachedSize,  bitsOut.read());  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  readBits(bitsCachedSize,  bitsOut.read());	  final    long    nextByte    =    bitsOut.read();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	1	None	replace
79	[BUG]  [BUGGY]  final  int  nextByte  =  readInt(in,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  readInt(in,  bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  readInt(in,  bitsCachedSize);	  final    int    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
80	[BUG]  [BUGGY]  final  int  nextByte  =  this.in.read(bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int)  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  int  nextByte  =  this.in.read(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  int  nextByte  =  this.in.read(bitsCachedSize);	  final    int    nextByte    =    in.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	3	None	replace
81	[BUG]  [BUGGY]  final  long  nextByte  =  bitscachedSize.read();  [CE]  cannot  find  symbol  bitscachedSize  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  bitscachedSize.read();  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitscachedSize.read();	  final    long    nextByte    =    this.bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  bitscachedSize	8	None	replace
82	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.LITTLE_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
83	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_ENDIAN);  [CE]  cannot  find  symbol  VALUE_ENDIAN  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_ENDIAN);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.VALUE_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  VALUE_ENDIAN	4	None	replace
84	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER_ENDIAN);  [CE]  cannot  find  symbol  CENTER_ENDIAN  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER_ENDIAN);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER_ENDIAN);	  final    long    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  CENTER_ENDIAN	4	None	replace
85	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER);  [CE]  cannot  find  symbol  CENTER  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.CENTER);	  final    long    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  CENTER	4	None	replace
86	[BUG]  [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.NAME);  [CE]  cannot  find  symbol  NAME  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  final  long  nextByte  =  bitsCachedSize.read(ByteOrder.NAME);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	final  long  nextByte  =  bitsCachedSize.read(ByteOrder.NAME);	  final    long    nextByte    =    bitsCachedSize.read();    	non-compiled	[CE]  cannot  find  symbol  NAME	4	None	replace
87	[BUG]  [BUGGY]  in.read(bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int)  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  in.read(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	in.read(bitsCachedSize);	      	non-compiled	[CE]  no  suitable  method  found  for  read(int)	9	None	replace
88	[BUG]  [BUGGY]  timeout  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	add	long  nextByte  =  readBits(bitsCachedSize);	      	compilable	timeout	9	1	replace
89	[BUG]  [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  timeout  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {    [BUGGY]  long  nextByte  =  readBits(bitsCachedSize);  [BUGGY]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	86	86	2	replace	long  nextByte  =  readBits(bitsCachedSize);	      	compilable	timeout	9	1	replace
