bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	14	None	add
2	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	14	None	add
3	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	14	None	add
4	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	14	None	add
5	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  in.skipChildren();  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
6	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	14	None	add
7	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	14	None	add
8	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	14	None	add
9	[BUG]  [BUGGY]  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	3	None	add
10	[BUG]  [BUGGY]  return  bitsOut  -  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	3	None	add
11	[BUG]  [BUGGY]  return  bitsOut  -  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	3	None	add
12	[BUG]  [BUGGY]  return  bitsOut  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	3	None	add
13	[BUG]  [BUGGY]  return  bitsOut  -  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	3	None	add
14	[BUG]  [BUGGY]  return  bitsOut  -  1;  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  >  expected  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  	non-compiled	[CE]  >  expected	3	None	add
15	[BUG]  [BUGGY]  return  bitsOut  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	3	None	add
16	[BUG]  [BUGGY]  return  bitsOut  -  1;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  in.skipChildren();  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[0];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[0];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  AssertionError  	10	12	replace
18	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[0];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[0];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  AssertionError  	10	12	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count  -  1];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  AssertionError  	10	10	replace
20	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  -  1];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  AssertionError  	10	10	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  AssertionError  	10	2	replace
22	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  AssertionError  	10	2	replace
23	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count  +  1];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	replace
24	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  +  1];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MASKS[count];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  AssertionError  	10	12	replace
26	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MASKS[count];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  AssertionError  	10	12	replace
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[1];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[1];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  AssertionError  	10	12	replace
28	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[1];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[1];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  AssertionError  	10	12	replace
29	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	16	None	replace
30	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE));  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	16	None	replace
31	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE));  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	16	None	replace
32	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	16	None	replace
33	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count));  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count));  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  count));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	16	None	replace
34	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE));  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	16	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	12	replace
36	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	12	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	11	replace
38	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	11	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	12	replace
40	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	12	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	12	replace
42	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	12	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	12	replace
44	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	12	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	12	replace
46	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	12	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  /  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	2	12	replace
48	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	2	12	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	2	12	replace
50	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	2	12	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	2	12	replace
52	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	2	12	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	2	12	replace
54	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	2	12	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  2;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  2;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	2	12	replace
56	[BUG]  [BUGGY]  return  bitsOut  *  2;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  2;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  2;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	2	12	replace
57	[BUG]  [BUGGY]  return  bitsOut  *  MASKS_SIZE;  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MASKS_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MASKS_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	2	None	replace
58	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	11	None	replace
59	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1]);  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut.write(MASKS[count  -  1]);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1]);	      	non-compiled	[CE]  long  cannot  be  dereferenced	11	None	replace
60	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut.write(MASKS[count],  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  long  cannot  be  dereferenced	11	None	replace
61	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE));  [CE]  ']'  expected  [FE]                          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE));  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE));	      	non-compiled	[CE]  ']'  expected	11	None	replace
62	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  0,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut.write(MASKS[count],  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  0,  MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  long  cannot  be  dereferenced	11	None	replace
63	[BUG]  [BUGGY]  bitsOut.write(MASKS[count]);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut.write(MASKS[count]);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count]);	      	non-compiled	[CE]  long  cannot  be  dereferenced	11	None	replace
64	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  +  1]);  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut.write(MASKS[count  +  1]);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  +  1]);	      	non-compiled	[CE]  long  cannot  be  dereferenced	11	None	replace
65	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	1	None	add
66	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	1	None	add
67	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	1	None	add
68	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
69	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	1	None	add
70	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	1	None	add
71	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	1	None	add
72	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	1	None	add
73	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
74	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
75	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
76	[BUG]  [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  <  4)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
77	[BUG]  [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
78	[BUG]  [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
79	[BUG]  [BUGGY]  return  bitsOut.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	17	None	replace
80	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  count);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  count);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  count);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	17	None	replace
81	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	17	None	replace
82	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	17	None	replace
83	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.read(byteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	17	None	replace
84	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  0,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	17	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS_SIZE;    	compilable	  [FE]  AssertionError  	7	11	replace
86	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS_SIZE;    	compilable	  [FE]  AssertionError  	7	11	replace
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS_SIZE;    	compilable	  [FE]  AssertionError  	7	12	replace
88	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS_SIZE;    	compilable	  [FE]  AssertionError  	7	12	replace
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS_SIZE;    	compilable	  [FE]  AssertionError  	7	11	replace
90	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS_SIZE;    	compilable	  [FE]  AssertionError  	7	11	replace
91	[BUG]  [BUGGY]  returns  bitsOut  &  MAXIMUM_CACHE_SIZE;  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  returns  bitsOut  &  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	returns  bitsOut  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS_SIZE;    	non-compiled	[CE]  ';'  expected	7	None	replace
92	[BUG]  [BUGGY]  return  bitsOut  /  MASKS_SIZE;  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]                      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  /  MASKS_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  MASKS_SIZE;	  return    bitsOut    &    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	7	None	replace
93	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE.length;  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE.length;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE.length;	  return    bitsOut    &    MASKS_SIZE;    	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	replace
94	[BUG]  [BUGGY]  return  bitsOut  &  MILLIS_SIZE;  [CE]  cannot  find  symbol  MILLIS_SIZE  [FE]                          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MILLIS_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MILLIS_SIZE;	  return    bitsOut    &    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MILLIS_SIZE	7	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
96	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
97	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	11	replace
98	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	11	replace
99	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
100	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
102	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	11	replace
104	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	11	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
106	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
107	[BUG]  [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	5	None	add
108	[BUG]  [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	5	None	add
109	[BUG]  [BUGGY]  return  this.bitsCachedSize;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	5	None	add
110	[BUG]  [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	5	None	add
111	[BUG]  [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	5	None	add
112	[BUG]  [BUGGY]  return  this.bitsCachedSize;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  in.skipChildren();  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
113	[BUG]  [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytes  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  bytes	5	None	add
114	[BUG]  [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  cannot  find  symbol  bytes  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  cannot  find  symbol  bytes	5	None	add
115	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	12	None	add
116	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	12	None	add
117	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	12	None	add
118	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
119	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	12	None	add
120	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	12	None	add
121	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	12	None	add
122	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	12	None	add
123	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  =  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
124	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray();    	non-compiled	[CE]  long  cannot  be  dereferenced	20	None	replace
125	[BUG]  [BUGGY]  return  nextByteOrder.toByteArray();  [CE]  cannot  find  symbol  nextByteOrder  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  nextByteOrder.toByteArray();  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  nextByteOrder.toByteArray();	  return    bitsOut.toByteArray();    	non-compiled	[CE]  cannot  find  symbol  nextByteOrder	20	None	replace
126	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  >  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.toByteArray()  &&  count  >  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray();    	non-compiled	[CE]  long  cannot  be  dereferenced	20	None	replace
127	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE);	  return    bitsOut.toByteArray();    	non-compiled	[CE]  ';'  expected	20	None	replace
128	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray();    	non-compiled	[CE]  long  cannot  be  dereferenced	20	None	replace
129	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
130	[BUG]  [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
131	[BUG]  [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
132	[BUG]  [BUGGY]  return  bitsOut  <  <  3?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  3?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  3?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
133	[BUG]  [BUGGY]  return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  >  expected  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  >  expected	19	None	replace
134	[BUG]  [BUGGY]  return  bitsOut  <  <  0?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  0?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  0?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
135	[BUG]  [BUGGY]  return  bitsOut  <  <  16?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  16?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  16?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
136	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
137	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
138	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
139	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
141	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
143	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
145	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
146	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
147	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
148	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
149	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
150	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1L;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  1L;	  return    bitsOut    -    1;    	compilable	  [FE]  AssertionError  	4	12	replace
151	[BUG]  [BUGGY]  return  bitsOut  -  1L;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1L;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1L;	  return    bitsOut    -    1;    	compilable	  [FE]  AssertionError  	4	12	replace
152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  2;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  2;	  return    bitsOut    -    1;    	compilable	  [FE]  AssertionError  	4	12	replace
153	[BUG]  [BUGGY]  return  bitsOut  -  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  2;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  2;	  return    bitsOut    -    1;    	compilable	  [FE]  AssertionError  	4	12	replace
154	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  /  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  /  1;	  return    bitsOut    -    1;    	compilable	  [FE]  AssertionError  	4	2	replace
155	[BUG]  [BUGGY]  return  bitsOut  /  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  /  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  1;	  return    bitsOut    -    1;    	compilable	  [FE]  AssertionError  	4	2	replace
156	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  +  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  +  1;	  return    bitsOut    -    1;    	compilable	  [FE]  AssertionError  	4	12	replace
157	[BUG]  [BUGGY]  return  bitsOut  +  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  +  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  +  1;	  return    bitsOut    -    1;    	compilable	  [FE]  AssertionError  	4	12	replace
158	[BUG]  [BUGGY]  return  bitsOut  <  <  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1;	  return    bitsOut    -    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
159	[BUG]  [BUGGY]  return  bitsOut  <  <  8?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  8?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  8?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    8?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
160	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	9	None	add
161	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	9	None	add
162	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	9	None	add
163	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	9	None	add
164	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	9	None	add
165	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	9	None	add
166	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	9	None	add
167	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	9	None	add
168	[BUG]  [BUGGY]  return  bitsOut  <  <  4  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  4  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
169	[BUG]  [BUGGY]  return  bitsOut  <  <  2  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  2  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
170	[BUG]  [BUGGY]  return  bitsOut  <  <  3  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  3  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  3  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
171	[BUG]  [BUGGY]  return  bitsOut  <  <  1  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  1  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
172	[BUG]  [BUGGY]  return  bitsOut  <  <  4  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  4  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
173	[BUG]  [BUGGY]  return  bitsOut  <  <  16  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  16  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  16  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
174	[BUG]  [BUGGY]  return  bitsOut.length  -  1;  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.length  -  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  1;	  return    bitsOut.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	8	None	replace
175	[BUG]  [BUGGY]  return  bitsOut.length  -  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.length  -  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  MAXIMUM_CACHE_SIZE;	  return    bitsOut.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	8	None	replace
176	[BUG]  [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	8	None	replace
177	[BUG]  [BUGGY]  return  bitsOut.length  -(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.length  -(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	8	None	replace
178	[BUG]  [BUGGY]  return  bitsOut.length  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.length  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	8	None	replace
179	[BUG]  [BUGGY]  return  bitsOut.length  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.length  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	8	None	replace
180	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  3;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  3;	  return    bitsOut    -    1;    	compilable	  [FE]  AssertionError  	4	12	replace
181	[BUG]  [BUGGY]  return  bitsOut  -  3;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  3;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  3;	  return    bitsOut    -    1;    	compilable	  [FE]  AssertionError  	4	12	replace
182	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	11	replace
183	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	11	replace
184	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	12	replace
185	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	15	12	replace
186	[BUG]  [BUGGY]  return(bitsOut  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	non-compiled	[CE]  incompatible  types	6	None	replace
187	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
188	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
190	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
191	[BUG]  [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);	  return    bitsOut.toByteArray();    	non-compiled	[CE]  long  cannot  be  dereferenced	20	None	replace
192	[BUG]  [BUGGY]  return  in.toByteArray();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  in.toByteArray();  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.toByteArray();	  return    bitsOut.toByteArray();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
193	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE;  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray();    	non-compiled	[CE]  ';'  expected	20	None	replace
194	[BUG]  [BUGGY]  return  Integer.toByteArray(bitsOut);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  Integer.toByteArray(bitsOut);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  Integer.toByteArray(bitsOut);	  return    bitsOut.toByteArray();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
195	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	14	None	add
196	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	14	None	add
197	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	14	None	add
198	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	14	None	add
199	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	14	None	add
200	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	14	None	add
201	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	14	None	add
202	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	14	None	add
203	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	11	None	replace
204	[BUG]  [BUGGY]  return  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	11	None	replace
205	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	11	None	replace
206	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.LITTLE_ENDIAN);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut.write(ByteOrder.LITTLE_ENDIAN);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.LITTLE_ENDIAN);	      	non-compiled	[CE]  long  cannot  be  dereferenced	11	None	replace
207	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]                            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.FIELD_SIZE,  MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	11	None	replace
208	[BUG]  [BUGGY]  return  bitsOut  -  1;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(long,int)  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    in.read(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	3	None	add
209	[BUG]  [BUGGY]  return  bitsOut  -  1;  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
210	[BUG]  [BUGGY]  return  bitsOut  -  1;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
211	[BUG]  [BUGGY]  return  bitsOut  -  1;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  no  suitable  method  found  for  read(long,int)  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	3	None	add
212	[BUG]  [BUGGY]  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	3	None	add
213	[BUG]  [BUGGY]  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	3	None	add
214	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	1	None	add
215	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	1	None	add
216	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	1	None	add
217	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsOut);  [CE]  no  suitable  method  found  for  read(long)  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsOut);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.read(bitsOut);	  	non-compiled	[CE]  no  suitable  method  found  for  read(long)	1	None	add
218	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut  =  ByteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  incompatible  types	1	None	add
219	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	1	None	add
220	[BUG]  [BUGGY]  return  bitsOut.length  -  2;  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.length  -  2;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  2;	  return    bitsOut.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	8	None	replace
221	[BUG]  [BUGGY]  return  bitsOut.length  +  1;  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.length  +  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  +  1;	  return    bitsOut.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	8	None	replace
222	[BUG]  [BUGGY]  return  bitsOut.length  &  MASKS_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.length  &  MASKS_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  &  MASKS_SIZE;	  return    bitsOut.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	8	None	replace
223	[BUG]  [BUGGY]  Return  bitsOut  &  MAXIMUM_CACHE_SIZE;  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  Return  bitsOut  &  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Return  bitsOut  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS_SIZE;    	non-compiled	[CE]  ';'  expected	7	None	replace
224	[BUG]  [BUGGY]  return  bitsOut  &  BYTE_SIZE;  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  BYTE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  BYTE_SIZE;	  return    bitsOut    &    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	7	None	replace
225	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	16	None	replace
226	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1));  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1));  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	16	None	replace
227	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  16));  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  16));  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  16));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	16	None	replace
228	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	17	None	replace
229	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  bitsCachedSize);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	17	None	replace
230	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MASKS);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MASKS);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  MASKS);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	17	None	replace
231	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	17	None	replace
232	[BUG]  [BUGGY]  return  bitsOut  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	18	None	replace
233	[BUG]  [BUGGY]  return  bitsOut  <  <  4  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  4  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
234	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	9	None	add
235	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	9	None	add
236	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	9	None	add
237	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	9	None	add
238	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	9	None	add
239	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	9	None	add
240	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
241	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	9	None	add
242	[BUG]  [BUGGY]  return  bitsOut?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	19	None	replace
243	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
244	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
245	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
246	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	12	None	add
247	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	12	None	add
248	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCachedSize);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
249	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	12	None	add
250	[BUG]  [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	5	None	add
251	[BUG]  [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    InputStream  in  =  readBits(this,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	5	None	add
252	[BUG]  [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	5	None	add
253	[BUG]  [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
254	[BUG]  [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	add
255	[BUG]  [BUGGY]  return  this.bitsCachedSize;  bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	5	None	add
256	[BUG]  [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	5	None	add
257	[BUG]  [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	add
258	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE[count];  [CE]  array  required,  but  int  found  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE[count];	  return    bitsOut    &    MASKS[count];    	non-compiled	[CE]  array  required,  but  int  found	10	None	replace
259	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	11	replace
260	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	11	replace
261	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
262	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
263	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
264	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
265	[BUG]  [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	22	None	replace
266	[BUG]  [BUGGY]  return  bitsOut  &(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCached  [FE]                      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCached	22	None	replace
267	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE));  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	16	None	replace
268	[BUG]  [BUGGY]  return  bitsOut.length  -(bitsCachedSize  +  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.length  -(bitsCachedSize  +  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bitsCachedSize  +  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	8	None	replace
269	[BUG]  [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  MAXIMUM_CACHE_SIZE));  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bitsCachedSize  -  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
270	[BUG]  [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  bitsOut.length);  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  bitsOut.length);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bitsCachedSize  -  bitsOut.length);	  return    bitsOut.length;    	non-compiled	[CE]  long  cannot  be  dereferenced	8	None	replace
271	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	12	None	add
272	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	12	None	add
273	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	12	None	add
274	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	12	None	add
275	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	12	None	add
276	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	12	None	add
277	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;  [CE]  cannot  find  symbol  nextByteOrder  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  cannot  find  symbol  nextByteOrder	12	None	add
278	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	12	None	add
279	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  bitsCachedSize);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_SIZE,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	17	None	replace
280	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  bitsOut);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  bitsOut);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_SIZE,  bitsOut);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	17	None	replace
281	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
282	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
283	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
284	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	1	None	add
285	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  incompatible  types	1	None	add
286	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
287	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count  *  2];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	replace
288	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  *  2];	  return    bitsOut    &    MASKS[count];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	2	replace
289	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	11	replace
290	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	11	replace
291	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
292	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;	  return    this.bitsCachedSize;    	compilable	  [FE]  AssertionError  	6	12	replace
293	[BUG]  [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
294	[BUG]  [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
295	[BUG]  [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readBits(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readBits(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    InputStream  in  =  readBits(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	5	None	add
296	[BUG]  [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    InputStream  in  =  readInt(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
297	[BUG]  [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
298	[BUG]  [BUGGY]  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    int  count  =  this.bitsCachedSize;	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	5	None	add
299	[BUG]  [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(this.bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  this.bitsCachedSize;  InputStream  in  =  readInt(this.bitsCachedSize);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    this.bitsCachedSize;    InputStream  in  =  readInt(this.bitsCachedSize);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
300	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.toByteArray()  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray();    	non-compiled	[CE]  long  cannot  be  dereferenced	20	None	replace
301	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  -  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut.toByteArray()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  -  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray();    	non-compiled	[CE]  long  cannot  be  dereferenced	20	None	replace
302	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  &  MASKS[count];  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  &  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  &  MASKS[count];	  	non-compiled	[CE]  not  a  statement	9	None	add
303	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
304	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
305	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  +=  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	9	None	add
306	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
307	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(bytes,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytes  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(bytes,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =  readByte(bytes,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  bytes	9	None	add
308	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count];    bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
309	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :  bitsCachedSize;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :  bitsCachedSize;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :  bitsCachedSize;	  return    bitsOut    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
310	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	2	12	replace
311	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	2	12	replace
312	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  not  a  statement	14	None	add
313	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	14	None	add
314	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	14	None	add
315	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	14	None	add
316	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	14	None	add
317	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;	  	non-compiled	[CE]  unreachable  statement	14	None	add
318	[BUG]  [BUGGY]  bitsOut.write(MASK_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  MASK_SIZE  [FE]                    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut.write(MASK_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASK_SIZE,  MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  cannot  find  symbol  MASK_SIZE	11	None	replace
319	[BUG]  [BUGGY]  bitsOut.write(MASKS,  0,  count);  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut.write(MASKS,  0,  count);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS,  0,  count);	      	non-compiled	[CE]  long  cannot  be  dereferenced	11	None	replace
320	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  bitsOut.write(MASKS[count],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	      	non-compiled	[CE]  long  cannot  be  dereferenced	11	None	replace
321	[BUG]  [BUGGY]  return  bitsIn  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bitsIn  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsIn  &  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsIn  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bitsIn	7	None	replace
322	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CAMCHE_SIZE;  [CE]  cannot  find  symbol  MAXIMUM_CAMCHE_SIZE  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MAXIMUM_CAMCHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CAMCHE_SIZE;	  return    bitsOut    &    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CAMCHE_SIZE	7	None	replace
323	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_STIZE;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_STIZE  [FE]                  AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_STIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_STIZE;	  return    bitsOut    &    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_STIZE	7	None	replace
324	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
325	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
326	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  2);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
327	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  2);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	13	12	replace
328	[BUG]  [BUGGY]  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	3	None	add
329	[BUG]  [BUGGY]  return  bitsOut  -  1;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	3	None	add
330	[BUG]  [BUGGY]  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	3	None	add
331	[BUG]  [BUGGY]  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  ';'  expected	3	None	add
332	[BUG]  [BUGGY]  return  bitsOut  -  1;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	3	None	add
333	[BUG]  [BUGGY]  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  ';'  expected	3	None	add
334	[BUG]  [BUGGY]  return  bitsOut  -  1;  bitsOut  -  1;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  -  1;  bitsOut  -  1;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1;    bitsOut  -  1;	  	non-compiled	[CE]  not  a  statement	3	None	add
335	[BUG]  [BUGGY]  return  bitsOut  <  <  8  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;    [BUGGY]  return  bitsOut  <  <  8  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]    }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  8  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
