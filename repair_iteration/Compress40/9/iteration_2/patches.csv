bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  ==  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  ==  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  ==  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    count    <    =    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	123	None	replace
2	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  MAXIMUM_CACHE_SIZE  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  =  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut.toByteArray()    &&    count    <    =    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
3	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  >=  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  >=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  >=  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    count    <    =    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	123	None	replace
4	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count!=  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count!=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count!=  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    count    <    =    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	123	None	replace
5	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  >=  =  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  >=  =  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  >=  =  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    count    <    =    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
6	[BUG]  [BUGGY]  return  bitsCachedSize.toByteArray();  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsCachedSize.toByteArray();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsCachedSize.toByteArray();	  return    nextByteOrder.toByteArray();    	non-compiled	[CE]  int  cannot  be  dereferenced	125	None	replace
7	[BUG]  [BUGGY]  bitsOut.toByteArray();  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.toByteArray();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.toByteArray();	  return    nextByteOrder.toByteArray();    	non-compiled	[CE]  long  cannot  be  dereferenced	125	None	replace
8	[BUG]  [BUGGY]  return  bitsIn.toByteArray();  [CE]  cannot  find  symbol  bitsIn  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsIn.toByteArray();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsIn.toByteArray();	  return    nextByteOrder.toByteArray();    	non-compiled	[CE]  cannot  find  symbol  bitsIn	125	None	replace
9	[BUG]  [BUGGY]  return  bitsByteOrder.toByteArray();  [CE]  cannot  find  symbol  bitsByteOrder  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsByteOrder.toByteArray();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsByteOrder.toByteArray();	  return    nextByteOrder.toByteArray();    	non-compiled	[CE]  cannot  find  symbol  bitsByteOrder	125	None	replace
10	[BUG]  [BUGGY]  return  bitsCached.toByteArray();  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsCached.toByteArray();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsCached.toByteArray();	  return    nextByteOrder.toByteArray();    	non-compiled	[CE]  long  cannot  be  dereferenced	125	None	replace
11	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	303	None	replace
12	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder,  count);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder,  count);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	303	None	replace
13	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder,  MASKS[count]);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder,  MASKS[count]);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	303	None	replace
14	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder,  maxIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  maxIMUM_CACHE_SIZE  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder,  maxIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder,  maxIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  maxIMUM_CACHE_SIZE	303	None	replace
15	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder,  MASKS[count],  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder,  MASKS[count],  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder,  MASKS[count],  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	303	None	replace
16	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder,  1);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder,  1);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	303	None	replace
17	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder,  size);  [CE]  cannot  find  symbol  size  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder,  size);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder,  size);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  size	303	None	replace
18	[BUG]  [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    2?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
19	[BUG]  [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    <    <    2?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
20	[BUG]  [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    <    <    2?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
21	[BUG]  [BUGGY]  return  bitsOut  <  <  2?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    2?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
22	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	330	None	replace
23	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MIN_VALUE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MIN_VALUE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MIN_VALUE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	330	None	replace
24	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MINIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MINIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MINIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	330	None	replace
25	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  Integer.MIN_VALUE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  incomparable  types:  ByteOrder  and  int  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  Integer.MIN_VALUE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  Integer.MIN_VALUE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incomparable  types:  ByteOrder  and  int	330	None	replace
26	[BUG]  [BUGGY]  bitsOut  -=(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	330	None	replace
27	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  Integer.MAXIMUM_CACHE_SIZE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  Integer.MAXIMUM_CACHE_SIZE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  Integer.MAXIMUM_CACHE_SIZE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	330	None	replace
28	[BUG]  [BUGGY]  return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	32	None	replace
29	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(0,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(0,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(0,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	32	None	replace
30	[BUG]  [BUGGY]  return  bitsOut  -  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize));	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	32	None	replace
31	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  count));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  count));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  count));	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	32	None	replace
32	[BUG]  [BUGGY]  return  bitsOut  -  Math.min(bitsCachedSize,  count));  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(bitsCachedSize,  count));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.min(bitsCachedSize,  count));	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	32	None	replace
33	[BUG]  [BUGGY]  bitsOut  -=  count;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  count;	  return    bitsOut    -    1;    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	9	None	replace
34	[BUG]  [BUGGY]  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	9	None	replace
35	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }	  return    bitsOut    -    1;    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  unreachable  statement	9	None	replace
36	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  +=  count;  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  +=  count;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  +=  count;  }	  return    bitsOut    -    1;    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  unreachable  statement	9	None	replace
37	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  =  Integer.toString(bitsCachedSize);  }  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  =  Integer.toString(bitsCachedSize);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  =  Integer.toString(bitsCachedSize);  }	  return    bitsOut    -    1;    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	9	None	replace
38	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  in.skipChildren();  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  in.skipChildren();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  in.skipChildren();  }	  return    bitsOut    -    1;    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
39	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  in.close();  }  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  in.close();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  in.close();  }	  return    bitsOut    -    1;    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  unreachable  statement	9	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(bitsCachedSize,  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    1);    	compilable	  [FE]  AssertionError  	262	12	replace
41	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    1);    	compilable	  [FE]  AssertionError  	262	12	replace
42	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize,  1);  [CE]  no  suitable  method  found  for  max(int,int,int)  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize,  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    1);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,int,int)	262	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(bitsCachedSize,  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    1);    	compilable	  [FE]  AssertionError  	262	12	replace
44	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    1);    	compilable	  [FE]  AssertionError  	262	12	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(0,  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    1);    	compilable	  [FE]  AssertionError  	262	12	replace
46	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  1);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    1);    	compilable	  [FE]  AssertionError  	262	12	replace
47	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	253	None	replace
48	[BUG]  [BUGGY]  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	253	None	replace
49	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	253	None	replace
50	[BUG]  [BUGGY]  bitsOut  =  readInt(MAXIMUM_CACHE_SIZE,  this.bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readInt(MAXIMUM_CACHE_SIZE,  this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readInt(MAXIMUM_CACHE_SIZE,  this.bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	253	None	replace
51	[BUG]  [BUGGY]  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	253	None	replace
52	[BUG]  [BUGGY]  return  in.read(bytesOut,  ByteOrder.BYTE_SIZE);  [CE]  cannot  find  symbol  bytesOut  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(bytesOut,  ByteOrder.BYTE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(bytesOut,  ByteOrder.BYTE_SIZE);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  bytesOut	280	None	replace
53	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  in);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  in);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  in);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	280	None	replace
54	[BUG]  [BUGGY]  return  in.read(ByteOrder.MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.MAXIMUM_CACHE_SIZE,  bitsOut);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	280	None	replace
55	[BUG]  [BUGGY]  return  in.readBits(ByteOrder.BYTE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.readBits(ByteOrder.BYTE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.readBits(ByteOrder.BYTE_SIZE,  bitsCachedSize);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	280	None	replace
56	[BUG]  [BUGGY]  return  in.readBits(ByteOrder.BYTE_SIZE,  bitsOut);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.readBits(ByteOrder.BYTE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.readBits(ByteOrder.BYTE_SIZE,  bitsOut);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	280	None	replace
57	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	280	None	replace
58	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	195	None	replace
59	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	195	None	replace
60	[BUG]  [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	195	None	replace
61	[BUG]  [BUGGY]  int  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	195	None	replace
62	[BUG]  [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	195	None	replace
63	[BUG]  [BUGGY]  Integer  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	195	None	replace
64	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MASKS,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  min(long[],int)  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MASKS,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.min(MASKS,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  min(long[],int)	195	None	replace
65	[BUG]  [BUGGY]  bitsOut.write(MASKS,  0,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS,  0,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS,    0,    count);    	non-compiled	[CE]  long  cannot  be  dereferenced	319	None	replace
66	[BUG]  [BUGGY]  bitsOut.write(MASKS,  0,  count  -  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS,  0,  count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS,  0,  count  -  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS,    0,    count);    	non-compiled	[CE]  long  cannot  be  dereferenced	319	None	replace
67	[BUG]  [BUGGY]  bitsOut.write(MASKS,  0,  count  -  1);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS,  0,  count  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS,  0,  count  -  1);	  bitsOut.write(MASKS,    0,    count);    	non-compiled	[CE]  long  cannot  be  dereferenced	319	None	replace
68	[BUG]  [BUGGY]  bitsOut.write(MASKS,  0,  count  -  1,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS,  0,  count  -  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS,  0,  count  -  1,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS,    0,    count);    	non-compiled	[CE]  long  cannot  be  dereferenced	319	None	replace
69	[BUG]  [BUGGY]  bitsOut.write(MASKS,  0,  count,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS,  0,  count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS,  0,  count,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS,    0,    count);    	non-compiled	[CE]  long  cannot  be  dereferenced	319	None	replace
70	[BUG]  [BUGGY]  bitsOut.write(MASKS,  0,  count  *  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS,  0,  count  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS,  0,  count  *  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS,    0,    count);    	non-compiled	[CE]  long  cannot  be  dereferenced	319	None	replace
71	[BUG]  [BUGGY]  bitsOut.write(MASKS,  0,  count  +  1);  [CE]  long  cannot  be  dereferenced  [FE]                                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS,  0,  count  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS,  0,  count  +  1);	  bitsOut.write(MASKS,    0,    count);    	non-compiled	[CE]  long  cannot  be  dereferenced	319	None	replace
72	[BUG]  [BUGGY]  return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  bitsCachedSize;  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  bitsCachedSize;	  return    bitsOut    <    <    4?    bitsOut    :    bitsCachedSize;    	non-compiled	[CE]  >  expected	309	None	replace
73	[BUG]  [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :  bitsCachedSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1?  bitsOut  :  bitsCachedSize;	  return    bitsOut    <    <    4?    bitsOut    :    bitsCachedSize;    	non-compiled	[CE]  illegal  start  of  type	309	None	replace
74	[BUG]  [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :  bitsCachedSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2?  bitsOut  :  bitsCachedSize;	  return    bitsOut    <    <    4?    bitsOut    :    bitsCachedSize;    	non-compiled	[CE]  illegal  start  of  type	309	None	replace
75	[BUG]  [BUGGY]  return  bitsOut  <  <  3?  bitsOut  :  bitsCachedSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  3?  bitsOut  :  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  3?  bitsOut  :  bitsCachedSize;	  return    bitsOut    <    <    4?    bitsOut    :    bitsCachedSize;    	non-compiled	[CE]  illegal  start  of  type	309	None	replace
76	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :  bitsOut;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsCachedSize  :  bitsOut;	  return    bitsOut    <    <    4?    bitsOut    :    bitsCachedSize;    	non-compiled	[CE]  illegal  start  of  type	309	None	replace
77	[BUG]  [BUGGY]  return  bitsOut  <  <  16?  bitsOut  :  bitsCachedSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  16?  bitsOut  :  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  16?  bitsOut  :  bitsCachedSize;	  return    bitsOut    <    <    4?    bitsOut    :    bitsCachedSize;    	non-compiled	[CE]  illegal  start  of  type	309	None	replace
78	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  bitsCachedSize));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  bitsCachedSize));	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	30	None	replace
79	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(0,  bitsCachedSize));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(0,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(0,  bitsCachedSize));	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	30	None	replace
80	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  count));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  count));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  count));	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	30	None	replace
81	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(1,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(1,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(1,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	30	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(0,  count);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE));    	compilable	  [FE]  AssertionError  	30	12	replace
83	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  count);  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  count);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE));    	compilable	  [FE]  AssertionError  	30	12	replace
84	[BUG]  [BUGGY]  return  bitsOut  <  <  1  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
85	[BUG]  [BUGGY]  return  bitsOut  <  <  1  &&  count  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1  &&  count  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1  &&  count  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
86	[BUG]  [BUGGY]  return  bitsOut  <  <  1  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
87	[BUG]  [BUGGY]  return  bitsOut  <  <  1  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
88	[BUG]  [BUGGY]  return  bitsOut  <  <  1  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    <    <    1    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
89	[BUG]  [BUGGY]  bitsOut  +=  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	305	None	replace
90	[BUG]  [BUGGY]  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	305	None	replace
91	[BUG]  [BUGGY]  bitsOut  +=  MASK[count];  [CE]  cannot  find  symbol  MASK  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  MASK[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  MASK[count];	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  MASK	305	None	replace
92	[BUG]  [BUGGY]  bitsOut  +=  MASS[count];  [CE]  cannot  find  symbol  MASS  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  MASS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  MASS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  MASS	305	None	replace
93	[BUG]  [BUGGY]  bitsOut  -=  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	305	None	replace
94	[BUG]  [BUGGY]  bitsOut  +=  MASKS[0];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  MASKS[0];	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	305	None	replace
95	[BUG]  [BUGGY]  bitsOut  +=  MASCS[count];  [CE]  cannot  find  symbol  MASCS  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  MASCS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  MASCS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  MASCS	305	None	replace
96	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize));	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	29	None	replace
97	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bytesCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bytesCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bytesCachedSize,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	29	None	replace
98	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  count));	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	29	None	replace
99	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(Math.PI  *(bitsCachedSize  -  1,  count)));  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(Math.PI  *(bitsCachedSize  -  1,  count)));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(Math.PI  *(bitsCachedSize  -  1,  count)));	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ')'  expected	29	None	replace
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
101	[BUG]  [BUGGY]  return  bitsOut  %  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
102	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  count)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.max(bitsCachedSize,  count)+  1;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
103	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  count)+  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  count)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(bitsCachedSize,  count)+  1;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
105	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
106	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	11	replace
107	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	11	replace
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
109	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
110	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(10,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.max(10,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
111	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(10,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(10,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(10,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
112	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	25	None	add
113	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	25	None	add
114	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	25	None	add
115	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	25	None	add
116	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	25	None	add
117	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	25	None	add
118	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(bytesCached  <  <  1)?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(bytesCached  <  <  1)?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =(bytesCached  <  <  1)?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  illegal  start  of  type	25	None	add
119	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	25	None	add
120	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1);    	non-compiled	[CE]  ';'  expected	225	None	replace
121	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1);    	non-compiled	[CE]  ';'  expected	225	None	replace
122	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE)+  1);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE)+  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE)+  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1);    	non-compiled	[CE]  ';'  expected	225	None	replace
123	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1);    	non-compiled	[CE]  ';'  expected	225	None	replace
124	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE)+  1);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE)+  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE)+  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1);    	non-compiled	[CE]  ';'  expected	225	None	replace
125	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1);    	non-compiled	[CE]  ';'  expected	225	None	replace
126	[BUG]  [BUGGY]  in.skipChildren();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in.skipChildren();	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
127	[BUG]  [BUGGY]  return  in.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
128	[BUG]  [BUGGY]  bitsOut.skipChildren();  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.skipChildren();	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    in.skipChildren();    	non-compiled	[CE]  long  cannot  be  dereferenced	118	None	replace
129	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	118	None	replace
130	[BUG]  [BUGGY]  InputStream  in  =  readBitsInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBitsInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBitsInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
131	[BUG]  [BUGGY]  InputStream  in  =  readBitsInputStream(in,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBitsInputStream(in,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBitsInputStream(in,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
132	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCachedSize    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	263	None	replace
133	[BUG]  [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCachedSize    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	263	None	replace
134	[BUG]  [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  <  4)?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCachedSize    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	263	None	replace
135	[BUG]  [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCachedSize    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	263	None	replace
136	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCachedSize    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	263	None	replace
137	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCachedSize    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	263	None	replace
138	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  bytesCached	1	None	replace
139	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  bytesCached	1	None	replace
140	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	1	None	replace
141	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	1	None	replace
142	[BUG]  [BUGGY]  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  bytesCached	1	None	replace
143	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	97	None	add
144	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
145	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	97	None	add
146	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	97	None	add
147	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	97	None	add
148	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	97	None	add
149	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	97	None	add
150	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	97	None	add
151	[BUG]  [BUGGY]  return  bitsOut  <  <  3  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  3  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  3  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    3    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
152	[BUG]  [BUGGY]  return  bitsOut  <  <  3  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  3  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  3  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    <    <    3    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
153	[BUG]  [BUGGY]  return  bitsOut  <  <  3  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  3  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  3  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    3    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
154	[BUG]  [BUGGY]  return  bitsOut  <  <  3  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  3  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  3  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    3    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
155	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	144	None	add
156	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	144	None	add
157	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (this.bitsCachedSize  -  count))  &  MASKS[count];  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >>  (this.bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    bitsOut  =(bitsCached  >>  (this.bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	144	None	add
158	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	144	None	add
159	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	144	None	add
160	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  int  count  =  this.bitsCachedSize;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  int  count  =  this.bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    int  count  =  this.bitsCachedSize;	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	144	None	add
161	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	144	None	add
162	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (this.bitsCachedSize))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (this.bitsCachedSize))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    bitsOut  =(bitsCached  >=  (this.bitsCachedSize))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	144	None	add
163	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	21	None	add
164	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	21	None	add
165	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	21	None	add
166	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MASKS[MAXIMUM_CACHE_SIZE];	  	non-compiled	[CE]  possible  loss  of  precision	21	None	add
167	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	21	None	add
168	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	21	None	add
169	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	21	None	add
170	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S	  	non-compiled	[CE]  ')'  expected	21	None	add
171	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCached	119	None	replace
172	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCached	119	None	replace
173	[BUG]  [BUGGY]  return  bitsOut.length  -(count  -  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(count  -  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	176	None	replace
174	[BUG]  [BUGGY]  return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	176	None	replace
175	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  MAXIMUM_CACHE_SIZE));  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	176	None	replace
176	[BUG]  [BUGGY]  return  bitsOut.length  -(maximum_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(maximum_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(maximum_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	176	None	replace
177	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  ')'  expected  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	176	None	replace
178	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.min(MASKS_SIZE,  MAXIMUM_CACHE_SIZE));  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.min(MASKS_SIZE,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.min(MASKS_SIZE,  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	176	None	replace
179	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	103	None	add
180	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	103	None	add
181	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	103	None	add
182	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	103	None	add
183	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	103	None	add
184	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	103	None	add
185	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	103	None	add
186	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	103	None	add
187	[BUG]  [BUGGY]  return  in.read(bytesOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesOut  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(bytesOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(bytesOut,  MAXIMUM_CACHE_SIZE);	  return    in.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesOut	81	None	replace
188	[BUG]  [BUGGY]  return  byteOrder.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  byteOrder.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  byteOrder.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    in.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	81	None	replace
189	[BUG]  [BUGGY]  return  in.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  return    in.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	81	None	replace
190	[BUG]  [BUGGY]  return  in.read(byteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(byteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(byteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    in.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	81	None	replace
191	[BUG]  [BUGGY]  bitsOut  =  readBits(this,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(this,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(this,  count);	  return    this.bitsCachedSize;    bitsOut    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	255	None	replace
192	[BUG]  [BUGGY]  bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    this.bitsCachedSize;    bitsOut    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	255	None	replace
193	[BUG]  [BUGGY]  bitsOut  =  readBits(this,  count,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(this,  count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(this,  count,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    bitsOut    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	255	None	replace
194	[BUG]  [BUGGY]  bitsOut  =  readBits(this,  0,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(this,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(this,  0,  count);	  return    this.bitsCachedSize;    bitsOut    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	255	None	replace
195	[BUG]  [BUGGY]  bitsOut  =  readBits(this,  0,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(this,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(this,  0,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    bitsOut    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	255	None	replace
196	[BUG]  [BUGGY]  bitsOut  =  readBits(this,  byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(this,  byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(this,  byteOrder,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    bitsOut    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	255	None	replace
197	[BUG]  [BUGGY]  bitsOut  =  readBits(this,  offset,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  offset  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(this,  offset,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(this,  offset,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    bitsOut    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  offset	255	None	replace
198	[BUG]  [BUGGY]  return  bitsOut  <  <  1?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
199	[BUG]  [BUGGY]  return  bitsOut  &  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	130	None	replace
200	[BUG]  [BUGGY]  return(bitsOut  <  <  1)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  <  1)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  <  1)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
201	[BUG]  [BUGGY]  return  bitsOut  <  <  1?  bitsInt  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1?  bitsInt  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1?  bitsInt  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
202	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >=  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsCachedSize  >=  0)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	292	12	replace
203	[BUG]  [BUGGY]  return(bitsCachedSize  >=  0)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >=  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize  >=  0)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	292	12	replace
204	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  ==  0)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	292	3	replace
205	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  ==  0)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	292	3	replace
206	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  0)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	292	2	replace
207	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  0)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	292	2	replace
208	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >  0)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	292	12	replace
209	[BUG]  [BUGGY]  return(bitsOut  >  0)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >  0)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	292	12	replace
210	[BUG]  [BUGGY]  return(bitsOut  >>  0)?  this.bitsCachedSize  :  bitsOut;  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >>  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >>  0)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    	non-compiled	[CE]  incompatible  types	292	None	replace
211	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut!=  0)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	292	12	replace
212	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=  0)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	292	12	replace
213	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	non-compiled	[CE]  ';'  expected	226	None	replace
214	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE  +  1));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE  +  1));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	non-compiled	[CE]  ';'  expected	226	None	replace
215	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	non-compiled	[CE]  ';'  expected	226	None	replace
216	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE  +  1));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE  +  1));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	non-compiled	[CE]  ';'  expected	226	None	replace
217	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE  +  1));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE  +  1));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	non-compiled	[CE]  ';'  expected	226	None	replace
218	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count  +  1));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  count  +  1));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	non-compiled	[CE]  ';'  expected	226	None	replace
219	[BUG]  [BUGGY]  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
220	[BUG]  [BUGGY]  in  =  readInt(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	293	None	replace
221	[BUG]  [BUGGY]  in  =  readInt(MAXIMUM_CACHE_SIZE,  count);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(MAXIMUM_CACHE_SIZE,  count);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	293	None	replace
222	[BUG]  [BUGGY]  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  count);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  count);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
223	[BUG]  [BUGGY]  bitsOut  =  readInt(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readInt(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readInt(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
224	[BUG]  [BUGGY]  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
225	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	101	None	add
226	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	101	None	add
227	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	101	None	add
228	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  in.skipChildren();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	101	None	add
229	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	101	None	add
230	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	101	None	add
231	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	101	None	add
232	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  +  1);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	101	None	add
233	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    2);    	compilable	  [FE]  AssertionError  	327	11	replace
234	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    2);    	compilable	  [FE]  AssertionError  	327	11	replace
235	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(bitsCachedSize,  2);	  return    bitsOut    &    Math.max(bitsCachedSize,    2);    	compilable	  [FE]  AssertionError  	327	12	replace
236	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  2);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  2);	  return    bitsOut    &    Math.max(bitsCachedSize,    2);    	compilable	  [FE]  AssertionError  	327	12	replace
237	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(bitsCachedSize,  2);	  return    bitsOut    &    Math.max(bitsCachedSize,    2);    	compilable	  [FE]  AssertionError  	327	12	replace
238	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  2);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  2);	  return    bitsOut    &    Math.max(bitsCachedSize,    2);    	compilable	  [FE]  AssertionError  	327	12	replace
239	[BUG]  [BUGGY]  bitsOut  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytes  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  cannot  find  symbol  bytes	114	None	replace
240	[BUG]  [BUGGY]  bitsOut  =  readInt(bytes,  count);  [CE]  cannot  find  symbol  bytes  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readInt(bytes,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readInt(bytes,  count);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  cannot  find  symbol  bytes	114	None	replace
241	[BUG]  [BUGGY]  InputStream  in  =  readInt(bytes,  count);  bitsOut  =  in.readInt();  [CE]  cannot  find  symbol  bytes  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bytes,  count);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bytes,  count);  bitsOut  =  in.readInt();	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  cannot  find  symbol  bytes	114	None	replace
242	[BUG]  [BUGGY]  in  =  readInt(bytes,  count);  bitsOut  =  in.readInt();  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(bytes,  count);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(bytes,  count);  bitsOut  =  in.readInt();	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	114	None	replace
243	[BUG]  [BUGGY]  nextByteOrder  =  readBits(bytes,  count);  bitsOut  =  in.readInt();  [CE]  cannot  find  symbol  nextByteOrder  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  nextByteOrder  =  readBits(bytes,  count);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	nextByteOrder  =  readBits(bytes,  count);  bitsOut  =  in.readInt();	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  cannot  find  symbol  nextByteOrder	114	None	replace
244	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    0,    count);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	219	None	replace
245	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count,  bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    0,    count);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	219	None	replace
246	[BUG]  [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *=  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    0,    count);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	219	None	replace
247	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    0,    count);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	219	None	replace
248	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    0,    count);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	219	None	replace
249	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count  -  1);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count  -  1);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    0,    count);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	219	None	replace
250	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    0,    count);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	219	None	replace
251	[BUG]  [BUGGY]  return  bitsOut  <  <  16  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  16  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  16  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    16    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
252	[BUG]  [BUGGY]  return  bitsOut  <  <  16  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  16  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  16  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    16    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
253	[BUG]  [BUGGY]  return  bitsOut  <  <  16  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  16  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  16  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    16    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
254	[BUG]  [BUGGY]  bitsOut.write(MASKS[count]  &  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count]  &  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count]  &  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count]);    	non-compiled	[CE]  long  cannot  be  dereferenced	63	None	replace
255	[BUG]  [BUGGY]  bitsOut.write(MASKS[count,  MAXIMUM_CACHE_SIZE]);  [CE]  ']'  expected  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count,  MAXIMUM_CACHE_SIZE]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count,  MAXIMUM_CACHE_SIZE]);	  bitsOut.write(MASKS[count]);    	non-compiled	[CE]  ']'  expected	63	None	replace
256	[BUG]  [BUGGY]  bitsOut.write(MASKS[count]  -  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count]  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count]  -  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count]);    	non-compiled	[CE]  long  cannot  be  dereferenced	63	None	replace
257	[BUG]  [BUGGY]  bitsOut.write(MASKS[count]  +  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count]  +  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count]  +  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count]);    	non-compiled	[CE]  long  cannot  be  dereferenced	63	None	replace
258	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  not  a  statement	312	None	replace
259	[BUG]  [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  not  a  statement	312	None	replace
260	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	312	None	replace
261	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  not  a  statement	312	None	replace
262	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	312	None	replace
263	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  1);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  not  a  statement	312	None	replace
264	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	312	None	replace
265	[BUG]  [BUGGY]  return  bitsOut  <  <  4  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE    +    1;    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
266	[BUG]  [BUGGY]  return  bitsOut  <  <  2  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE    +    1;    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
267	[BUG]  [BUGGY]  return  bitsOut  <  <  4  &&  count  >  MAXIMUM_CACHE_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4  &&  count  >  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4  &&  count  >  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE    +    1;    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
268	[BUG]  [BUGGY]  return  bitsOut  <  <  4  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE    +    1;    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
269	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	214	None	replace
270	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	214	None	replace
271	[BUG]  [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *=  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	214	None	replace
272	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	214	None	replace
273	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	214	None	replace
274	[BUG]  [BUGGY]  long  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	214	None	replace
275	[BUG]  [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	214	None	replace
276	[BUG]  [BUGGY]  return  bitsOut.length  -(count  +  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(count  +  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(count  +  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    +    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	268	None	replace
277	[BUG]  [BUGGY]  return  bitsOut.length  -(bytesCachedSize  +  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bytesCachedSize  +  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bytesCachedSize  +  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    +    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	268	None	replace
278	[BUG]  [BUGGY]  return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  +  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  +  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  +  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    +    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	268	None	replace
279	[BUG]  [BUGGY]  return  bitsOut.length  -(itemsCachedSize  +  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(itemsCachedSize  +  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(itemsCachedSize  +  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    +    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	268	None	replace
280	[BUG]  [BUGGY]  return  bitsOut.length  -(maximum_CACHE_SIZE  +  bitsCachedSize);  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(maximum_CACHE_SIZE  +  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(maximum_CACHE_SIZE  +  bitsCachedSize);	  return    bitsOut.length    -(bitsCachedSize    +    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	268	None	replace
281	[BUG]  [BUGGY]  return  bitsOut.length  -(maximum_CACHE_SIZE  +  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(maximum_CACHE_SIZE  +  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(maximum_CACHE_SIZE  +  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    +    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	268	None	replace
282	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count  -  2];	  return    bitsOut    &    MASKS[count    -    1];    	compilable	  [FE]  AssertionError  	20	11	replace
283	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  -  2];	  return    bitsOut    &    MASKS[count    -    1];    	compilable	  [FE]  AssertionError  	20	11	replace
284	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1],  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1],  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  -  1],  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count    -    1];    	non-compiled	[CE]  ';'  expected	20	None	replace
285	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1],  MAXIMUM_CACHE_SIZE;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1],  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  -  1],  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count    -    1];    	non-compiled	[CE]  ';'  expected	20	None	replace
286	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  -  1],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    MASKS[count    -    1];    	non-compiled	[CE]  ';'  expected	20	None	replace
287	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  3];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count  -  3];	  return    bitsOut    &    MASKS[count    -    1];    	compilable	  [FE]  AssertionError  	20	11	replace
288	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  3];  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  3];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  -  3];	  return    bitsOut    &    MASKS[count    -    1];    	compilable	  [FE]  AssertionError  	20	11	replace
289	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MASKS[count  -  1];	  return    bitsOut    &    MASKS[count    -    1];    	compilable	  [FE]  AssertionError  	20	12	replace
290	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count  -  1];  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MASKS[count  -  1];	  return    bitsOut    &    MASKS[count    -    1];    	compilable	  [FE]  AssertionError  	20	12	replace
291	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	2	replace
292	[BUG]  [BUGGY]  return(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	2	replace
293	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	3	replace
294	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	3	replace
295	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	2	replace
296	[BUG]  [BUGGY]  return(this.bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	2	replace
297	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	11	replace
298	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	11	replace
299	[BUG]  [BUGGY]  return(bitsCachedSize  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	non-compiled	[CE]  incompatible  types	290	None	replace
300	[BUG]  [BUGGY]  return(bitsOut  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	non-compiled	[CE]  incompatible  types	290	None	replace
301	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	66	None	replace
302	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  bytesCached	66	None	replace
303	[BUG]  [BUGGY]  return  bitsOut  -  1L;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	150	None	add
304	[BUG]  [BUGGY]  return  bitsOut  -  1L;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	150	None	add
305	[BUG]  [BUGGY]  return  bitsOut  -  1L;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	150	None	add
306	[BUG]  [BUGGY]  return  bitsOut  -  1L;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	150	None	add
307	[BUG]  [BUGGY]  return  bitsOut  -  1L;  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	150	None	add
308	[BUG]  [BUGGY]  return  bitsOut  -  1L;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	150	None	add
309	[BUG]  [BUGGY]  return  bitsOut  -  1L;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	150	None	add
310	[BUG]  [BUGGY]  return  bitsOut  -  1L;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	150	None	add
311	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	85	None	add
312	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	85	None	add
313	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  &  MAXIMUM_CACHE_SIZE;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    bitsOut  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  not  a  statement	85	None	add
314	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	85	None	add
315	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	85	None	add
316	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	85	None	add
317	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	85	None	add
318	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  1  :  0;  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  1  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  1  :  0;	  	non-compiled	[CE]  unreachable  statement	85	None	add
319	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	71	None	replace
320	[BUG]  [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *=  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	71	None	replace
321	[BUG]  [BUGGY]  in  =  readBits(byteOrder,  count);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(byteOrder,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(byteOrder,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	71	None	replace
322	[BUG]  [BUGGY]  return  in.readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
323	[BUG]  [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *=  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	71	None	replace
324	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	71	None	replace
325	[BUG]  [BUGGY]  return  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	71	None	replace
326	[BUG]  [BUGGY]  return  bitsOut  <  <  2?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    2?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
327	[BUG]  [BUGGY]  return  bitsOut  &  2?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  2?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  2?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    2?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	131	None	replace
328	[BUG]  [BUGGY]  return  bitsOut.length  -  1L;  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  1L;	  return    bitsOut.length    -    1;    	non-compiled	[CE]  long  cannot  be  dereferenced	174	None	replace
329	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsCachedSize  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsCachedSize  -  1;	  return    bitsOut.length    -    1;    	compilable	  [FE]  AssertionError  	174	12	replace
330	[BUG]  [BUGGY]  return  bitsCachedSize  -  1;  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsCachedSize  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsCachedSize  -  1;	  return    bitsOut.length    -    1;    	compilable	  [FE]  AssertionError  	174	12	replace
331	[BUG]  [BUGGY]  return  bitsOut.length  /  1;  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  /  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  /  1;	  return    bitsOut.length    -    1;    	non-compiled	[CE]  long  cannot  be  dereferenced	174	None	replace
332	[BUG]  [BUGGY]  return  bitsOut.length  -  3;  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  3;	  return    bitsOut.length    -    1;    	non-compiled	[CE]  long  cannot  be  dereferenced	174	None	replace
333	[BUG]  [BUGGY]  return  bitsOut.length  -  4;  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  4;	  return    bitsOut.length    -    1;    	non-compiled	[CE]  long  cannot  be  dereferenced	174	None	replace
334	[BUG]  [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.skipChildren();	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
335	[BUG]  [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.skipChildren();    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	68	None	replace
336	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  in.skipChildren();	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
337	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  in.skipChildren();	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
338	[BUG]  [BUGGY]  return  bitsOut  <  <  3?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  3?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  3?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    3?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
339	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	247	None	replace
340	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	247	None	replace
341	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	247	None	replace
342	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MASKS[count],  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MASKS[count],  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  MASKS[count],  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	247	None	replace
343	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  dataArea,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  dataArea  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  dataArea,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  dataArea,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  dataArea	247	None	replace
344	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	247	None	replace
345	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  long  cannot  be  dereferenced	206	None	replace
346	[BUG]  [BUGGY]  bitsOut.write(byteOrder.LITTLE_ENDIAN);  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(byteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(byteOrder.LITTLE_ENDIAN);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  long  cannot  be  dereferenced	206	None	replace
347	[BUG]  [BUGGY]  bitsOut.write(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(bytesCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(bytesCachedSize);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	206	None	replace
348	[BUG]  [BUGGY]  bitsOut.write(byteOrder,  ByteOrder.LITTLE_ENDIAN);  [CE]  long  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(byteOrder,  ByteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(byteOrder,  ByteOrder.LITTLE_ENDIAN);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  long  cannot  be  dereferenced	206	None	replace
349	[BUG]  [BUGGY]  bitsOut.write(bytesCachedSize,  ByteOrder.LITTLE_ENDIAN);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(bytesCachedSize,  ByteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(bytesCachedSize,  ByteOrder.LITTLE_ENDIAN);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	206	None	replace
350	[BUG]  [BUGGY]  bitsOut.write(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(byteOrder,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  long  cannot  be  dereferenced	206	None	replace
351	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.LITTLE_ENDIAN,  count);  [CE]  long  cannot  be  dereferenced  [FE]                                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.LITTLE_ENDIAN,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.LITTLE_ENDIAN,  count);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  long  cannot  be  dereferenced	206	None	replace
352	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	182	None	add
353	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	182	None	add
354	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	182	None	add
355	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	182	None	add
356	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
357	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	182	None	add
358	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	182	None	add
359	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	182	None	add
360	[BUG]  [BUGGY]  int  count  =  this.bitsCachedSize;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  this.bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  this.bitsCachedSize;	  return    this.bitsCachedSize;    int    count    =    this.bitsCachedSize;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	298	None	replace
361	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  <  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCachedSize  <  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCachedSize  <  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    int    count    =    this.bitsCachedSize;    	non-compiled	[CE]  illegal  start  of  type	298	None	replace
362	[BUG]  [BUGGY]  bitsOut  =  this.bitsCachedSize;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  this.bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  this.bitsCachedSize;	  return    this.bitsCachedSize;    int    count    =    this.bitsCachedSize;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	298	None	replace
363	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    int    count    =    this.bitsCachedSize;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	298	None	replace
364	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  <  <  1)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCachedSize  <  <  1)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCachedSize  <  <  1)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    int    count    =    this.bitsCachedSize;    	non-compiled	[CE]  illegal  start  of  type	298	None	replace
365	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  <  <  6)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCachedSize  <  <  6)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCachedSize  <  <  6)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    int    count    =    this.bitsCachedSize;    	non-compiled	[CE]  illegal  start  of  type	298	None	replace
366	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  >=  MAXIMUM_CACHE_SIZE)?  0  :  this.bitsCachedSize;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCachedSize  >=  MAXIMUM_CACHE_SIZE)?  0  :  this.bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCachedSize  >=  MAXIMUM_CACHE_SIZE)?  0  :  this.bitsCachedSize;	  return    this.bitsCachedSize;    int    count    =    this.bitsCachedSize;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	298	None	replace
367	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  possible  loss  of  precision	274	None	replace
368	[BUG]  [BUGGY]  long  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	274	None	replace
369	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  not  a  statement	274	None	replace
370	[BUG]  [BUGGY]  bitsOut  &=  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	274	None	replace
371	[BUG]  [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  incompatible  types	274	None	replace
372	[BUG]  [BUGGY]  bitsOut.add(Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.add(Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.add(Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  long  cannot  be  dereferenced	274	None	replace
373	[BUG]  [BUGGY]  bitsOut.add(Math.min(MAXIMUM_CACHE_SIZE,  count));  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.add(Math.min(MAXIMUM_CACHE_SIZE,  count));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.add(Math.min(MAXIMUM_CACHE_SIZE,  count));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  long  cannot  be  dereferenced	274	None	replace
374	[BUG]  [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	196	None	replace
375	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	196	None	replace
376	[BUG]  [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	196	None	replace
377	[BUG]  [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	196	None	replace
378	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  0);  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  0);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  0);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	196	None	replace
379	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  count);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  count);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder,  count);  bitsOut  =  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	213	None	replace
380	[BUG]  [BUGGY]  in  =  readBits(byteOrder,  count);  bitsOut  =  in.readInt();  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(byteOrder,  count);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(byteOrder,  count);  bitsOut  =  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	213	None	replace
381	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	271	None	replace
382	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	271	None	replace
383	[BUG]  [BUGGY]  bitsOut  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	271	None	replace
384	[BUG]  [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	271	None	replace
385	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count]);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count]);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  possible  loss  of  precision	271	None	replace
386	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  count);  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	271	None	replace
387	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	89	None	add
388	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	89	None	add
389	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	89	None	add
390	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	89	None	add
391	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	89	None	add
392	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	89	None	add
393	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	89	None	add
394	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	89	None	add
395	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  not  a  statement	198	None	replace
396	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  count);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  not  a  statement	198	None	replace
397	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  not  a  statement	198	None	replace
398	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	10	replace
399	[BUG]  [BUGGY]  return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	10	replace
400	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
401	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
402	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  count)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(bitsCachedSize,  count)+  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
403	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  count)+  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  count)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  count)+  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
404	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
405	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
406	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
407	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
408	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
409	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
410	[BUG]  [BUGGY]  return  bitsOut.length  -(count  *  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(count  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(count  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bytesCachedSize    *    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	178	None	replace
411	[BUG]  [BUGGY]  return  bitsOut.length  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  ')'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut.length    -(bytesCachedSize    *    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	178	None	replace
412	[BUG]  [BUGGY]  return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bytesCachedSize    *    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	178	None	replace
413	[BUG]  [BUGGY]  return  bitsOut.length  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE  +  1);  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut.length    -(bytesCachedSize    *    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	178	None	replace
414	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [CE]  long  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length    -(bytesCachedSize    *    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	178	None	replace
415	[BUG]  [BUGGY]  return  bitsOut.length  -(maximum_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(maximum_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(maximum_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bytesCachedSize    *    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	178	None	replace
416	[BUG]  [BUGGY]  return  bitsOut  *  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	55	None	add
417	[BUG]  [BUGGY]  return  bitsOut  *  2;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	55	None	add
418	[BUG]  [BUGGY]  return  bitsOut  *  2;  bitsOut  *  2;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  bitsOut  *  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    bitsOut  *  2;	  	non-compiled	[CE]  not  a  statement	55	None	add
419	[BUG]  [BUGGY]  return  bitsOut  *  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	55	None	add
420	[BUG]  [BUGGY]  return  bitsOut  *  2;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	55	None	add
421	[BUG]  [BUGGY]  return  bitsOut  *  2;  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  >  expected  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  	non-compiled	[CE]  >  expected	55	None	add
422	[BUG]  [BUGGY]  return  bitsOut  *  2;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
423	[BUG]  [BUGGY]  return  bitsOut  *  2;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	55	None	add
424	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	244	None	replace
425	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	244	None	replace
426	[BUG]  [BUGGY]  bitsOut  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	244	None	replace
427	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[1];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	27	None	add
428	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[1];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	27	None	add
429	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	27	None	add
430	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[0];  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[0];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	27	None	add
431	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[1];  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	27	None	add
432	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[1];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	27	None	add
433	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[0];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[0];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	27	None	add
434	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	27	None	add
435	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	104	11	replace
436	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	104	11	replace
437	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	104	None	replace
438	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(MASKS.length,  count);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	104	12	replace
439	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  count);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS.length,  count);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	104	12	replace
440	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	104	12	replace
441	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(0,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	104	12	replace
442	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  min(ByteOrder,int)  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  min(ByteOrder,int)	104	None	replace
443	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	328	None	replace
444	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	328	None	replace
445	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  count;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  count;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	328	None	replace
446	[BUG]  [BUGGY]  bitsOut  -=(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	328	None	replace
447	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE  +  1;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	328	None	replace
448	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	328	None	replace
449	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MASKS[count];	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	328	None	replace
450	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	248	None	replace
451	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readInt(bitsCachedSize);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readInt(bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readInt(bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  not  a  statement	248	None	replace
452	[BUG]  [BUGGY]  in  =  readInt(bitsCachedSize);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	248	None	replace
453	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  not  a  statement	248	None	replace
454	[BUG]  [BUGGY]  return  in  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	248	None	replace
455	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  not  a  statement	248	None	replace
456	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	36	12	replace
457	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	36	12	replace
458	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	36	12	replace
459	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	36	12	replace
460	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	36	None	replace
461	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bytesCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bytesCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bytesCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	36	None	replace
462	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  no  suitable  method  found  for  min(long[],int)  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  no  suitable  method  found  for  min(long[],int)	36	None	replace
463	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	36	12	replace
464	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	36	12	replace
465	[BUG]  [BUGGY]  return  bitsOut.read(bytesCachedSize,  ByteOrder.BYTE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(bytesCachedSize,  ByteOrder.BYTE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(bytesCachedSize,  ByteOrder.BYTE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	229	None	replace
466	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	229	None	replace
467	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  long  cannot  be  dereferenced	229	None	replace
468	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder.BYTE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder.BYTE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder.BYTE_SIZE,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	229	None	replace
469	[BUG]  [BUGGY]  return  bitsOut.read(bytesCachedSize,  BYTE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(bytesCachedSize,  BYTE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(bytesCachedSize,  BYTE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	229	None	replace
470	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	136	None	add
471	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	136	None	add
472	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	136	None	add
473	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	136	None	add
474	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	136	None	add
475	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	136	None	add
476	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	136	None	add
477	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	136	None	add
478	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	105	None	add
479	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	105	None	add
480	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	105	None	add
481	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	105	None	add
482	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  count  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  count  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    int  count  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	105	None	add
483	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	105	None	add
484	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  in.skipChildren();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	105	None	add
485	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	105	None	add
486	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  1;	  return    bitsOut    <    <    1;    	compilable	  [FE]  AssertionError  	158	12	replace
487	[BUG]  [BUGGY]  return  bitsOut  &  1;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  1;	  return    bitsOut    <    <    1;    	compilable	  [FE]  AssertionError  	158	12	replace
488	[BUG]  [BUGGY]  return  bitsOut  <  <  1  ||  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1  ||  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1  ||  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
489	[BUG]  [BUGGY]  return  bitsOut  <  <  1  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1  ||  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
490	[BUG]  [BUGGY]  return  bitsOut  <  <  1  ||  bitsCachedSize!=  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1  ||  bitsCachedSize!=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1  ||  bitsCachedSize!=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
491	[BUG]  [BUGGY]  return  bitsOut  <  <  1  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
492	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	58	None	replace
493	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	58	None	replace
494	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	58	None	replace
495	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	58	None	replace
496	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  count);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	58	None	replace
497	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    	compilable	  [FE]  AssertionError  	46	12	replace
498	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    	compilable	  [FE]  AssertionError  	46	12	replace
499	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(MASKS.length,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    	compilable	  [FE]  AssertionError  	46	12	replace
500	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  bitsCachedSize)+  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS.length,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    	compilable	  [FE]  AssertionError  	46	12	replace
501	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  count)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(0,  count)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    	compilable	  [FE]  AssertionError  	46	12	replace
502	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  count)+  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  count)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  count)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    	compilable	  [FE]  AssertionError  	46	12	replace
503	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    	compilable	  [FE]  AssertionError  	46	12	replace
504	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    	compilable	  [FE]  AssertionError  	46	12	replace
505	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    1))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  bytesCached	167	None	replace
506	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    1))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	167	None	replace
507	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    1))    &    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	167	None	replace
508	[BUG]  [BUGGY]  bitsOut  =(bitsCached!=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached!=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached!=  (bitsCachedSize  -  1))  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    1))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	167	None	replace
509	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  /  MASKS_SIZE;  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  /  MASKS_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  /  MASKS_SIZE;	  return    bitsOut    /    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	92	None	replace
510	[BUG]  [BUGGY]  return  bitsOut  /  BYTE_SIZE;  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  BYTE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  BYTE_SIZE;	  return    bitsOut    /    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	92	None	replace
511	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE.length;  [CE]  int  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  MAXIMUM_CACHE_SIZE.length;	  return    bitsOut    /    MASKS_SIZE;    	non-compiled	[CE]  int  cannot  be  dereferenced	92	None	replace
512	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	241	None	replace
513	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	241	None	replace
514	[BUG]  [BUGGY]  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	241	None	replace
515	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	241	None	replace
516	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	241	None	replace
517	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	241	None	replace
518	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	241	None	replace
519	[BUG]  [BUGGY]  return  Integer.toByteArray(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  Integer.toByteArray(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  Integer.toByteArray(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    Integer.toByteArray(bitsOut);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
520	[BUG]  [BUGGY]  return  Integer.toByteArray(bitsOut,  count);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  Integer.toByteArray(bitsOut,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  Integer.toByteArray(bitsOut,  count);	  return    Integer.toByteArray(bitsOut);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
521	[BUG]  [BUGGY]  return  Integer.toByteArray(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  Integer.toByteArray(bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  Integer.toByteArray(bitsCachedSize);	  return    Integer.toByteArray(bitsOut);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
522	[BUG]  [BUGGY]  return  Integer.toByteArray(bitsOut,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  Integer.toByteArray(bitsOut,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  Integer.toByteArray(bitsOut,  bitsCachedSize);	  return    Integer.toByteArray(bitsOut);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
523	[BUG]  [BUGGY]  return  Integer.toByteArray(count);  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  Integer.toByteArray(count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  Integer.toByteArray(count);	  return    Integer.toByteArray(bitsOut);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
524	[BUG]  [BUGGY]  return  Integer.toByteArray(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  Integer.toByteArray(bytesCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  Integer.toByteArray(bytesCachedSize);	  return    Integer.toByteArray(bitsOut);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	194	None	replace
525	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MASKS[0];	  return    bitsOut    -    MASKS[count];    	compilable	  [FE]  AssertionError  	26	2	replace
526	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[0];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MASKS[0];	  return    bitsOut    -    MASKS[count];    	compilable	  [FE]  AssertionError  	26	2	replace
527	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MASKS[count  +  1];	  return    bitsOut    -    MASKS[count];    	compilable	  [FE]  AssertionError  	26	12	replace
528	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count  +  1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MASKS[count  +  1];	  return    bitsOut    -    MASKS[count];    	compilable	  [FE]  AssertionError  	26	12	replace
529	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MASKS[count  *  2];	  return    bitsOut    -    MASKS[count];    	compilable	  [FE]  AssertionError  	26	12	replace
530	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count  *  2];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MASKS[count  *  2];	  return    bitsOut    -    MASKS[count];    	compilable	  [FE]  AssertionError  	26	12	replace
531	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count  -  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MASKS[count  -  2];	  return    bitsOut    -    MASKS[count];    	compilable	  [FE]  AssertionError  	26	12	replace
532	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count  -  2];  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count  -  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MASKS[count  -  2];	  return    bitsOut    -    MASKS[count];    	compilable	  [FE]  AssertionError  	26	12	replace
533	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsOut,  count);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bitsOut,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bitsOut,  count);	  return    bitsOut    -    1;    InputStream    in    =    readInt(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
534	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  0,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  0,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  0,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  bitsOut.write(MASKS[count],    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	62	None	replace
535	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  0,  count);  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  0,  count);	  bitsOut.write(MASKS[count],    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	62	None	replace
536	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  0,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  long  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  0,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  0,  MAXIMUM_CACHE_SIZE  -  1);	  bitsOut.write(MASKS[count],    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	62	None	replace
537	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  0,  MASKS.length);  [CE]  long  cannot  be  dereferenced  [FE]                                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  0,  MASKS.length);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  0,  MASKS.length);	  bitsOut.write(MASKS[count],    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	62	None	replace
538	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  0,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  long  cannot  be  dereferenced  [FE]                                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  0,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  0,  MAXIMUM_CACHE_SIZE  +  1);	  bitsOut.write(MASKS[count],    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	62	None	replace
539	[BUG]  [BUGGY]  bitsOut.write(MASKS[0],  0,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[0],  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[0],  0,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count],    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	62	None	replace
540	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	87	None	add
541	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	87	None	add
542	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	87	None	add
543	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	87	None	add
544	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	87	None	add
545	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	87	None	add
546	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  1  :  0;  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  1  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  1  :  0;	  	non-compiled	[CE]  unreachable  statement	87	None	add
547	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	87	None	add
548	[BUG]  [BUGGY]  return  bitsOut.length  +  2;  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  +  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  +  2;	  return    bitsOut.length    +    1;    	non-compiled	[CE]  long  cannot  be  dereferenced	221	None	replace
549	[BUG]  [BUGGY]  return  bitsOut.length  +  1L;  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  +  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  +  1L;	  return    bitsOut.length    +    1;    	non-compiled	[CE]  long  cannot  be  dereferenced	221	None	replace
550	[BUG]  [BUGGY]  return  bitsOut.length  +  3;  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  +  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  +  3;	  return    bitsOut.length    +    1;    	non-compiled	[CE]  long  cannot  be  dereferenced	221	None	replace
551	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  count;	  return    bitsOut    &    MAXIMUM_CAMCHE_SIZE;    	compilable	  [FE]  AssertionError  	322	12	replace
552	[BUG]  [BUGGY]  return  bitsOut  &  count;  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  count;	  return    bitsOut    &    MAXIMUM_CAMCHE_SIZE;    	compilable	  [FE]  AssertionError  	322	12	replace
553	[BUG]  [BUGGY]  return  bitsOut  &  MASKS_CachedSize;  [CE]  cannot  find  symbol  MASKS_CachedSize  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS_CachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS_CachedSize;	  return    bitsOut    &    MAXIMUM_CAMCHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASKS_CachedSize	322	None	replace
554	[BUG]  [BUGGY]  return  bitsOut  &  MASK_SIZE;  [CE]  cannot  find  symbol  MASK_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASK_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASK_SIZE;	  return    bitsOut    &    MAXIMUM_CAMCHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASK_SIZE	322	None	replace
555	[BUG]  [BUGGY]  return  bitsOut  &  MASKSSIZE;  [CE]  cannot  find  symbol  MASKSSIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKSSIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKSSIZE;	  return    bitsOut    &    MAXIMUM_CAMCHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASKSSIZE	322	None	replace
556	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS.length;	  return    bitsOut    &    MAXIMUM_CAMCHE_SIZE;    	compilable	  [FE]  AssertionError  	322	12	replace
557	[BUG]  [BUGGY]  return  bitsOut  &  MASKS.length;  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS.length;	  return    bitsOut    &    MAXIMUM_CAMCHE_SIZE;    	compilable	  [FE]  AssertionError  	322	12	replace
558	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	53	None	add
559	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	53	None	add
560	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	53	None	add
561	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	53	None	add
562	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	53	None	add
563	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	53	None	add
564	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	53	None	add
565	[BUG]  [BUGGY]  return  bitsOut  <  <  4  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  -  1;	  return    bitsOut    <    <    4    ||    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
566	[BUG]  [BUGGY]  return  bitsOut  <  <  2  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    ||    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
567	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	291	None	add
568	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	291	None	add
569	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  	non-compiled	[CE]  >  expected	291	None	add
570	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	291	None	add
571	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	291	None	add
572	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  ==  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  ==  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bytesCached  ==  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	291	None	add
573	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	291	None	add
574	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  <  <  1)?  this.bitsCachedSize  :  bitsOut;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  <  <  1)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bytesCached  <  <  1)?  this.bitsCachedSize  :  bitsOut;	  	non-compiled	[CE]  illegal  start  of  type	291	None	add
575	[BUG]  [BUGGY]  long  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	12	None	replace
576	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	12	None	replace
577	[BUG]  [BUGGY]  nextByteOrder  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  nextByteOrder  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  nextByteOrder  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	nextByteOrder  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  nextByteOrder	12	None	replace
578	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	12	None	replace
579	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	12	None	replace
580	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	12	None	replace
581	[BUG]  [BUGGY]  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	122	None	replace
582	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCachedSize,  bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(bytesCachedSize,  bytesCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(bytesCachedSize,  bytesCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	122	None	replace
583	[BUG]  [BUGGY]  bitsOut  +=  count;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  count;	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	15	None	replace
584	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	15	None	replace
585	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	15	None	replace
586	[BUG]  [BUGGY]  nextByteOrder  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  cannot  find  symbol  nextByteOrder  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  nextByteOrder  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	nextByteOrder  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  cannot  find  symbol  nextByteOrder	15	None	replace
587	[BUG]  [BUGGY]  bitsOut  +=  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	15	None	replace
588	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  +=  count;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  +=  count;	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	15	None	replace
589	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	15	None	replace
590	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MASKS[count]);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MASKS[count]);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	235	None	replace
591	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	235	None	replace
592	[BUG]  [BUGGY]  bitsOut  =  readBits(MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	235	None	replace
593	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  0,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  0,  count);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	235	None	replace
594	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  count))&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	234	None	replace
595	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  count))&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	234	None	replace
596	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  count))&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  count))&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  count))&  MASKS[MAXIMUM_CACHE_SIZE];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	234	None	replace
597	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS[count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS[count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MASKS[count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ']'  expected	234	None	replace
598	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (MASKS[count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (MASKS[count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (MASKS[count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ']'  expected	234	None	replace
599	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  1))  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	234	None	replace
600	[BUG]  [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	329	None	replace
601	[BUG]  [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	329	None	replace
602	[BUG]  [BUGGY]  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	329	None	replace
603	[BUG]  [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	329	None	replace
604	[BUG]  [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	329	None	replace
605	[BUG]  [BUGGY]  bitsOut  =  readBits(Math.max(0,  MAXIMUM_CACHE_SIZE));  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(Math.max(0,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(Math.max(0,  MAXIMUM_CACHE_SIZE));	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	203	None	replace
606	[BUG]  [BUGGY]  bitsOut  =  readBits(0,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(0,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	203	None	replace
607	[BUG]  [BUGGY]  bitsOut  =  readBits(Math.max(10,  MAXIMUM_CACHE_SIZE));  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(Math.max(10,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(Math.max(10,  MAXIMUM_CACHE_SIZE));	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	203	None	replace
608	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	203	None	replace
609	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(bytesCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(bytesCachedSize);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	203	None	replace
610	[BUG]  [BUGGY]  return  nextByte.toByteArray();  [CE]  cannot  find  symbol  nextByte  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  nextByte.toByteArray();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  nextByte.toByteArray();	  return    in.toByteArray();    	non-compiled	[CE]  cannot  find  symbol  nextByte	192	None	replace
611	[BUG]  [BUGGY]  return  in.toByteArray()  &&  bitsOut.length()  >  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.toByteArray()  &&  bitsOut.length()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.toByteArray()  &&  bitsOut.length()  >  MAXIMUM_CACHE_SIZE;	  return    in.toByteArray();    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
612	[BUG]  [BUGGY]  return  in.toByteArray()  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.toByteArray()  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.toByteArray()  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;	  return    in.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
613	[BUG]  [BUGGY]  return  in.toByteArray()  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.toByteArray()  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.toByteArray()  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    in.toByteArray();    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
614	[BUG]  [BUGGY]  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	209	None	replace
615	[BUG]  [BUGGY]  bitsOut  =  ByteOrder.readBits(Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  ByteOrder.readBits(Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  ByteOrder.readBits(Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	209	None	replace
616	[BUG]  [BUGGY]  int  count  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	209	None	replace
617	[BUG]  [BUGGY]  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  count);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	209	None	replace
618	[BUG]  [BUGGY]  bitsOut  =  ByteOrder.readBits(MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  ByteOrder.readBits(MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  ByteOrder.readBits(MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	209	None	replace
619	[BUG]  [BUGGY]  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MASKS[count]);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MASKS[count]);	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	209	None	replace
620	[BUG]  [BUGGY]  bitsOut  =  ByteOrder.readBits(Math.max(MAXIMUM_CACHE_SIZE),  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  max(int)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  ByteOrder.readBits(Math.max(MAXIMUM_CACHE_SIZE),  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  ByteOrder.readBits(Math.max(MAXIMUM_CACHE_SIZE),  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  max(int)	209	None	replace
621	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  /  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  MAXIMUM_CACHE_SIZE  /  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    	compilable	  [FE]  AssertionError  	52	12	replace
622	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  /  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  /  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  /  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    	compilable	  [FE]  AssertionError  	52	12	replace
623	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  /  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    	compilable	  [FE]  AssertionError  	52	12	replace
624	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    	compilable	  [FE]  AssertionError  	52	12	replace
625	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1L;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    	compilable	  [FE]  AssertionError  	52	12	replace
626	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1L;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1L;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    	compilable	  [FE]  AssertionError  	52	12	replace
627	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  /  2;	  return    bitsOut    *    2;    	compilable	  [FE]  AssertionError  	56	12	replace
628	[BUG]  [BUGGY]  return  bitsOut  /  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  2;	  return    bitsOut    *    2;    	compilable	  [FE]  AssertionError  	56	12	replace
629	[BUG]  [BUGGY]  return  bitsOut.length  /  2;  [CE]  long  cannot  be  dereferenced  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  /  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  /  2;	  return    bitsOut    *    2;    	non-compiled	[CE]  long  cannot  be  dereferenced	56	None	replace
630	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  2  +  1;	  return    bitsOut    *    2;    	compilable	  [FE]  AssertionError  	56	12	replace
631	[BUG]  [BUGGY]  return  bitsOut  *  2  +  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  2  +  1;	  return    bitsOut    *    2;    	compilable	  [FE]  AssertionError  	56	12	replace
632	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE,  bitsCachedSize.length;  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE,  bitsCachedSize.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE,  bitsCachedSize.length;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE.length;    	non-compiled	[CE]  ';'  expected	93	None	replace
633	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  count;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE.length;    	compilable	  [FE]  AssertionError  	93	12	replace
634	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  count;  [FE]  AssertionError  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  count;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE.length;    	compilable	  [FE]  AssertionError  	93	12	replace
635	[BUG]  [BUGGY]  return  bitsOut  &  count.length;  [CE]  int  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  count.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  count.length;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	93	None	replace
636	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE.length;  [CE]  int  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE.length;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	93	None	replace
637	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  *  bitsCachedSize.length;  [CE]  int  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  *  bitsCachedSize.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  *  bitsCachedSize.length;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	93	None	replace
638	[BUG]  [BUGGY]  return  bitsOut  <  <  0?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  0?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  0?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    8?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
639	[BUG]  [BUGGY]  return  bitsOut  <  <  16?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  16?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  16?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    8?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
640	[BUG]  [BUGGY]  bitsOut  =(bytesCached!=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached!=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached!=  (bitsCachedSize  -  1))  &  MASKS[count];	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    1))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  bytesCached	7	None	replace
641	[BUG]  [BUGGY]  bitsOut  =(bytesCached  [Delete]  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  [Delete]  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  [Delete]  (bitsCachedSize  -  1))  &  MASKS[count];	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    1))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	7	None	replace
642	[BUG]  [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.read(bitsOut);  [CE]  no  suitable  method  found  for  read(long)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.read(bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.read(bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.read(bitsOut);    	non-compiled	[CE]  no  suitable  method  found  for  read(long)	217	None	replace
643	[BUG]  [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.read(bitsOut,  count);  [CE]  no  suitable  method  found  for  read(long,int)  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.read(bitsOut,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.read(bitsOut,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.read(bitsOut);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	217	None	replace
644	[BUG]  [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.read(bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.read(bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.read(bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.read(bitsOut);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	217	None	replace
645	[BUG]  [BUGGY]  in.read(bitsOut);  [CE]  no  suitable  method  found  for  read(long)  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in.read(bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in.read(bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.read(bitsOut);    	non-compiled	[CE]  no  suitable  method  found  for  read(long)	217	None	replace
646	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  in.read(bitsOut);  [CE]  no  suitable  method  found  for  read(long)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  in.read(bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  in.read(bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.read(bitsOut);    	non-compiled	[CE]  no  suitable  method  found  for  read(long)	217	None	replace
647	[BUG]  [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.read(bitsCachedSize,  bitsOut);  [CE]  no  suitable  method  found  for  read(int,long)  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.read(bitsCachedSize,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *=  MAXIMUM_CACHE_SIZE;  in.read(bitsCachedSize,  bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.read(bitsOut);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,long)	217	None	replace
648	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsOut,  count);  [CE]  no  suitable  method  found  for  read(long,int)  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsOut,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsOut,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.read(bitsOut);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	217	None	replace
649	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	257	None	replace
650	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	257	None	replace
651	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	257	None	replace
652	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	257	None	replace
653	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	257	None	replace
654	[BUG]  [BUGGY]  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	257	None	replace
655	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  1]  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  1]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  1]  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	257	None	replace
656	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	99	None	add
657	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	99	None	add
658	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	99	None	add
659	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
660	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
661	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	99	None	add
662	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	99	None	add
663	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	99	None	add
664	[BUG]  [BUGGY]  returns  bitsOut  -  MAXIMUM_CACHE_SIZE;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  returns  bitsOut  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	returns  bitsOut  -  MAXIMUM_CACHE_SIZE;	  returns    bitsOut    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	91	None	replace
665	[BUG]  [BUGGY]  returns  bitsOut  &  MAXIMUM_CACHE_SIZE  +  1;  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  returns  bitsOut  &  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	returns  bitsOut  &  MAXIMUM_CACHE_SIZE  +  1;	  returns    bitsOut    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	91	None	replace
666	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  1;	  returns    bitsOut    &    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	91	12	replace
667	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  1;  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  1;	  returns    bitsOut    &    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	91	12	replace
668	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	331	None	replace
669	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE  +  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	331	None	replace
670	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	331	None	replace
671	[BUG]  [BUGGY]  bitsOut  -=(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	331	None	replace
672	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE,  count);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	331	None	replace
673	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }	  return    bitsOut    -    1;    bitsOut    -    1;    	non-compiled	[CE]  not  a  statement	334	None	replace
674	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S	  return    bitsOut    -    1;    bitsOut    -    1;    	non-compiled	[CE]  not  a  statement	334	None	replace
675	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)];  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)];  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)];  }	  return    bitsOut    -    1;    bitsOut    -    1;    	non-compiled	[CE]  not  a  statement	334	None	replace
676	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  Integer.toString(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  Integer.toString(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  Integer.toString(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S	  return    bitsOut    -    1;    bitsOut    -    1;    	non-compiled	[CE]  not  a  statement	334	None	replace
677	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  }	  return    bitsOut    -    1;    bitsOut    -    1;    	non-compiled	[CE]  not  a  statement	334	None	replace
678	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder.MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder.MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder.MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(byteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	83	None	replace
679	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder.byteSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  byteSize  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder.byteSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder.byteSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(byteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  byteSize	83	None	replace
680	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder.byteValue(),  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder.byteValue(),  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder.byteValue(),  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(byteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
681	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder.byteByte,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  byteByte  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder.byteByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder.byteByte,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(byteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  byteByte	83	None	replace
682	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut.read(byteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	83	None	replace
683	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  count);  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.FIELD_SIZE,  count);	  bitsOut.write(ByteOrder.FIELD_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	207	None	replace
684	[BUG]  [BUGGY]  bitsOut.write(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(ByteOrder.FIELD_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	207	None	replace
685	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.FIELD_SIZE,  MAXIMUM_CACHE_SIZE  +  1);	  bitsOut.write(ByteOrder.FIELD_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	207	None	replace
686	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  MASKS[count]);  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]                                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.FIELD_SIZE,  MASKS[count]);	  bitsOut.write(ByteOrder.FIELD_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	207	None	replace
687	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]                                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.FIELD_SIZE,  MAXIMUM_CACHE_SIZE  -  1);	  bitsOut.write(ByteOrder.FIELD_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	207	None	replace
688	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	41	None	add
689	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	41	None	add
690	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	41	None	add
691	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
692	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	41	None	add
693	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	41	None	add
694	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	41	None	add
695	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	41	None	add
696	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	200	None	replace
697	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	200	None	replace
698	[BUG]  [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	200	None	replace
699	[BUG]  [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	200	None	replace
700	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	200	None	replace
701	[BUG]  [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	200	None	replace
702	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
703	[BUG]  [BUGGY]  return(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
704	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
705	[BUG]  [BUGGY]  return(this.bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
706	[BUG]  [BUGGY]  return(bitsCachedSize  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	143	None	replace
707	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
708	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
709	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
710	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
711	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
712	[BUG]  [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  <  4)?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
713	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
714	[BUG]  [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
715	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	289	None	add
716	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bitsCached  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  	non-compiled	[CE]  unreachable  statement	289	None	add
717	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	289	None	add
718	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  	non-compiled	[CE]  >  expected	289	None	add
719	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	289	None	add
720	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	289	None	add
721	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  ==  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  ==  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bytesCached  ==  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	289	None	add
722	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	289	None	add
723	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  +  1],  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  +  1],  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  +  1],  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count    +    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	64	None	replace
724	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  +  1]  &  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  +  1]  &  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  +  1]  &  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count    +    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	64	None	replace
725	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  +  1]  -  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  +  1]  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  +  1]  -  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count    +    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	64	None	replace
726	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  +  1],  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  +  1],  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  +  1],  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count    +    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	64	None	replace
727	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE]);  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE]);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	60	None	replace
728	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  count);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  count);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	60	None	replace
729	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE  +  1]);  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE  +  1]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE  +  1]);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	60	None	replace
730	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  MASK_SIZE);  [CE]  cannot  find  symbol  MASK_SIZE  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  MASK_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  MASK_SIZE);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MASK_SIZE	60	None	replace
731	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE  +  1);  [CE]  ']'  expected  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE  +  1);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ']'  expected	60	None	replace
732	[BUG]  [BUGGY]  return  bitsOut.length  -(count  -  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(count  -  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(count  -  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	269	None	replace
733	[BUG]  [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  1));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bitsCachedSize  -  1));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	269	None	replace
734	[BUG]  [BUGGY]  return  bitsOut.length  -(bitsCachedSize  /  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bitsCachedSize  /  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bitsCachedSize  /  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	269	None	replace
735	[BUG]  [BUGGY]  return  bitsOut.length  -(bytesCachedSize  -  1));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bytesCachedSize  -  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bytesCachedSize  -  1));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	269	None	replace
736	[BUG]  [BUGGY]  return  bitsOut.length  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	269	None	replace
737	[BUG]  [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  count));  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  count));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bitsCachedSize  -  count));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	269	None	replace
738	[BUG]  [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  2));  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  2));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bitsCachedSize  -  2));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	269	None	replace
739	[BUG]  [BUGGY]  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	283	None	replace
740	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  possible  loss  of  precision	283	None	replace
741	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  unreachable  statement	283	None	replace
742	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  short  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  short  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  short  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  possible  loss  of  precision	283	None	replace
743	[BUG]  [BUGGY]  short  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  short  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	short  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  possible  loss  of  precision	283	None	replace
744	[BUG]  [BUGGY]  bitsOut  -=  in.readInt();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    in.readInt();    	non-compiled	[CE]  cannot  find  symbol	332	None	replace
745	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    in.readInt();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	332	None	replace
746	[BUG]  [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  count);  bitsOut  -=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  count);  bitsOut  -=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  count);  bitsOut  -=  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    in.readInt();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	332	None	replace
747	[BUG]  [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  -=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  -=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  -=  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    in.readInt();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	332	None	replace
748	[BUG]  [BUGGY]  in  =  readBits(MAXIMUM_CACHE_SIZE,  count);  bitsOut  -=  in.readInt();  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(MAXIMUM_CACHE_SIZE,  count);  bitsOut  -=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(MAXIMUM_CACHE_SIZE,  count);  bitsOut  -=  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    in.readInt();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	332	None	replace
749	[BUG]  [BUGGY]  BitInputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  BitInputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	BitInputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    in.readInt();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	332	None	replace
750	[BUG]  [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  -=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  -=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  -=  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    in.readInt();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	332	None	replace
751	[BUG]  [BUGGY]  Integer  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	109	None	replace
752	[BUG]  [BUGGY]  int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	313	None	replace
753	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	140	None	add
754	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	140	None	add
755	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	140	None	add
756	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	140	None	add
757	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  <  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  <  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  <  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  illegal  start  of  type	140	None	add
758	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	140	None	add
759	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	140	None	add
760	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  1]  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  1]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  1]  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	140	None	add
761	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  >  MAXIMUM_CACHE_SIZE  +  1;  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  >  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  >  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut.toByteArray()    &&    count    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	126	None	replace
762	[BUG]  [BUGGY]  long  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsOut,    bitsCachedSize);    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	286	None	replace
763	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  count);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsOut,    bitsCachedSize);    	non-compiled	[CE]  possible  loss  of  precision	286	None	replace
764	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsOut,    bitsCachedSize);    	non-compiled	[CE]  unreachable  statement	286	None	replace
765	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  short  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  short  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  short  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsOut,    bitsCachedSize);    	non-compiled	[CE]  possible  loss  of  precision	286	None	replace
766	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  bitsOut);  [CE]  possible  loss  of  precision  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsOut,    bitsCachedSize);    	non-compiled	[CE]  possible  loss  of  precision	286	None	replace
767	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [CE]  possible  loss  of  precision  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsOut,    bitsCachedSize);    	non-compiled	[CE]  possible  loss  of  precision	286	None	replace
768	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE  *  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  /  MAXIMUM_CACHE_SIZE  *  2;	  return    bitsOut    /    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	48	12	replace
769	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE  *  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE  *  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  MAXIMUM_CACHE_SIZE  *  2;	  return    bitsOut    /    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	48	12	replace
770	[BUG]  [BUGGY]  if(in.skipChildren())  {  return  this.bitsCachedSize;  in.skipChildren();  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(in.skipChildren())  {  return  this.bitsCachedSize;  in.skipChildren();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(in.skipChildren())  {  return  this.bitsCachedSize;  in.skipChildren();  }	  return    this.bitsCachedSize;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
771	[BUG]  [BUGGY]  if(in.skipChildren())  {  return  this.bitsCachedSize;  }  else  {  in.skipChildren();  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(in.skipChildren())  {  return  this.bitsCachedSize;  }  else  {  in.skipChildren();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(in.skipChildren())  {  return  this.bitsCachedSize;  }  else  {  in.skipChildren();  }	  return    this.bitsCachedSize;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
772	[BUG]  [BUGGY]  if(in.skipChildren())  {  return  this.bitsCachedSize;  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(in.skipChildren())  {  return  this.bitsCachedSize;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(in.skipChildren())  {  return  this.bitsCachedSize;  }	  return    this.bitsCachedSize;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
773	[BUG]  [BUGGY]  InputStream  in  =  this.bitsCachedSize;  in.skipChildren();  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  this.bitsCachedSize;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  this.bitsCachedSize;  in.skipChildren();	  return    this.bitsCachedSize;    in.skipChildren();    	non-compiled	[CE]  incompatible  types	112	None	replace
774	[BUG]  [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    +=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	315	None	replace
775	[BUG]  [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    +=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	315	None	replace
776	[BUG]  [BUGGY]  bitsOut  +=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    +=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	315	None	replace
777	[BUG]  [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  0)+  1;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  0)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  Math.max(bitsCachedSize,  0)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    +=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	315	None	replace
778	[BUG]  [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  MASKS[count])+  1;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  MASKS[count])+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  Math.max(bitsCachedSize,  MASKS[count])+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    +=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	315	None	replace
779	[BUG]  [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    +=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	315	None	replace
780	[BUG]  [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  0);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  0);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  Math.max(bitsCachedSize,  0);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    +=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	315	None	replace
781	[BUG]  [BUGGY]  return(bitsOut  <  <  4)?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  <  4)?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  <  4)?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsCachedSize    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	264	None	replace
782	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    <    <    4?    bitsCachedSize    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	264	None	replace
783	[BUG]  [BUGGY]  return  bitsOut  <  <  1?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsCachedSize    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	264	None	replace
784	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    <    <    4?    bitsCachedSize    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	264	None	replace
785	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  count);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut    <    <    4?    bitsCachedSize    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	264	None	replace
786	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  count);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  count);	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	127	None	replace
787	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	127	None	replace
788	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  1);  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  1);	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	127	None	replace
789	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE  +  1);  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	127	None	replace
790	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  2);  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  2);	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	127	None	replace
791	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE  +  1;  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	127	None	replace
792	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  10);  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  10);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  10);	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	127	None	replace
793	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	284	None	replace
794	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MINIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MINIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MINIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	284	None	replace
795	[BUG]  [BUGGY]  return  bitsOut  *  2;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  2;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	284	None	replace
796	[BUG]  [BUGGY]  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	284	None	replace
797	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MINIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MINIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MINIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	284	None	replace
798	[BUG]  [BUGGY]  return  bitsOut  *  MASKS_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MASKS_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MASKS_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	284	None	replace
799	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	148	None	add
800	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	148	None	add
801	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	148	None	add
802	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	148	None	add
803	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	148	None	add
804	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  this.bitsCachedSize  :  1;  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  this.bitsCachedSize  :  1;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	148	None	add
805	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  int  MAXIMUM_CACHE_SIZE  =  this.bitsCachedSize;  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  int  MAXIMUM_CACHE_SIZE  =  this.bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    int  MAXIMUM_CACHE_SIZE  =  this.bitsCachedSize;	  	non-compiled	[CE]  unreachable  statement	148	None	add
806	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  int  MAXIMUM_CACHE_SIZE  =  this.bitsCachedSize  -  1;  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  int  MAXIMUM_CACHE_SIZE  =  this.bitsCachedSize  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    int  MAXIMUM_CACHE_SIZE  =  this.bitsCachedSize  -  1;	  	non-compiled	[CE]  unreachable  statement	148	None	add
807	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  *  MAXIMUM_CACHE_SIZE);  [CE]  ')'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    *    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	179	None	replace
808	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  *  MAXIMUM_CACHE_SIZE));  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  *  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  *  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length    -(bitsCachedSize    *    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	179	None	replace
809	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.abs(bitsCachedSize  *  MAXIMUM_CACHE_SIZE));  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.abs(bitsCachedSize  *  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.abs(bitsCachedSize  *  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length    -(bitsCachedSize    *    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	179	None	replace
810	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	314	None	replace
811	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	314	None	replace
812	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  1;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	314	None	replace
813	[BUG]  [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	314	None	replace
814	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count])+  1;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count])+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count])+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  possible  loss  of  precision	314	None	replace
815	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	314	None	replace
816	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	137	12	replace
817	[BUG]  [BUGGY]  return(this.bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	137	12	replace
818	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	137	12	replace
819	[BUG]  [BUGGY]  return(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	137	12	replace
820	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	137	12	replace
821	[BUG]  [BUGGY]  return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	137	12	replace
822	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  0)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >  0)?  this.bitsCachedSize  :  0;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	137	12	replace
823	[BUG]  [BUGGY]  return(bitsOut  >  0)?  this.bitsCachedSize  :  0;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  0)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >  0)?  this.bitsCachedSize  :  0;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	137	12	replace
824	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	37	None	add
825	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	37	None	add
826	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	37	None	add
827	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	37	None	add
828	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	37	None	add
829	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	37	None	add
830	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
831	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	37	None	add
832	[BUG]  [BUGGY]  while(in.skipChildren())  {  return  bitsOut  -  1;  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(in.skipChildren())  {  return  bitsOut  -  1;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(in.skipChildren())  {  return  bitsOut  -  1;  }	  return    bitsOut    -    1;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
833	[BUG]  [BUGGY]  bitsOut  -=  in.skipChildren();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  in.skipChildren();	  return    bitsOut    -    1;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
834	[BUG]  [BUGGY]  while(in.skipChildren())  {  bitsOut  -=  in.skipChildren();  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(in.skipChildren())  {  bitsOut  -=  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(in.skipChildren())  {  bitsOut  -=  in.skipChildren();	  return    bitsOut    -    1;    in.skipChildren();    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
835	[BUG]  [BUGGY]  while(in.skipChildren())  {  return  bitsOut  -  1;  in.skipChildren();  }  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(in.skipChildren())  {  return  bitsOut  -  1;  in.skipChildren();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(in.skipChildren())  {  return  bitsOut  -  1;  in.skipChildren();  }	  return    bitsOut    -    1;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
836	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  MASKS[count]);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(byteOrder,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(byteOrder,  MASKS[count]);	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	165	None	replace
837	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  1L  +  1;	  return    bitsOut    -    1L;    	compilable	  [FE]  AssertionError  	151	2	replace
838	[BUG]  [BUGGY]  return  bitsOut  -  1L  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1L  +  1;	  return    bitsOut    -    1L;    	compilable	  [FE]  AssertionError  	151	2	replace
839	[BUG]  [BUGGY]  return  bitsOut  -  1L  }  ;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L  }  ;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1L  }  ;	  return    bitsOut    -    1L;    	non-compiled	[CE]  ';'  expected	151	None	replace
840	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  /  1L;	  return    bitsOut    -    1L;    	compilable	  [FE]  AssertionError  	151	2	replace
841	[BUG]  [BUGGY]  return  bitsOut  /  1L;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  1L;	  return    bitsOut    -    1L;    	compilable	  [FE]  AssertionError  	151	2	replace
842	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L  +  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  1L  +  1L;	  return    bitsOut    -    1L;    	compilable	  [FE]  AssertionError  	151	2	replace
843	[BUG]  [BUGGY]  return  bitsOut  -  1L  +  1L;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L  +  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1L  +  1L;	  return    bitsOut    -    1L;    	compilable	  [FE]  AssertionError  	151	2	replace
844	[BUG]  [BUGGY]  return  bitsOut  -  1L  <  <  2;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L  <  <  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1L  <  <  2;	  return    bitsOut    -    1L;    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
845	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	141	12	replace
846	[BUG]  [BUGGY]  return(this.bitsCachedSize  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	141	12	replace
847	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsCachedSize  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	141	12	replace
848	[BUG]  [BUGGY]  return(bitsCachedSize  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	141	12	replace
849	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
850	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  count);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
851	[BUG]  [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  <  4)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
852	[BUG]  [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
853	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	215	None	replace
854	[BUG]  [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *=  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	215	None	replace
855	[BUG]  [BUGGY]  long  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	215	None	replace
856	[BUG]  [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	215	None	replace
857	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MASKS_SIZE);  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MASKS_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MASKS_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	215	None	replace
858	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	215	None	replace
859	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	6	None	replace
860	[BUG]  [BUGGY]  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	6	None	replace
861	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	6	None	replace
862	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  maxIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  maxIMUM_CACHE_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  maxIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder,  maxIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  maxIMUM_CACHE_SIZE	6	None	replace
863	[BUG]  [BUGGY]  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	237	None	replace
864	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	237	None	replace
865	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	237	None	replace
866	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	146	None	add
867	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	146	None	add
868	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	146	None	add
869	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	146	None	add
870	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  <  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  <  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  <  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  illegal  start  of  type	146	None	add
871	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	146	None	add
872	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	146	None	add
873	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	146	None	add
874	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  1)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  <  <  1)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  <  <  1)&  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
875	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  bytesCached	14	None	replace
876	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  1)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  <  <  1)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  <  <  1)&  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
877	[BUG]  [BUGGY]  bitsOut  =(bytesCached  +  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  +  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  +  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  bytesCached	14	None	replace
878	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  >  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  >  expected	14	None	replace
879	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  6)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  <  <  6)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  <  <  6)&  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
880	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  6)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  <  <  6)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  <  <  6)&  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
881	[BUG]  [BUGGY]  bitsOut.read(bytes,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytes  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.read(bytes,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.read(bytes,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytes	208	None	replace
882	[BUG]  [BUGGY]  bitsOut.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	208	None	replace
883	[BUG]  [BUGGY]  in.read(bitsOut,  count);  [CE]  no  suitable  method  found  for  read(long,int)  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in.read(bitsOut,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in.read(bitsOut,  count);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	208	None	replace
884	[BUG]  [BUGGY]  bitsOut.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	208	None	replace
885	[BUG]  [BUGGY]  bitsOut.read(bits,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bits  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.read(bits,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.read(bits,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bits	208	None	replace
886	[BUG]  [BUGGY]  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	208	None	replace
887	[BUG]  [BUGGY]  bitsOut.read(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.read(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.read(bitsCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	208	None	replace
888	[BUG]  [BUGGY]  return  bitsOut  &&  count  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &&  count  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &&  count  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	232	None	replace
889	[BUG]  [BUGGY]  return  count  >  MAXIMUM_CACHE_SIZE  &&  bitsOut  >  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  count  >  MAXIMUM_CACHE_SIZE  &&  bitsOut  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  count  >  MAXIMUM_CACHE_SIZE  &&  bitsOut  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	232	None	replace
890	[BUG]  [BUGGY]  return  bitsOut  ||  count  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  ||  count  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  ||  count  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	232	None	replace
891	[BUG]  [BUGGY]  return  bitsOut  >  MAXIMUM_CACHE_SIZE  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  >  MAXIMUM_CACHE_SIZE  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  >  MAXIMUM_CACHE_SIZE  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	232	None	replace
892	[BUG]  [BUGGY]  bitsOut  &&  count  >  MAXIMUM_CACHE_SIZE;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &&  count  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &&  count  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  not  a  statement	232	None	replace
893	[BUG]  [BUGGY]  return  bitsOut  >  MAXIMUM_CACHE_SIZE  &&  count  >  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  >  MAXIMUM_CACHE_SIZE  &&  count  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  >  MAXIMUM_CACHE_SIZE  &&  count  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	232	None	replace
894	[BUG]  [BUGGY]  return  bitsOut  -  count  >  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  count  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  count  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	232	None	replace
895	[BUG]  [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	265	None	replace
896	[BUG]  [BUGGY]  return  bitsOut  -  1?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	265	None	replace
897	[BUG]  [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  count);  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut    -    1?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	265	None	replace
898	[BUG]  [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bytesCached  <  MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bytesCached  <  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1?  bitsOut  :(bytesCached  <  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	265	None	replace
899	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsCachedSize  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
900	[BUG]  [BUGGY]  return(bitsCachedSize  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
901	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
902	[BUG]  [BUGGY]  return(this.bitsCachedSize  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
903	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  ==  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  ==  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	10	replace
904	[BUG]  [BUGGY]  return(this.bitsCachedSize  ==  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  ==  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  ==  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	10	replace
905	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
906	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
907	[BUG]  [BUGGY]  return(this.bitsCachedSize  ==  0)?  this.bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bitsOut  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  ==  0)?  this.bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  ==  0)?  this.bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bitsOut	188	None	replace
908	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  ==  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
909	[BUG]  [BUGGY]  return(bitsOut  ==  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  ==  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
910	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	13	None	replace
911	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	13	None	replace
912	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCachedSize  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCachedSize  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	13	None	replace
913	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCachedSize  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCachedSize  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	13	None	replace
914	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  bitsOut.length;  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  bitsOut.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  bitsOut.length;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  long  cannot  be  dereferenced	277	None	replace
915	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  missing  return  statement	277	None	replace
916	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  int  MAXIMUM_CACHE_SIZE  =  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  int  MAXIMUM_CACHE_SIZE  =  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  int  MAXIMUM_CACHE_SIZE  =  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  unreachable  statement	277	None	replace
917	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;  [CE]  unreachable  statement  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  unreachable  statement	277	None	replace
918	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  ByteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  ByteOrder.LITTLE_ENDIAN;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  incompatible  types	277	None	replace
919	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;  [CE]  unreachable  statement  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  unreachable  statement	277	None	replace
920	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  ByteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  ByteOrder.LITTLE_ENDIAN;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  incompatible  types	277	None	replace
921	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  count;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  count;	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	193	None	replace
922	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  0,  MAXIMUM_CACHE_SIZE;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  0,  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  0,  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	193	None	replace
923	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  1;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  1;	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	193	None	replace
924	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  2;  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  2;	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	193	None	replace
925	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  10;  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  10;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  10;	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	193	None	replace
926	[BUG]  [BUGGY]  return  bitsOut  &(count  >  MAXIMUM_CACHE_SIZE);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &(count  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &(count  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	266	None	replace
927	[BUG]  [BUGGY]  return  bitsOut  &(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	266	None	replace
928	[BUG]  [BUGGY]  return  bitsOut  &(bytesCachedSize  >  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &(bytesCachedSize  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &(bytesCachedSize  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	266	None	replace
929	[BUG]  [BUGGY]  return  bitsOut  &(bitsCached  >  MAXIMUM_CACHE_SIZE);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &(bitsCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &(bitsCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	266	None	replace
930	[BUG]  [BUGGY]  return  bitsOut  &(ByteOrder.LITTLE_ENDIAN  >  MAXIMUM_CACHE_SIZE);  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &(ByteOrder.LITTLE_ENDIAN  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &(ByteOrder.LITTLE_ENDIAN  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	266	None	replace
931	[BUG]  [BUGGY]  return  bitsOut  &(size  >  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  size  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &(size  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &(size  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  size	266	None	replace
932	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
933	[BUG]  [BUGGY]  return(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
934	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
935	[BUG]  [BUGGY]  return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
936	[BUG]  [BUGGY]  return(bitsOut  <  =  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  =  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  =  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
937	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
938	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
939	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
940	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
941	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
942	[BUG]  [BUGGY]  return(bitsOut  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
943	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  2;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
944	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  2;  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  2;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
945	[BUG]  [BUGGY]  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    new    InputStreamReader(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	294	None	replace
946	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    new    InputStreamReader(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	294	None	replace
947	[BUG]  [BUGGY]  bitsOut  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    new    InputStreamReader(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	294	None	replace
948	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    this.bitsCachedSize;    InputStream    in    =    new    InputStreamReader(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	294	None	replace
949	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    new    InputStreamReader(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	294	None	replace
950	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  count,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder,  count,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	212	None	replace
951	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  count  -  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder,  count  -  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	212	None	replace
952	[BUG]  [BUGGY]  in  =  readBits(byteOrder,  count,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(byteOrder,  count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(byteOrder,  count,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	212	None	replace
953	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1],  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1],  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1],  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count    -    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	59	None	replace
954	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1]  +  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1]  +  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1]  +  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count    -    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	59	None	replace
955	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1],  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1],  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1],  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count    -    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	59	None	replace
956	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE]);  [CE]  ']'  expected  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE]);	  bitsOut.write(MASKS[count    -    1]);    	non-compiled	[CE]  ']'  expected	59	None	replace
957	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  2]);  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  2]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  2]);	  bitsOut.write(MASKS[count    -    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	59	None	replace
958	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count  *  2  +  1];	  return    bitsOut    &    MASKS[count    *    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	288	2	replace
959	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  *  2  +  1];	  return    bitsOut    &    MASKS[count    *    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	288	2	replace
960	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  3];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count  *  3];	  return    bitsOut    &    MASKS[count    *    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	288	9	replace
961	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  3];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  *  3];	  return    bitsOut    &    MASKS[count    *    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	288	9	replace
962	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  /  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count  /  2];	  return    bitsOut    &    MASKS[count    *    2];    	compilable	  [FE]  AssertionError  	288	12	replace
963	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  /  2];  [FE]  AssertionError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  /  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  /  2];	  return    bitsOut    &    MASKS[count    *    2];    	compilable	  [FE]  AssertionError  	288	12	replace
964	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  4];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count  *  4];	  return    bitsOut    &    MASKS[count    *    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	288	11	replace
965	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  4];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  4];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  *  4];	  return    bitsOut    &    MASKS[count    *    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	288	11	replace
966	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE  +  1));  [CE]  ']'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE  +  1));	  bitsOut.write(MASKS[count    -    1,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ']'  expected	61	None	replace
967	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1,  count));  [CE]  ']'  expected  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1,  count));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1,  count));	  bitsOut.write(MASKS[count    -    1,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ']'  expected	61	None	replace
968	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE  -  1));  [CE]  ']'  expected  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE  -  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE  -  1));	  bitsOut.write(MASKS[count    -    1,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ']'  expected	61	None	replace
969	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  +  1,  MAXIMUM_CACHE_SIZE));  [CE]  ']'  expected  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  +  1,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  +  1,  MAXIMUM_CACHE_SIZE));	  bitsOut.write(MASKS[count    -    1,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ']'  expected	61	None	replace
970	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE,  bitsCachedSize));  [CE]  ']'  expected  [FE]                                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE,  bitsCachedSize));	  bitsOut.write(MASKS[count    -    1,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ']'  expected	61	None	replace
971	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1,  BYTE_SIZE));  [CE]  ']'  expected  [FE]                                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1,  BYTE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1,  BYTE_SIZE));	  bitsOut.write(MASKS[count    -    1,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ']'  expected	61	None	replace
972	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE  +  1]);  [CE]  ']'  expected  [FE]                                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE  +  1]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1,  MAXIMUM_CACHE_SIZE  +  1]);	  bitsOut.write(MASKS[count    -    1,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ']'  expected	61	None	replace
973	[BUG]  [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	117	None	replace
974	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  MASKS_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(byteOrder,  MASKS_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(byteOrder,  MASKS_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	117	None	replace
975	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	325	12	replace
976	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	325	12	replace
977	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(2,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(2,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	325	12	replace
978	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(2,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(2,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(2,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	325	12	replace
979	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  count);  [CE]  no  suitable  method  found  for  min(ByteOrder,int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  count);	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  min(ByteOrder,int)	325	None	replace
980	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS,  count);  [CE]  no  suitable  method  found  for  min(long[],int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS,  count);	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  min(long[],int)	325	None	replace
981	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	245	None	replace
982	[BUG]  [BUGGY]  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	245	None	replace
983	[BUG]  [BUGGY]  bitsOut  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	245	None	replace
984	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCached,  0);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bitsCached,  0);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bitsCached,  0);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	245	None	replace
985	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
986	[BUG]  [BUGGY]  return(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
987	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
988	[BUG]  [BUGGY]  return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
989	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
990	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  0;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
991	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  bitsOut  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  bitsOut  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
992	[BUG]  [BUGGY]  return(this.bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  bitsOut  :  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  bitsOut  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  bitsOut  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
993	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  possible  loss  of  precision	199	None	replace
994	[BUG]  [BUGGY]  long  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	199	None	replace
995	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	199	None	replace
996	[BUG]  [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	199	None	replace
997	[BUG]  [BUGGY]  long  count  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  count  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  count  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	199	None	replace
998	[BUG]  [BUGGY]  return  in.read(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(ByteOrder,int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  read(ByteOrder,int)	228	None	replace
999	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder,  count);  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder,  count);	  return    bitsOut.read(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	228	None	replace
1000	[BUG]  [BUGGY]  return  readBitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  readBitsOut  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  readBitsOut	228	None	replace
1001	[BUG]  [BUGGY]  return  readBitsInt(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBitsInt(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBitsInt(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	228	None	replace
1002	[BUG]  [BUGGY]  return  readBits.read(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  readBits  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits.read(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits.read(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  readBits	228	None	replace
1003	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  /  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  /  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  /  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	301	None	replace
1004	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  -  count;  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  -  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  -  count;	  return    bitsOut.toByteArray()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	301	None	replace
1005	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  -  1;  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  -  1;	  return    bitsOut.toByteArray()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	301	None	replace
1006	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  -  MAXIMUM_CACHE_SIZE  +  1;  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  -  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  -  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut.toByteArray()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	301	None	replace
1007	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  -(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  -(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  -(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);	  return    bitsOut.toByteArray()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	301	None	replace
1008	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  *  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	301	None	replace
1009	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCached  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCached	8	None	replace
1010	[BUG]  [BUGGY]  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	8	None	replace
1011	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCached,  bytesCachedSize);  [CE]  cannot  find  symbol  bytesCached  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(bytesCached,  bytesCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(bytesCached,  bytesCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCached	8	None	replace
1012	[BUG]  [BUGGY]  return  in  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	8	None	replace
1013	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCached,  count);  [CE]  cannot  find  symbol  bytesCached  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(bytesCached,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(bytesCached,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCached	8	None	replace
1014	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCached,  byteOrder.MINIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCached  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(bytesCached,  byteOrder.MINIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(bytesCached,  byteOrder.MINIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCached	8	None	replace
1015	[BUG]  [BUGGY]  in  =  readBits(bytesCached,  bytesCachedSize);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(bytesCached,  bytesCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(bytesCached,  bytesCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	8	None	replace
1016	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	201	None	replace
1017	[BUG]  [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	201	None	replace
1018	[BUG]  [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	201	None	replace
1019	[BUG]  [BUGGY]  bitsOut.write(MASK_SIZE,  count);  [CE]  cannot  find  symbol  MASK_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASK_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASK_SIZE,  count);	  bitsOut.write(MASK_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MASK_SIZE	318	None	replace
1020	[BUG]  [BUGGY]  bitsOut.write(MASKS,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASK_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	318	None	replace
1021	[BUG]  [BUGGY]  bitsOut.write(MASKS,  MASK_SIZE);  [CE]  cannot  find  symbol  MASK_SIZE  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS,  MASK_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS,  MASK_SIZE);	  bitsOut.write(MASK_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MASK_SIZE	318	None	replace
1022	[BUG]  [BUGGY]  bitsOut.write(MASK_SIZE,  MASKS);  [CE]  cannot  find  symbol  MASK_SIZE  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASK_SIZE,  MASKS);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASK_SIZE,  MASKS);	  bitsOut.write(MASK_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MASK_SIZE	318	None	replace
1023	[BUG]  [BUGGY]  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	297	None	replace
1024	[BUG]  [BUGGY]  in  =  readInt(MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	297	None	replace
1025	[BUG]  [BUGGY]  bitsOut  =  readInt(MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readInt(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readInt(MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	297	None	replace
1026	[BUG]  [BUGGY]  InputStream  in  =  readInt(Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize));  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize));	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	297	None	replace
1027	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  /  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  MAXIMUM_CACHE_SIZE  /  2;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    	compilable	  [FE]  AssertionError  	311	12	replace
1028	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  /  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  /  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  /  2;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    	compilable	  [FE]  AssertionError  	311	12	replace
1029	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  2;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    	compilable	  [FE]  AssertionError  	311	12	replace
1030	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  2;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    	compilable	  [FE]  AssertionError  	311	12	replace
1031	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE  +  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  /  MAXIMUM_CACHE_SIZE  +  2;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    	compilable	  [FE]  AssertionError  	311	12	replace
1032	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE  +  2;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE  +  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  MAXIMUM_CACHE_SIZE  +  2;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    	compilable	  [FE]  AssertionError  	311	12	replace
1033	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	142	None	add
1034	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	142	None	add
1035	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	142	None	add
1036	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	142	None	add
1037	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	142	None	add
1038	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	142	None	add
1039	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	142	None	add
1040	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	142	None	add
1041	[BUG]  [BUGGY]  return  bitsOut  +  1;  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    bitsOut  +=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	156	None	add
1042	[BUG]  [BUGGY]  return  bitsOut  +  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	156	None	add
1043	[BUG]  [BUGGY]  return  bitsOut  +  1;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	156	None	add
1044	[BUG]  [BUGGY]  return  bitsOut  +  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	156	None	add
1045	[BUG]  [BUGGY]  return  bitsOut  +  1;  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	156	None	add
1046	[BUG]  [BUGGY]  return  bitsOut  +  1;  bitsOut  +=(bytesCachedSize  <  <  MAXIMUM_CACHE_SIZE);  [CE]  >  expected  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  bitsOut  +=(bytesCachedSize  <  <  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    bitsOut  +=(bytesCachedSize  <  <  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  >  expected	156	None	add
1047	[BUG]  [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	156	None	add
1048	[BUG]  [BUGGY]  return  bitsOut  +  1;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	156	None	add
1049	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize));	  return    bitsOut    &    Math.max(bitsCachedSize,    count));    	non-compiled	[CE]  ';'  expected	33	None	replace
1050	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  bitsCachedSize));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS.length,  bitsCachedSize));	  return    bitsOut    &    Math.max(bitsCachedSize,    count));    	non-compiled	[CE]  ';'  expected	33	None	replace
1051	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS,  bitsCachedSize));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS,  bitsCachedSize));	  return    bitsOut    &    Math.max(bitsCachedSize,    count));    	non-compiled	[CE]  ';'  expected	33	None	replace
1052	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(Math.min(MASKS_SIZE,  bitsCachedSize)));  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(Math.min(MASKS_SIZE,  bitsCachedSize)));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(Math.min(MASKS_SIZE,  bitsCachedSize)));	  return    bitsOut    &    Math.max(bitsCachedSize,    count));    	non-compiled	[CE]  ';'  expected	33	None	replace
1053	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCached	163	None	replace
1054	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCached	163	None	replace
1055	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCached	163	None	replace
1056	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCached	163	None	replace
1057	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	163	None	replace
1058	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	163	None	replace
1059	[BUG]  [BUGGY]  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCached	163	None	replace
1060	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	259	None	add
1061	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	259	None	add
1062	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	259	None	add
1063	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	259	None	add
1064	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	259	None	add
1065	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	259	None	add
1066	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	259	None	add
1067	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	259	None	add
1068	[BUG]  [BUGGY]  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	166	None	replace
1069	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCached  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCached	166	None	replace
1070	[BUG]  [BUGGY]  long  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	166	None	replace
1071	[BUG]  [BUGGY]  int  count  =  readBits(bytesCached,  0,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(bytesCached,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(bytesCached,  0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	166	None	replace
1072	[BUG]  [BUGGY]  Integer  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	166	None	replace
1073	[BUG]  [BUGGY]  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE  -  1);	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	166	None	replace
1074	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  bytesCached	11	None	replace
1075	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (maximum_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  maximum_CACHE_SIZE  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (maximum_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (maximum_CACHE_SIZE  -  count))  &  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  maximum_CACHE_SIZE	11	None	replace
1076	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (Math.MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	11	None	replace
1077	[BUG]  [BUGGY]  return  bitsOut.length  -  MASKS_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -  MASKS_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  MASKS_SIZE;	  return    bitsOut.length    &    MASKS_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	222	None	replace
1078	[BUG]  [BUGGY]  return  bitsOut.length  &  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut.length    &    MASKS_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	222	None	replace
1079	[BUG]  [BUGGY]  return  bitsOut.length  %  MASKS_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  %  MASKS_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  %  MASKS_SIZE;	  return    bitsOut.length    &    MASKS_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	222	None	replace
1080	[BUG]  [BUGGY]  return  bitsOut.length  /  MASKS_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  /  MASKS_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  /  MASKS_SIZE;	  return    bitsOut.length    &    MASKS_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	222	None	replace
1081	[BUG]  [BUGGY]  return  bitsCachedSize  &  MASKS_SIZE;  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsCachedSize  &  MASKS_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsCachedSize  &  MASKS_SIZE;	  return    bitsOut.length    &    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	222	None	replace
1082	[BUG]  [BUGGY]  [FE]  ArithmeticException  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  MASKS[0];	  return    bitsOut    &    MASKS[0];    	compilable	  [FE]  ArithmeticException  	18	12	replace
1083	[BUG]  [BUGGY]  return  bitsOut  %  MASKS[0];  [FE]  ArithmeticException  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  MASKS[0];	  return    bitsOut    &    MASKS[0];    	compilable	  [FE]  ArithmeticException  	18	12	replace
1084	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0]  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[0]  +  1;	  return    bitsOut    &    MASKS[0];    	compilable	  [FE]  AssertionError  	18	12	replace
1085	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0]  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0]  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[0]  +  1;	  return    bitsOut    &    MASKS[0];    	compilable	  [FE]  AssertionError  	18	12	replace
1086	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[2];	  return    bitsOut    &    MASKS[0];    	compilable	  [FE]  AssertionError  	18	12	replace
1087	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[2];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[2];	  return    bitsOut    &    MASKS[0];    	compilable	  [FE]  AssertionError  	18	12	replace
1088	[BUG]  [BUGGY]  return  bitsOut  &  MILLIS_BYTE_SIZE;  [CE]  cannot  find  symbol  MILLIS_BYTE_SIZE  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MILLIS_BYTE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MILLIS_BYTE_SIZE;	  return    bitsOut    &    BYTE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MILLIS_BYTE_SIZE	224	None	replace
1089	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  1;	  return    bitsOut    /    1;    	compilable	  [FE]  AssertionError  	155	2	replace
1090	[BUG]  [BUGGY]  return  bitsOut  *  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  1;	  return    bitsOut    /    1;    	compilable	  [FE]  AssertionError  	155	2	replace
1091	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  /  4;	  return    bitsOut    /    1;    	compilable	  [FE]  AssertionError  	155	12	replace
1092	[BUG]  [BUGGY]  return  bitsOut  /  4;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  4;	  return    bitsOut    /    1;    	compilable	  [FE]  AssertionError  	155	12	replace
1093	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  /  3;	  return    bitsOut    /    1;    	compilable	  [FE]  AssertionError  	155	12	replace
1094	[BUG]  [BUGGY]  return  bitsOut  /  3;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  3;	  return    bitsOut    /    1;    	compilable	  [FE]  AssertionError  	155	12	replace
1095	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  4;	  return    bitsOut    -    3;    	compilable	  [FE]  AssertionError  	181	12	replace
1096	[BUG]  [BUGGY]  return  bitsOut  -  4;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  4;	  return    bitsOut    -    3;    	compilable	  [FE]  AssertionError  	181	12	replace
1097	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCachedSize  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCachedSize  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  return    this.bitsCachedSize;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	111	None	replace
1098	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  bytesCached	10	None	replace
1099	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	10	None	replace
1100	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count;  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count;	  return    bitsOut.toByteArray()    &&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	128	None	replace
1101	[BUG]  [BUGGY]  return  in.toByteArray()  &&  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.toByteArray()  &&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.toByteArray()  &&  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
1102	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  +  1;  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut.toByteArray()    &&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	128	None	replace
1103	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  ||  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  ||  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  ||  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	128	None	replace
1104	[BUG]  [BUGGY]  return  MAXIMUM_CACHE_SIZE.toByteArray()  &&  bitsOut;  [CE]  int  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  MAXIMUM_CACHE_SIZE.toByteArray()  &&  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  MAXIMUM_CACHE_SIZE.toByteArray()  &&  bitsOut;	  return    bitsOut.toByteArray()    &&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  int  cannot  be  dereferenced	128	None	replace
1105	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  ||  count;  [CE]  long  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  ||  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  ||  count;	  return    bitsOut.toByteArray()    &&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	128	None	replace
1106	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	187	None	add
1107	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	187	None	add
1108	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	187	None	add
1109	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	187	None	add
1110	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	187	None	add
1111	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	187	None	add
1112	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	187	None	add
1113	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	187	None	add
1114	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  count);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  count);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	304	None	replace
1115	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	304	None	replace
1116	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  maxIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  maxIMUM_CACHE_SIZE  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  maxIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  maxIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  maxIMUM_CACHE_SIZE	304	None	replace
1117	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  MASKS[count]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  MASKS[count]);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	304	None	replace
1118	[BUG]  [BUGGY]  int  count  =  readByte(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readByte(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readByte(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	304	None	replace
1119	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  0,  count);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  0,  count);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	304	None	replace
1120	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  1);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  1);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	304	None	replace
1121	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	275	None	replace
1122	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(0,  MAXIMUM_CACHE_SIZE);  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.min(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	275	None	replace
1123	[BUG]  [BUGGY]  bitsOut  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	275	None	replace
1124	[BUG]  [BUGGY]  long  count  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  count  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  count  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	275	None	replace
1125	[BUG]  [BUGGY]  Integer  count  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  count  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  count  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	275	None	replace
1126	[BUG]  [BUGGY]  bitsOut  &=  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	275	None	replace
1127	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	250	None	replace
1128	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)&  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)&  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	250	None	replace
1129	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	256	None	replace
1130	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	256	None	replace
1131	[BUG]  [BUGGY]  nextByteOrder  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  nextByteOrder  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  nextByteOrder  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	nextByteOrder  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  nextByteOrder	256	None	replace
1132	[BUG]  [BUGGY]  return  bitsOut  -  2;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	152	None	add
1133	[BUG]  [BUGGY]  return  bitsOut  -  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	152	None	add
1134	[BUG]  [BUGGY]  return  bitsOut  -  2;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	152	None	add
1135	[BUG]  [BUGGY]  return  bitsOut  -  2;  bitsOut  -  2;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  bitsOut  -  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    bitsOut  -  2;	  	non-compiled	[CE]  not  a  statement	152	None	add
1136	[BUG]  [BUGGY]  return  bitsOut  -  2;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	152	None	add
1137	[BUG]  [BUGGY]  return  bitsOut  -  2;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	152	None	add
1138	[BUG]  [BUGGY]  return  bitsOut  -  2;  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	152	None	add
1139	[BUG]  [BUGGY]  return  bitsOut  -  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	152	None	add
1140	[BUG]  [BUGGY]  return(this.bitsCachedSize  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	190	None	replace
1141	[BUG]  [BUGGY]  return(bitsCachedSize  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	190	None	replace
1142	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	310	None	add
1143	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	310	None	add
1144	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	310	None	add
1145	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	310	None	add
1146	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	310	None	add
1147	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	310	None	add
1148	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	310	None	add
1149	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE  +  2;  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE  +  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE  +  2;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	310	None	add
1150	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	138	None	add
1151	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	138	None	add
1152	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	138	None	add
1153	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	138	None	add
1154	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	138	None	add
1155	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	138	None	add
1156	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	138	None	add
1157	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	138	None	add
1158	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  count  -  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  count  -  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	216	None	replace
1159	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  count  *  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  count  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  count  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	216	None	replace
1160	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  0,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  0,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	216	None	replace
1161	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	70	None	replace
1162	[BUG]  [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *=  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	70	None	replace
1163	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  2;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	90	12	replace
1164	[BUG]  [BUGGY]  return  bitsOut  %  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  2;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	90	12	replace
1165	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	90	12	replace
1166	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	90	12	replace
1167	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  MAXIMUM_CACHE_SIZE  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	90	None	replace
1168	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  ||  bitsCachedSize  %  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  ||  bitsCachedSize  %  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  MAXIMUM_CACHE_SIZE  ||  bitsCachedSize  %  MAXIMUM_CACHE_SIZE;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	90	None	replace
1169	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  ||  bitsCachedSize  *  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  ||  bitsCachedSize  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  MAXIMUM_CACHE_SIZE  ||  bitsCachedSize  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	90	None	replace
1170	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  2;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	90	12	replace
1171	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  2;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  2;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	90	12	replace
1172	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	197	None	replace
1173	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	197	None	replace
1174	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	197	None	replace
1175	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	197	None	replace
1176	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    count);    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	80	None	replace
1177	[BUG]  [BUGGY]  return  bitsOut.read(bytesCachedSize,  count);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(bytesCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(bytesCachedSize,  count);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    count);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	80	None	replace
1178	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    count);    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	80	None	replace
1179	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    count);    	non-compiled	[CE]  cannot  find  symbol  SIZE	80	None	replace
1180	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.MAXIMUM_CACHE_SIZE,  count);  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    count);    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	80	None	replace
1181	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	272	None	replace
1182	[BUG]  [BUGGY]  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	272	None	replace
1183	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  max);  [CE]  cannot  find  symbol  max  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  max);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  max);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  max	272	None	replace
1184	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  1);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	272	None	replace
1185	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  count);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	272	None	replace
1186	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  2);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  2);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	272	None	replace
1187	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  10);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  10);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  10);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	272	None	replace
1188	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol	308	None	replace
1189	[BUG]  [BUGGY]  int  count  =  readByte(byteOrder.LITTLE_ENDIAN);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readByte(byteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readByte(byteOrder.LITTLE_ENDIAN);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	308	None	replace
1190	[BUG]  [BUGGY]  nextByte  =  readByte(byteOrder.LITTLE_ENDIAN);  [CE]  cannot  find  symbol  nextByte  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  nextByte  =  readByte(byteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	nextByte  =  readByte(byteOrder.LITTLE_ENDIAN);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  nextByte	308	None	replace
1191	[BUG]  [BUGGY]  BitInputStream  in  =  readByte(byteOrder.LITTLE_ENDIAN);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  BitInputStream  in  =  readByte(byteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	BitInputStream  in  =  readByte(byteOrder.LITTLE_ENDIAN);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol	308	None	replace
1192	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	47	None	add
1193	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	47	None	add
1194	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	47	None	add
1195	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	47	None	add
1196	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
1197	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	47	None	add
1198	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	47	None	add
1199	[BUG]  [BUGGY]  bitsOut  -=  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	211	None	replace
1200	[BUG]  [BUGGY]  in.read(bitsOut,  0,  count);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  no  suitable  method  found  for  read(long,int,int)  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in.read(bitsOut,  0,  count);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in.read(bitsOut,  0,  count);  bitsOut  -=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int,int)	211	None	replace
1201	[BUG]  [BUGGY]  in.read(bitsOut,  count);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  no  suitable  method  found  for  read(long,int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in.read(bitsOut,  count);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in.read(bitsOut,  count);  bitsOut  -=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	211	None	replace
1202	[BUG]  [BUGGY]  bitsOut  -=  in.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  in.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  in.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	211	None	replace
1203	[BUG]  [BUGGY]  bitsOut  -=  in.read(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  in.read(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  in.read(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	211	None	replace
1204	[BUG]  [BUGGY]  bitsOut  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	273	None	replace
1205	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	273	None	replace
1206	[BUG]  [BUGGY]  InputStream  in  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	251	None	replace
1207	[BUG]  [BUGGY]  InputStream  in  =  readBits(this,  bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(this,  bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(this,  bitsOut,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	251	None	replace
1208	[BUG]  [BUGGY]  in  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	251	None	replace
1209	[BUG]  [BUGGY]  bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	251	None	replace
1210	[BUG]  [BUGGY]  InputStream  in  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	251	None	replace
1211	[BUG]  [BUGGY]  InputStream  in  =  readBits(this,  count,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(this,  count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(this,  count,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	251	None	replace
1212	[BUG]  [BUGGY]  InputStream  in  =  readBits(this,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(this,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(this,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	251	None	replace
1213	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	236	None	replace
1214	[BUG]  [BUGGY]  int  count  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	236	None	replace
1215	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS[count,  MAXIMUM_CACHE_SIZE));  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS[count,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS[count,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ']'  expected	267	None	replace
1216	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS,  count));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS,  count));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS,  count));	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	267	None	replace
1217	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  count));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  count));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS.length,  count));	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	267	None	replace
1218	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsCachedSize  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	147	12	replace
1219	[BUG]  [BUGGY]  return(bitsCachedSize  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	147	12	replace
1220	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	147	12	replace
1221	[BUG]  [BUGGY]  return(this.bitsCachedSize  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	147	12	replace
1222	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  <  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  <  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	147	12	replace
1223	[BUG]  [BUGGY]  return(this.bitsCachedSize  <  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  <  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  <  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	147	12	replace
1224	[BUG]  [BUGGY]  return(bitsOut  <  =  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  =  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  =  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
1225	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;	  return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	147	12	replace
1226	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;	  return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	147	12	replace
1227	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  2;	  return    bitsOut    -    2;    	compilable	  [FE]  AssertionError  	153	12	replace
1228	[BUG]  [BUGGY]  return  bitsOut  &  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  2;	  return    bitsOut    -    2;    	compilable	  [FE]  AssertionError  	153	12	replace
1229	[BUG]  [BUGGY]  return  bitsOut.length  -  count;  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  count;	  return    bitsOut.length    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	175	None	replace
1230	[BUG]  [BUGGY]  return  bitsOut.length  /  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  /  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  /  MAXIMUM_CACHE_SIZE;	  return    bitsOut.length    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	175	None	replace
1231	[BUG]  [BUGGY]  return  bitsOut.length  -  MAXIMUM_CACHE_SIZE  +  1;  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut.length    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	175	None	replace
1232	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsCachedSize  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsCachedSize  -  MAXIMUM_CACHE_SIZE;	  return    bitsOut.length    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	175	12	replace
1233	[BUG]  [BUGGY]  return  bitsCachedSize  -  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsCachedSize  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsCachedSize  -  MAXIMUM_CACHE_SIZE;	  return    bitsOut.length    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	175	12	replace
1234	[BUG]  [BUGGY]  return  bitsOut.length  -  1,  MAXIMUM_CACHE_SIZE;  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -  1,  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  1,  MAXIMUM_CACHE_SIZE;	  return    bitsOut.length    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	175	None	replace
1235	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	43	None	add
1236	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	43	None	add
1237	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	43	None	add
1238	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	43	None	add
1239	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	43	None	add
1240	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	43	None	add
1241	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	43	None	add
1242	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	43	None	add
1243	[BUG]  [BUGGY]  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  ByteOrder.LITTLE_ENDIAN;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    ByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  incompatible  types	218	None	replace
1244	[BUG]  [BUGGY]  bitsOut  =  (bytesCachedSize  *  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  (bytesCachedSize  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  (bytesCachedSize  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    ByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	218	None	replace
1245	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    ByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  incompatible  types	218	None	replace
1246	[BUG]  [BUGGY]  bitsOut  =  byteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  byteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  byteOrder.LITTLE_ENDIAN;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    ByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  incompatible  types	218	None	replace
1247	[BUG]  [BUGGY]  bitsOut  =  Integer.toString(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  Integer.toString(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  Integer.toString(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    ByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	218	None	replace
1248	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  +  2;	  return    bitsOut    +    1;    	compilable	  [FE]  AssertionError  	157	12	replace
1249	[BUG]  [BUGGY]  return  bitsOut  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  +  2;	  return    bitsOut    +    1;    	compilable	  [FE]  AssertionError  	157	12	replace
1250	[BUG]  [BUGGY]  return  in.read(bytesOut,  bitsCachedSize);  [CE]  cannot  find  symbol  bytesOut  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(bytesOut,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(bytesOut,  bitsCachedSize);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesOut	279	None	replace
1251	[BUG]  [BUGGY]  return  in.read(ByteOrder.MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	279	None	replace
1252	[BUG]  [BUGGY]  return  bytesOut.read(ByteOrder.BYTE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bytesOut.read(ByteOrder.BYTE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bytesOut.read(ByteOrder.BYTE_SIZE,  bitsCachedSize);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	279	None	replace
1253	[BUG]  [BUGGY]  return  byteOrder.read(ByteOrder.BYTE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  byteOrder.read(ByteOrder.BYTE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  byteOrder.read(ByteOrder.BYTE_SIZE,  bitsCachedSize);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	279	None	replace
1254	[BUG]  [BUGGY]  return  in.read(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  no  suitable  method  found  for  read(ByteOrder,int,int)  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(ByteOrder,int,int)	279	None	replace
1255	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	333	None	replace
1256	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MINIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MINIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MINIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	333	None	replace
1257	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  Integer.MAXIMUM_CACHE_SIZE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  Integer.MAXIMUM_CACHE_SIZE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  Integer.MAXIMUM_CACHE_SIZE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	333	None	replace
1258	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  Integer.MINIMUM_CACHE_SIZE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  Integer.MINIMUM_CACHE_SIZE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  Integer.MINIMUM_CACHE_SIZE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	333	None	replace
1259	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MIN_VALUE_CACHE_SIZE);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MIN_VALUE_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MIN_VALUE_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	333	None	replace
1260	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  +  1);  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	333	None	replace
1261	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  Integer.MIN_VALUE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  Integer.MIN_VALUE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  Integer.MIN_VALUE)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	333	None	replace
1262	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(bitsCachedSize,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    count);    	compilable	  [FE]  AssertionError  	106	12	replace
1263	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  count);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    count);    	compilable	  [FE]  AssertionError  	106	12	replace
1264	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(bitsCachedSize,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    count);    	compilable	  [FE]  AssertionError  	106	12	replace
1265	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    count);    	compilable	  [FE]  AssertionError  	106	12	replace
1266	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS,  bitsCachedSize);  [CE]  no  suitable  method  found  for  min(long[],int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    count);    	non-compiled	[CE]  no  suitable  method  found  for  min(long[],int)	106	None	replace
1267	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	261	None	add
1268	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	261	None	add
1269	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	261	None	add
1270	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	261	None	add
1271	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	261	None	add
1272	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	261	None	add
1273	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  in.skipChildren();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	261	None	add
1274	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	261	None	add
1275	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	239	None	replace
1276	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	260	12	replace
1277	[BUG]  [BUGGY]  return  bitsOut  %  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	260	12	replace
1278	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	260	11	replace
1279	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(0,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	260	11	replace
1280	[BUG]  [BUGGY]  return  bitsOut  %  Math.ceil(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.ceil(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.ceil(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;	260	None	replace
1281	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.max(bitsCachedSize,  count);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	260	12	replace
1282	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  count);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(bitsCachedSize,  count);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	260	12	replace
1283	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(10,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.max(10,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	260	11	replace
1284	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(10,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(10,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(10,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	260	11	replace
1285	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	260	11	replace
1286	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	260	11	replace
1287	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  possible  loss  of  precision	276	None	replace
1288	[BUG]  [BUGGY]  long  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	276	None	replace
1289	[BUG]  [BUGGY]  bitsOut  -  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  not  a  statement	276	None	replace
1290	[BUG]  [BUGGY]  bitsOut  &=  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	276	None	replace
1291	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    <    <    4?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
1292	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsInt  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bitsInt  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsInt  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsInt  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bitsInt	252	None	replace
1293	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MASKS[1];	  return    bitsOut    &    MASKS[1];    	compilable	  [FE]  AssertionError  	28	12	replace
1294	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MASKS[1];	  return    bitsOut    &    MASKS[1];    	compilable	  [FE]  AssertionError  	28	12	replace
1295	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MASKS[1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  MASKS[1];	  return    bitsOut    &    MASKS[1];    	compilable	  [FE]  AssertionError  	28	12	replace
1296	[BUG]  [BUGGY]  return  bitsOut  %  MASKS[1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MASKS[1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  MASKS[1];	  return    bitsOut    &    MASKS[1];    	compilable	  [FE]  AssertionError  	28	12	replace
1297	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[3];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[3];	  return    bitsOut    &    MASKS[1];    	compilable	  [FE]  AssertionError  	28	12	replace
1298	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[3];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[3];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[3];	  return    bitsOut    &    MASKS[1];    	compilable	  [FE]  AssertionError  	28	12	replace
1299	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  return    this.bitsCachedSize;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  bytesCached	107	None	replace
1300	[BUG]  [BUGGY]  return  bitsOut.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	79	None	replace
1301	[BUG]  [BUGGY]  return  bitsOut.read(bytes,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytes  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(bytes,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(bytes,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytes	79	None	replace
1302	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.SECOND,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  SECOND  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.SECOND,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.SECOND,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  SECOND	79	None	replace
1303	[BUG]  [BUGGY]  return  bitsOut.read(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	79	None	replace
1304	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	316	None	replace
1305	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(1,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(1,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(1,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	316	None	replace
1306	[BUG]  [BUGGY]  int  count  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	316	None	replace
1307	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(10,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(10,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(10,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	316	None	replace
1308	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  count,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  count,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  count,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	82	None	replace
1309	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	82	None	replace
1310	[BUG]  [BUGGY]  return  bitsOut.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	82	None	replace
1311	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  count);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	82	None	replace
1312	[BUG]  [BUGGY]  return  bitsOut.read(bytes,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  bytes  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(bytes,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(bytes,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytes	82	None	replace
1313	[BUG]  [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	191	None	replace
1314	[BUG]  [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE,  count);  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	191	None	replace
1315	[BUG]  [BUGGY]  return  bitsOut.toByteArray(Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));	  return    bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	191	None	replace
1316	[BUG]  [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  return    bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	191	None	replace
1317	[BUG]  [BUGGY]  return  bitsOut.toByteArray(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize));  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize));	  return    bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	191	None	replace
1318	[BUG]  [BUGGY]  return  bitsOut.toByteArray(Math.max(0,  MAXIMUM_CACHE_SIZE));  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(Math.max(0,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(Math.max(0,  MAXIMUM_CACHE_SIZE));	  return    bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	191	None	replace
1319	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASKS_SIZE;  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASKS_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASKS_SIZE;	  return    bitsOut    *    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	57	None	replace
1320	[BUG]  [BUGGY]  return  bitsIn  *  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bitsIn  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsIn  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsIn  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bitsIn	57	None	replace
1321	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASK_SIZE;  [CE]  cannot  find  symbol  MASK_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASK_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASK_SIZE;	  return    bitsOut    *    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASK_SIZE	57	None	replace
1322	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  |  MASKS_SIZE;  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  |  MASKS_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  |  MASKS_SIZE;	  return    bitsOut    *    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	57	None	replace
1323	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  return    this.bitsCachedSize;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  bytesCached	108	None	replace
1324	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	4	None	replace
1325	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	4	None	replace
1326	[BUG]  [BUGGY]  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCached	4	None	replace
1327	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	184	None	add
1328	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	184	None	add
1329	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	184	None	add
1330	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	184	None	add
1331	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	184	None	add
1332	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	184	None	add
1333	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	184	None	add
1334	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	184	None	add
1335	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	45	None	add
1336	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	45	None	add
1337	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	45	None	add
1338	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	45	None	add
1339	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  count  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  count  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    int  count  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	45	None	add
1340	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	45	None	add
1341	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	45	None	add
1342	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
1343	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1344	[BUG]  [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  <  4)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1345	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	49	None	add
1346	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	49	None	add
1347	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	49	None	add
1348	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	49	None	add
1349	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	49	None	add
1350	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	49	None	add
1351	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	49	None	add
1352	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	49	None	add
1353	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1354	[BUG]  [BUGGY]  return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1355	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1356	[BUG]  [BUGGY]  return(bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1357	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	2	replace
1358	[BUG]  [BUGGY]  return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	2	replace
1359	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  0);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  0);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1360	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  0);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  0);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  0);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1361	[BUG]  [BUGGY]  return(bitsOut  <  =  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  =  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  =  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
1362	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  0?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1363	[BUG]  [BUGGY]  return(bitsOut  <  0?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  0?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1364	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  1);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1365	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  1);  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  1);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1366	[BUG]  [BUGGY]  bitsOut  &  MASKS[count];  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  not  a  statement	302	None	replace
1367	[BUG]  [BUGGY]  int  count  =  bitsOut.length  -  MASKS[count];  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  bitsOut.length  -  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  bitsOut.length  -  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	302	None	replace
1368	[BUG]  [BUGGY]  int  count  =  bitsOut.length  &  MASKS[count];  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  bitsOut.length  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  bitsOut.length  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	302	None	replace
1369	[BUG]  [BUGGY]  bitsOut  &  MASKS[0];  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  MASKS[0];	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  not  a  statement	302	None	replace
1370	[BUG]  [BUGGY]  bitsOut  &  MASK[count];  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  MASK[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  MASK[count];	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  not  a  statement	302	None	replace
1371	[BUG]  [BUGGY]  bitsOut  |=  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  |=  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  |=  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	302	None	replace
1372	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  count  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  count  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1373	[BUG]  [BUGGY]  return  bitsOut  -  count  *  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  count  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  count  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1374	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  1  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1375	[BUG]  [BUGGY]  return  bitsOut  -  1  *  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1376	[BUG]  [BUGGY]  return  bitsOut  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE)*  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE)*  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE)*  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	50	None	replace
1377	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  /  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MAXIMUM_CACHE_SIZE  /  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1378	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  /  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  /  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE  /  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1379	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1380	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1381	[BUG]  [BUGGY]  return  bitsOut  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	50	None	replace
1382	[BUG]  [BUGGY]  return  bitsOut  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE)/  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE)/  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -(bytesCachedSize  *  MAXIMUM_CACHE_SIZE)/  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	50	None	replace
1383	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count  +  2];	  return    bitsOut    &    MASKS[count    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	2	replace
1384	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  +  2];	  return    bitsOut    &    MASKS[count    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	2	replace
1385	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1],  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1],  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  +  1],  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count    +    1];    	non-compiled	[CE]  ';'  expected	24	None	replace
1386	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  3];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count  +  3];	  return    bitsOut    &    MASKS[count    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	2	replace
1387	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  3];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  +  3];	  return    bitsOut    &    MASKS[count    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	2	replace
1388	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  +  1],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    MASKS[count    +    1];    	non-compiled	[CE]  ';'  expected	24	None	replace
1389	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count  *  1];	  return    bitsOut    &    MASKS[count    +    1];    	compilable	  [FE]  AssertionError  	24	2	replace
1390	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  1];  [FE]  AssertionError  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  *  1];	  return    bitsOut    &    MASKS[count    +    1];    	compilable	  [FE]  AssertionError  	24	2	replace
1391	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1],  MAXIMUM_CACHE_SIZE;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1],  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  +  1],  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count    +    1];    	non-compiled	[CE]  ';'  expected	24	None	replace
1392	[BUG]  [BUGGY]  bitsOut  =  readByte(bytes,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytes  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(bytes,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(bytes,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytes	307	None	replace
1393	[BUG]  [BUGGY]  bitsOut  =  readByte(bytes,  count);  [CE]  cannot  find  symbol  bytes  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(bytes,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(bytes,  count);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytes	307	None	replace
1394	[BUG]  [BUGGY]  bitsOut  =  readByte(bytes,  0);  [CE]  cannot  find  symbol  bytes  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(bytes,  0);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(bytes,  0);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytes	307	None	replace
1395	[BUG]  [BUGGY]  bitsOut  =  readByte(bytes,  MASKS[count]);  [CE]  cannot  find  symbol  bytes  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(bytes,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(bytes,  MASKS[count]);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytes	307	None	replace
1396	[BUG]  [BUGGY]  bitsOut  =  readByte(bytes,  1);  [CE]  cannot  find  symbol  bytes  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(bytes,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(bytes,  1);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytes	307	None	replace
1397	[BUG]  [BUGGY]  bitsOut  =  readByte(bytes,  0,  count);  [CE]  cannot  find  symbol  bytes  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(bytes,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(bytes,  0,  count);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytes	307	None	replace
1398	[BUG]  [BUGGY]  bitsOut  =  readByte(bytes,  16);  [CE]  cannot  find  symbol  bytes  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(bytes,  16);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(bytes,  16);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytes	307	None	replace
1399	[BUG]  [BUGGY]  InputStream  in  =  readInt(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(this.bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
1400	[BUG]  [BUGGY]  in  =  readInt(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(this.bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	296	None	replace
1401	[BUG]  [BUGGY]  bitsOut  =  readInt(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readInt(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readInt(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(this.bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
1402	[BUG]  [BUGGY]  InputStream  in  =  readInt(this.bitsCachedSize,  count);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(this.bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(this.bitsCachedSize,  count);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(this.bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	296	None	replace
1403	[BUG]  [BUGGY]  in  =  readInt(this.bitsCachedSize,  count);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(this.bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(this.bitsCachedSize,  count);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(this.bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	296	None	replace
1404	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  -  1];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  -  1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	19	None	add
1405	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  -  1];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  -  1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	19	None	add
1406	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  -  1];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  -  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	19	None	add
1407	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count  -  1];  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count  -  1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	19	None	add
1408	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  -  1];  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  -  1];	  	non-compiled	[CE]  unreachable  statement	19	None	add
1409	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count  -  1];  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count  -  1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	19	None	add
1410	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count  -  1];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count  -  1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	19	None	add
1411	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count  -  1];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count  -  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	19	None	add
1412	[BUG]  [BUGGY]  bitsOut  =(bytesCached  >=  (count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  >=  (count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  >=  (count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  bytesCached	65	None	replace
1413	[BUG]  [BUGGY]  bitsOut  &  MAXIMUM_CACHE_SIZE;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  MAXIMUM_CACHE_SIZE;	  return    bitsIn    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  not  a  statement	321	None	replace
1414	[BUG]  [BUGGY]  return  bitsOut  &  maxIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  maxIMUM_CACHE_SIZE  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  maxIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  maxIMUM_CACHE_SIZE;	  return    bitsIn    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  maxIMUM_CACHE_SIZE	321	None	replace
1415	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE;  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE;	  return    bitsIn    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  missing  return  statement	321	None	replace
1416	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  count  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  count  &  MAXIMUM_CACHE_SIZE;	  return    bitsIn    &    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	321	12	replace
1417	[BUG]  [BUGGY]  return  count  &  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  count  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  count  &  MAXIMUM_CACHE_SIZE;	  return    bitsIn    &    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	321	12	replace
1418	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	39	None	add
1419	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	39	None	add
1420	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
1421	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	39	None	add
1422	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	39	None	add
1423	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	39	None	add
1424	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	39	None	add
1425	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASK[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASK[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASK[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	39	None	add
1426	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  count  -  1);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  count  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  count  -  1);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	231	None	replace
1427	[BUG]  [BUGGY]  return  bitsOut.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(bytesCachedSize,  MAXIMUM_CACHE_SIZE  -  1);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	231	None	replace
1428	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	231	None	replace
1429	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	231	None	replace
1430	[BUG]  [BUGGY]  return  bytesOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bytesOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bytesOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	231	None	replace
1431	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(10,  bitsCachedSize));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(10,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(10,  bitsCachedSize));	  return    bitsOut    &    Math.max(10,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	34	None	replace
1432	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(16,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(16,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(16,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.max(10,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	34	None	replace
1433	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(12,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(12,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(12,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.max(10,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	34	None	replace
1434	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(2,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(2,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(2,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.max(10,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	34	None	replace
1435	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(10,  bitsCachedSize));  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(10,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(10,  bitsCachedSize));	  return    bitsOut    &    Math.max(10,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	34	None	replace
1436	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE  +  1;  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut.toByteArray()    &&    count    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	124	None	replace
1437	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    count    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	124	None	replace
1438	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE,  bitsCachedSize;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE,  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE,  bitsCachedSize;	  return    bitsOut.toByteArray()    &&    count    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	124	None	replace
1439	[BUG]  [BUGGY]  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    0;    	non-compiled	[CE]  missing  return  statement	282	None	replace
1440	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    0;    	non-compiled	[CE]  possible  loss  of  precision	282	None	replace
1441	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    0;    	non-compiled	[CE]  unreachable  statement	282	None	replace
1442	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  short  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  short  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  short  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    0;    	non-compiled	[CE]  possible  loss  of  precision	282	None	replace
1443	[BUG]  [BUGGY]  short  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  short  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	short  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    0;    	non-compiled	[CE]  possible  loss  of  precision	282	None	replace
1444	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(0,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	40	12	replace
1445	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  bitsCachedSize)+  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	40	12	replace
1446	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(0,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(0,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	40	12	replace
1447	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(0,  bitsCachedSize)+  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(0,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(0,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	40	12	replace
1448	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	40	11	replace
1449	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)/  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	40	11	replace
1450	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(1,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(1,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	40	12	replace
1451	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(1,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(1,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(1,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	40	12	replace
1452	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	51	None	add
1453	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	51	None	add
1454	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	51	None	add
1455	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	51	None	add
1456	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	51	None	add
1457	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	51	None	add
1458	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE  +  1;  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE  +  1;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	51	None	add
1459	[BUG]  [BUGGY]  return  bitsOut.length  -(bytesCachedSize  /  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bytesCachedSize  /  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bytesCachedSize  /  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bytesCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	177	None	replace
1460	[BUG]  [BUGGY]  return  bitsOut.length  -(bytesCachedSize  -  count);  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bytesCachedSize  -  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bytesCachedSize  -  count);	  return    bitsOut.length    -(bytesCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	177	None	replace
1461	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  count  -  MAXIMUM_CACHE_SIZE);  [CE]  ')'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.max(MAXIMUM_CACHE_SIZE,  count  -  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bytesCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	177	None	replace
1462	[BUG]  [BUGGY]  return  bitsOut  &  0?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  0?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  0?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    0?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	134	None	replace
1463	[BUG]  [BUGGY]  return  bitsOut  <  <  0?  bitsOut  :  bitsCachedSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  0?  bitsOut  :  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  0?  bitsOut  :  bitsCachedSize;	  return    bitsOut    <    <    0?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
1464	[BUG]  [BUGGY]  bitsOut  -=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	3	None	replace
1465	[BUG]  [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	3	None	replace
1466	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	120	None	replace
1467	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  count);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  count);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  count);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	120	None	replace
1468	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  /  MAXIMUM_CACHE_SIZE  -  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    	compilable	  [FE]  AssertionError  	54	12	replace
1469	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  MAXIMUM_CACHE_SIZE  -  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    	compilable	  [FE]  AssertionError  	54	12	replace
1470	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  count  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  count  -  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    	compilable	  [FE]  AssertionError  	54	12	replace
1471	[BUG]  [BUGGY]  return  bitsOut  *  count  -  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  count  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  count  -  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    	compilable	  [FE]  AssertionError  	54	12	replace
1472	[BUG]  [BUGGY]  return  bitsOut  *  MASKS_SIZE  -  1;  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MASKS_SIZE  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MASKS_SIZE  -  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	54	None	replace
1473	[BUG]  [BUGGY]  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	246	None	replace
1474	[BUG]  [BUGGY]  bitsOut  &=(bytesCachedSize  <  <  1)?  MAXIMUM_CACHE_SIZE  :  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=(bytesCachedSize  <  <  1)?  MAXIMUM_CACHE_SIZE  :  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=(bytesCachedSize  <  <  1)?  MAXIMUM_CACHE_SIZE  :  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	246	None	replace
1475	[BUG]  [BUGGY]  bitsOut  &=(bytesCachedSize  <  <  1)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=(bytesCachedSize  <  <  1)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=(bytesCachedSize  <  <  1)?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	246	None	replace
1476	[BUG]  [BUGGY]  bitsOut  &=  Math.max(MAXIMUM_CACHE_SIZE,  count);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	246	None	replace
1477	[BUG]  [BUGGY]  return  bitsOut  /  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	154	None	add
1478	[BUG]  [BUGGY]  return  bitsOut  /  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	154	None	add
1479	[BUG]  [BUGGY]  return  bitsOut  /  1;  bitsOut  /  2;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  bitsOut  /  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    bitsOut  /  2;	  	non-compiled	[CE]  not  a  statement	154	None	add
1480	[BUG]  [BUGGY]  return  bitsOut  /  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	154	None	add
1481	[BUG]  [BUGGY]  return  bitsOut  /  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	154	None	add
1482	[BUG]  [BUGGY]  return  bitsOut  /  1;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	154	None	add
1483	[BUG]  [BUGGY]  return  bitsOut  /  1;  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	154	None	add
1484	[BUG]  [BUGGY]  return  bitsOut  /  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	154	None	add
1485	[BUG]  [BUGGY]  bitsOut.write(bytesCachedSize[count],  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(bytesCachedSize[count],  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(bytesCachedSize[count],  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	320	None	replace
1486	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  long  cannot  be  dereferenced	320	None	replace
1487	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  count,  bitsCachedSize);  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  count,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  count,  bitsCachedSize);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  long  cannot  be  dereferenced	320	None	replace
1488	[BUG]  [BUGGY]  bitsOut.write(MASKS[count,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  ']'  expected  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  ']'  expected	320	None	replace
1489	[BUG]  [BUGGY]  bitsOut.write(MASK[count],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  MASK  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASK[count],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASK[count],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  MASK	320	None	replace
1490	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  0,  count);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  0,  count);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	84	None	replace
1491	[BUG]  [BUGGY]  return  bitsOut.read(bytesCachedSize,  0,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(bytesCachedSize,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(bytesCachedSize,  0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	84	None	replace
1492	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  0,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_SIZE,  0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	84	None	replace
1493	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder.BYTE_SIZE,  0,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder.BYTE_SIZE,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder.BYTE_SIZE,  0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	84	None	replace
1494	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder,  0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	84	None	replace
1495	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  0,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  0,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  0,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	84	None	replace
1496	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	95	None	add
1497	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	95	None	add
1498	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	95	None	add
1499	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	95	None	add
1500	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	95	None	add
1501	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	95	None	add
1502	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
1503	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	95	None	add
1504	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    	compilable	  [FE]  AssertionError  	44	11	replace
1505	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    	compilable	  [FE]  AssertionError  	44	11	replace
1506	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    	compilable	  [FE]  AssertionError  	44	12	replace
1507	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    	compilable	  [FE]  AssertionError  	44	12	replace
1508	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    	compilable	  [FE]  AssertionError  	44	12	replace
1509	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    	compilable	  [FE]  AssertionError  	44	12	replace
1510	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	31	None	replace
1511	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(0,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(0,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(0,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	31	None	replace
1512	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(Math.max(10,  MAXIMUM_CACHE_SIZE));  [CE]  no  suitable  method  found  for  min(int)  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(Math.max(10,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(Math.max(10,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  no  suitable  method  found  for  min(int)	31	None	replace
1513	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.toString(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	285	None	replace
1514	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE  +  1);  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.toString(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	285	None	replace
1515	[BUG]  [BUGGY]  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  toString(long)  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.toString(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  toString(long)	285	None	replace
1516	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE,  count);  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.toString(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	285	None	replace
1517	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE  +  count);  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE  +  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE  +  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.toString(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	285	None	replace
1518	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE,  count);  [CE]  incompatible  types  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.toString(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	285	None	replace
1519	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	326	None	add
1520	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	326	None	add
1521	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	326	None	add
1522	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	326	None	add
1523	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	326	None	add
1524	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	326	None	add
1525	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  in.skipChildren();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	326	None	add
1526	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[0];  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[0];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	326	None	add
1527	[BUG]  [BUGGY]  return  in.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
1528	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
1529	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  new  InputStreamReader(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  new  InputStreamReader(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
1530	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(in,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(in,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	5	None	replace
1531	[BUG]  [BUGGY]  return  bitsOut  <  <  4  ||  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4  ||  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4  ||  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	233	None	replace
1532	[BUG]  [BUGGY]  return  bitsOut  <  <  2  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	233	None	replace
1533	[BUG]  [BUGGY]  return  bitsOut  <  <  16  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  16  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  16  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	233	None	replace
1534	[BUG]  [BUGGY]  return  bitsOut  <  <  4  ||  bitsCachedSize  >>  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4  ||  bitsCachedSize  >>  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4  ||  bitsCachedSize  >>  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	233	None	replace
1535	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    MAXIMUM_CACHE_SIZE?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	133	None	replace
1536	[BUG]  [BUGGY]  return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    MAXIMUM_CACHE_SIZE?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  >  expected	133	None	replace
1537	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    MAXIMUM_CACHE_SIZE?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	133	None	replace
1538	[BUG]  [BUGGY]  return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  0;  [CE]  >  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  0;	  return    bitsOut    <    <    MAXIMUM_CACHE_SIZE?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  >  expected	133	None	replace
1539	[BUG]  [BUGGY]  return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  Integer.MAXIMUM_VALUE;  [CE]  >  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  Integer.MAXIMUM_VALUE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  Integer.MAXIMUM_VALUE;	  return    bitsOut    <    <    MAXIMUM_CACHE_SIZE?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  >  expected	133	None	replace
1540	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  count)/  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    	compilable	  [FE]  AssertionError  	38	12	replace
1541	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)/  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  count)/  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    	compilable	  [FE]  AssertionError  	38	12	replace
1542	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    	compilable	  [FE]  AssertionError  	38	12	replace
1543	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    	compilable	  [FE]  AssertionError  	38	12	replace
1544	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[0];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	17	None	add
1545	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[0];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[0];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	17	None	add
1546	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[0];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[0];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	17	None	add
1547	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[1];  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	17	None	add
1548	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	17	None	add
1549	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[1];  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	17	None	add
1550	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	17	None	add
1551	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	17	None	add
1552	[BUG]  [BUGGY]  return  bitsOut?  count  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  count  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  count  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	242	None	replace
1553	[BUG]  [BUGGY]  return  bitsOut?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	242	None	replace
1554	[BUG]  [BUGGY]  return  bitsOut?  MAXIMUM_CACHE_SIZE  :  count;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  MAXIMUM_CACHE_SIZE  :  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  MAXIMUM_CACHE_SIZE  :  count;	  return    bitsOut?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	242	None	replace
1555	[BUG]  [BUGGY]  return  bitsOut?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	242	None	replace
1556	[BUG]  [BUGGY]  return  bitsOut?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	242	None	replace
1557	[BUG]  [BUGGY]  return  bitsOut?  1  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  1  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  1  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	242	None	replace
1558	[BUG]  [BUGGY]  return  bitsOut?  in  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  in  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  in  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	242	None	replace
1559	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  count;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	88	12	replace
1560	[BUG]  [BUGGY]  return  bitsOut  -  count;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  count;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	88	12	replace
1561	[BUG]  [BUGGY]  return  bitsOut  -(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	88	None	replace
1562	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	88	12	replace
1563	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  +  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	88	12	replace
1564	[BUG]  [BUGGY]  InputStream  in  =  readInt(this.bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(this.bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(this.bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	299	None	replace
1565	[BUG]  [BUGGY]  in  =  readInt(this.bitsCachedSize);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(this.bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(this.bitsCachedSize);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	299	None	replace
1566	[BUG]  [BUGGY]  InputStream  in  =  readInt(Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  return    this.bitsCachedSize;    InputStream    in    =    readInt(this.bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	299	None	replace
1567	[BUG]  [BUGGY]  InputStream  in  =  readInt(Math.min(MASKS_SIZE,  bitsCachedSize));  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(Math.min(MASKS_SIZE,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(Math.min(MASKS_SIZE,  bitsCachedSize));	  return    this.bitsCachedSize;    InputStream    in    =    readInt(this.bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	299	None	replace
1568	[BUG]  [BUGGY]  bitsOut  =  readInt(this.bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readInt(this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readInt(this.bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(this.bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	299	None	replace
1569	[BUG]  [BUGGY]  return  bitsOut  &  MASKS;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS;	  return    bitsOut    &    MAXIMUM_CACHE_STIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	323	None	replace
1570	[BUG]  [BUGGY]  return  readBits(byteOrder,  count,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits(byteOrder,  count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(byteOrder,  count,  MAXIMUM_CACHE_SIZE);	  return    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	204	None	replace
1571	[BUG]  [BUGGY]  return  readBits(byteOrder,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits(byteOrder,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(byteOrder,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	204	None	replace
1572	[BUG]  [BUGGY]  return  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	204	None	replace
1573	[BUG]  [BUGGY]  return  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	204	None	replace
1574	[BUG]  [BUGGY]  return  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);	  return    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	204	None	replace
1575	[BUG]  [BUGGY]  return  readBits(byteOrder,  1,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits(byteOrder,  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(byteOrder,  1,  MAXIMUM_CACHE_SIZE);	  return    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	204	None	replace
1576	[BUG]  [BUGGY]  return  readBits(byteOrder,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits(byteOrder,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(byteOrder,  count);	  return    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	204	None	replace
1577	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [CE]  cannot  find  symbol  bytesCached  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  +  1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	23	None	add
1578	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [CE]  cannot  find  symbol  bytesCached  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  +  1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	23	None	add
1579	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [CE]  cannot  find  symbol  bytesCached  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count  +  1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	23	None	add
1580	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >=  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >=  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(byteOrder  >=  (bitsCachedSize  -  count))  &  MASKS[count  +  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	23	None	add
1581	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >=  (bitsCachedSize  -  1))  &  MASKS[count  +  1];  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >=  (bitsCachedSize  -  1))  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(byteOrder  >=  (bitsCachedSize  -  1))  &  MASKS[count  +  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	23	None	add
1582	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  +  count))  &  MASKS[count  +  1];  [CE]  cannot  find  symbol  bytesCached  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  +  count))  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(bytesCached  >=  (bitsCachedSize  +  count))  &  MASKS[count  +  1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	23	None	add
1583	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	23	None	add
1584	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  +  1))  &  MASKS[count  +  1];  [CE]  cannot  find  symbol  bytesCached  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  +  1))  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(bytesCached  >=  (bitsCachedSize  +  1))  &  MASKS[count  +  1];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	23	None	add
1585	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  count,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  count,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	205	None	replace
1586	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  1,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  1,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	205	None	replace
1587	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	205	None	replace
1588	[BUG]  [BUGGY]  return(bitsOut  <  <  1)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  <  1)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  <  1)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    <    4)?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
1589	[BUG]  [BUGGY]  return(bitsOut  <  <  3)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  <  3)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  <  3)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    <    4)?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
1590	[BUG]  [BUGGY]  return(bitsOut  <  <  2)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  <  2)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  <  2)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    <    4)?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
1591	[BUG]  [BUGGY]  return(bitsCached  <  <  4)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCached  <  <  4)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCached  <  <  4)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    <    4)?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
1592	[BUG]  [BUGGY]  return(bytesOut  <  <  1)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bytesOut  <  <  1)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bytesOut  <  <  1)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    <    4)?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
1593	[BUG]  [BUGGY]  return(bitsOut  <  <  6)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  <  6)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  <  6)?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    <    4)?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
1594	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE[count  -  1];  [CE]  array  required,  but  int  found  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE[count  -  1];	  return    bitsOut    &    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  array  required,  but  int  found	258	None	replace
1595	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE[count  +  1];  [CE]  array  required,  but  int  found  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE[count  +  1];	  return    bitsOut    &    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  array  required,  but  int  found	258	None	replace
1596	[BUG]  [BUGGY]  return  count  &  MAXIMUM_CACHE_SIZE[count];  [CE]  array  required,  but  int  found  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  count  &  MAXIMUM_CACHE_SIZE[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  count  &  MAXIMUM_CACHE_SIZE[count];	  return    bitsOut    &    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  array  required,  but  int  found	258	None	replace
1597	[BUG]  [BUGGY]  return  bitsOut  &  MASK[count];  [CE]  cannot  find  symbol  MASK  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASK[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASK[count];	  return    bitsOut    &    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  cannot  find  symbol  MASK	258	None	replace
1598	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [CE]  cannot  find  symbol  bytesCached  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  *  2];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	287	None	add
1599	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [CE]  cannot  find  symbol  bytesCached  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  *  2];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	287	None	add
1600	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [CE]  cannot  find  symbol  bytesCached  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count  *  2];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	287	None	add
1601	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  >=  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  >=  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(byteOrder  >=  (bitsCachedSize  -  count))  &  MASKS[count  *  2];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	287	None	add
1602	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bytesCached  >=  (bitsCachedSize  *  2))  &  MASKS[count  *  2];  [CE]  cannot  find  symbol  bytesCached  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bytesCached  >=  (bitsCachedSize  *  2))  &  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(bytesCached  >=  (bitsCachedSize  *  2))  &  MASKS[count  *  2];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	287	None	add
1603	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bytesCached  >>  (bitsCachedSize  *  2))  &  MASKS[count  *  2];  [CE]  cannot  find  symbol  bytesCached  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bytesCached  >>  (bitsCachedSize  *  2))  &  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(bytesCached  >>  (bitsCachedSize  *  2))  &  MASKS[count  *  2];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	287	None	add
1604	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut.write(MASKS[count  *  2]);  [CE]  long  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut.write(MASKS[count  *  2]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut.write(MASKS[count  *  2]);	  	non-compiled	[CE]  long  cannot  be  dereferenced	287	None	add
1605	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCached,  count);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bitsCached,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bitsCached,  count);	  return    bitsOut    &    MASKS[count];    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	306	None	replace
1606	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCached,  0,  count);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bitsCached,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bitsCached,  0,  count);	  return    bitsOut    &    MASKS[count];    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	306	None	replace
1607	[BUG]  [BUGGY]  bitsOut  =(bytesCached!=  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached!=  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached!=  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCached	164	None	replace
1608	[BUG]  [BUGGY]  return  bitsOut  <  <  8  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  8  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  8  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    8    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	335	None	replace
1609	[BUG]  [BUGGY]  return  bitsOut  <  <  8)&&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  8)&&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  8)&&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    8    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	335	None	replace
1610	[BUG]  [BUGGY]  return  bitsOut  <  <  0  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  0  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  0  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    8    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	335	None	replace
1611	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.MAXIMUM_CACHE_SIZE,  MASKS);  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.MAXIMUM_CACHE_SIZE,  MASKS);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.MAXIMUM_CACHE_SIZE,  MASKS);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MASKS);    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	230	None	replace
1612	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE,  MASKS);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE,  MASKS);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE,  MASKS);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MASKS);    	non-compiled	[CE]  long  cannot  be  dereferenced	230	None	replace
1613	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder.BYTE_SIZE,  MASKS);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder.BYTE_SIZE,  MASKS);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder.BYTE_SIZE,  MASKS);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MASKS);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	230	None	replace
1614	[BUG]  [BUGGY]  return  bitsOut.read(bytesCachedSize,  MASKS);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(bytesCachedSize,  MASKS);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(bytesCachedSize,  MASKS);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MASKS);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	230	None	replace
1615	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.MINIMUM_CACHE_SIZE,  MASKS);  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.MINIMUM_CACHE_SIZE,  MASKS);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.MINIMUM_CACHE_SIZE,  MASKS);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MASKS);    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	230	None	replace
1616	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	324	None	add
1617	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	324	None	add
1618	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  Math.min(MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  Math.min(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  Math.min(MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	324	None	add
1619	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	324	None	add
1620	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  Math.min(MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  Math.min(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  Math.min(MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	324	None	add
1621	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	324	None	add
1622	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	324	None	add
1623	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	324	None	add
1624	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	189	None	add
1625	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	189	None	add
1626	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	189	None	add
1627	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	189	None	add
1628	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  <  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  <  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  <  <  1)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  illegal  start  of  type	189	None	add
1629	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	189	None	add
1630	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	189	None	add
1631	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  1]  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  1]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  1]  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	189	None	add
1632	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	300	None	replace
1633	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  counts  >  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  counts  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  counts  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	300	None	replace
1634	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  >  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	300	None	replace
1635	[BUG]  [BUGGY]  return  bitsIn.toByteArray()  &&  count  >  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bitsIn  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsIn.toByteArray()  &&  count  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsIn.toByteArray()  &&  count  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bitsIn	300	None	replace
1636	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(0,  bitsCachedSize);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	98	12	replace
1637	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  bitsCachedSize);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  bitsCachedSize);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	98	12	replace
1638	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(0,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(0,  bitsCachedSize);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	98	12	replace
1639	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(0,  bitsCachedSize);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(0,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(0,  bitsCachedSize);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	98	12	replace
1640	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	98	12	replace
1641	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(0,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	98	12	replace
1642	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(1,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(1,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	98	11	replace
1643	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(1,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(1,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(1,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	98	11	replace
1644	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  no  suitable  method  found  for  max(int,int,int)  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,int,int)	98	None	replace
1645	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	12	replace
1646	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	12	replace
1647	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	12	replace
1648	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE  +  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	12	replace
1649	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	11	replace
1650	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	11	replace
1651	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	12	replace
1652	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	12	replace
1653	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  count  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	12	replace
1654	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count  +  1);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  count  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	12	replace
1655	[BUG]  [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    <    <    1?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
1656	[BUG]  [BUGGY]  return  bitsOut  -  3;  bitsOut  -  3;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  bitsOut  -  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    bitsOut  -  3;	  	non-compiled	[CE]  not  a  statement	180	None	add
1657	[BUG]  [BUGGY]  return  bitsOut  -  3;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	180	None	add
1658	[BUG]  [BUGGY]  return  bitsOut  -  3;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	180	None	add
1659	[BUG]  [BUGGY]  return  bitsOut  -  3;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	180	None	add
1660	[BUG]  [BUGGY]  return  bitsOut  -  3;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    int  count  =  readBits(bytesOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	180	None	add
1661	[BUG]  [BUGGY]  return  bitsOut  -  3;  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	180	None	add
1662	[BUG]  [BUGGY]  return  bitsOut  -  3;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	180	None	add
1663	[BUG]  [BUGGY]  return  bitsOut  -  3;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	180	None	add
1664	[BUG]  [BUGGY]  return  bitsOut  <  <  2  &&  count  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2  &&  count  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2  &&  count  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    2    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
1665	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  MASKS[count]);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bitsCachedSize,  MASKS[count]);	  return    bitsOut    &    MASKS[count];    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	240	None	replace
1666	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  count);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bitsCachedSize,  count);	  return    bitsOut    &    MASKS[count];    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	240	None	replace
1667	[BUG]  [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	202	None	replace
1668	[BUG]  [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	202	None	replace
1669	[BUG]  [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_S  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_S	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	202	None	replace
1670	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  16));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  16));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  16));	  return    bitsOut    &    Math.max(bitsCachedSize,    16));    	non-compiled	[CE]  ';'  expected	227	None	replace
1671	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(16,  bitsCachedSize));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(16,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(16,  bitsCachedSize));	  return    bitsOut    &    Math.max(bitsCachedSize,    16));    	non-compiled	[CE]  ';'  expected	227	None	replace
1672	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  12));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  12));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  12));	  return    bitsOut    &    Math.max(bitsCachedSize,    16));    	non-compiled	[CE]  ';'  expected	227	None	replace
1673	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  16));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  16));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  16));	  return    bitsOut    &    Math.max(bitsCachedSize,    16));    	non-compiled	[CE]  ';'  expected	227	None	replace
1674	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  32));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  32));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  32));	  return    bitsOut    &    Math.max(bitsCachedSize,    16));    	non-compiled	[CE]  ';'  expected	227	None	replace
1675	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	35	None	add
1676	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	35	None	add
1677	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	35	None	add
1678	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	35	None	add
1679	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	35	None	add
1680	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  in.skipChildren();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
1681	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	35	None	add
1682	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	35	None	add
1683	[BUG]  [BUGGY]  InputStream  in  =  readInt(bytes,  count);  [CE]  cannot  find  symbol  bytes  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bytes,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bytes,  count);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytes	113	None	replace
1684	[BUG]  [BUGGY]  in  =  readInt(bytes,  count);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(bytes,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(bytes,  count);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	113	None	replace
1685	[BUG]  [BUGGY]  InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytes  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytes	113	None	replace
1686	[BUG]  [BUGGY]  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	113	None	replace
1687	[BUG]  [BUGGY]  nextByteOrder  =  readBits(bytes,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  nextByteOrder  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  nextByteOrder  =  readBits(bytes,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	nextByteOrder  =  readBits(bytes,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  nextByteOrder	113	None	replace
1688	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  >=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >>    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	186	2	replace
1689	[BUG]  [BUGGY]  return(this.bitsCachedSize  >=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  >=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >>    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	186	2	replace
1690	[BUG]  [BUGGY]  return(this.bitsCachedSize  >>  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >>  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  >>  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >>    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	186	None	replace
1691	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >>    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	186	12	replace
1692	[BUG]  [BUGGY]  return(this.bitsCachedSize!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >>    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	186	12	replace
1693	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  unreachable  statement	281	None	replace
1694	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  unreachable  statement	281	None	replace
1695	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  short  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  short  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  short  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  possible  loss  of  precision	281	None	replace
1696	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  long  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  unreachable  statement	281	None	replace
1697	[BUG]  [BUGGY]  short  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  short  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	short  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  possible  loss  of  precision	281	None	replace
1698	[BUG]  [BUGGY]  InputStream  in  =  readBits(this.bitsCachedSize,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(this.bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(this.bitsCachedSize,  count);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this.bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	295	None	replace
1699	[BUG]  [BUGGY]  in  =  readBits(this.bitsCachedSize,  count);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(this.bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(this.bitsCachedSize,  count);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this.bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	295	None	replace
1700	[BUG]  [BUGGY]  bitsOut  =  readBits(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this.bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	295	None	replace
1701	[BUG]  [BUGGY]  InputStream  in  =  readBits(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this.bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	295	None	replace
1702	[BUG]  [BUGGY]  InputStream  in  =  readBits(this.bitsCachedSize,  0,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(this.bitsCachedSize,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(this.bitsCachedSize,  0,  count);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this.bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	295	None	replace
1703	[BUG]  [BUGGY]  in  =  readBits(this.bitsCachedSize,  0,  count);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(this.bitsCachedSize,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(this.bitsCachedSize,  0,  count);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this.bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	295	None	replace
1704	[BUG]  [BUGGY]  in  =  readBits(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(this.bitsCachedSize,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this.bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	295	None	replace
1705	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    2;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	317	None	replace
1706	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  2;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    2;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	317	None	replace
1707	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    2;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	317	None	replace
1708	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  2;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    2;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	317	None	replace
1709	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  4;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  4;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    2;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	317	None	replace
1710	[BUG]  [BUGGY]  return  bitsOut.length  -(count  -  bitsCachedSize);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(count  -  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(count  -  bitsCachedSize);	  return    bitsOut.length    -(bitsCachedSize    -    bitsOut.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	270	None	replace
1711	[BUG]  [BUGGY]  return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  -  bitsCachedSize);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  -  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  -  bitsCachedSize);	  return    bitsOut.length    -(bitsCachedSize    -    bitsOut.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	270	None	replace
1712	[BUG]  [BUGGY]  return  bitsOut.length  -(itemsCachedSize  -  bitsOut.length);  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(itemsCachedSize  -  bitsOut.length);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(itemsCachedSize  -  bitsOut.length);	  return    bitsOut.length    -(bitsCachedSize    -    bitsOut.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	270	None	replace
1713	[BUG]  [BUGGY]  return  bitsOut.length  -(bytesCachedSize  -  bitsOut.length);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bytesCachedSize  -  bitsOut.length);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bytesCachedSize  -  bitsOut.length);	  return    bitsOut.length    -(bitsCachedSize    -    bitsOut.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	270	None	replace
1714	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.min(count,  bitsCachedSize  -  bitsOut.length));  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.min(count,  bitsCachedSize  -  bitsOut.length));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.min(count,  bitsCachedSize  -  bitsOut.length));	  return    bitsOut.length    -(bitsCachedSize    -    bitsOut.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	270	None	replace
1715	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.abs(bitsCachedSize  -  bitsOut.length));  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.abs(bitsCachedSize  -  bitsOut.length));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.abs(bitsCachedSize  -  bitsOut.length));	  return    bitsOut.length    -(bitsCachedSize    -    bitsOut.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	270	None	replace
1716	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  min(long[],int)  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  min(long[],int)	96	None	replace
1717	[BUG]  [BUGGY]  return  bitsOut  &  count  <  <  4?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  count  <  <  4?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  count  <  <  4?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	243	None	replace
1718	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  2?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  2?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  2?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	243	None	replace
1719	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	243	None	replace
1720	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  8?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  8?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  8?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	243	None	replace
1721	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	243	None	replace
1722	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  3?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  3?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  3?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	243	None	replace
1723	[BUG]  [BUGGY]  return  bitsOut.length  -  2  +  1;  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -  2  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  2  +  1;	  return    bitsOut.length    -    2;    	non-compiled	[CE]  long  cannot  be  dereferenced	220	None	replace
1724	[BUG]  [BUGGY]  return  bitsOut.length  -  5;  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -  5;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  5;	  return    bitsOut.length    -    2;    	non-compiled	[CE]  long  cannot  be  dereferenced	220	None	replace
1725	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	100	10	replace
1726	[BUG]  [BUGGY]  return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	100	10	replace
1727	[BUG]  [BUGGY]  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	100	None	replace
1728	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(count,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	100	12	replace
1729	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(count,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(count,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	100	12	replace
1730	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	249	None	replace
1731	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	249	None	replace
1732	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	249	None	replace
1733	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readBits(byteOrder,  count);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readBits(byteOrder,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readBits(byteOrder,  count);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder);    	non-compiled	[CE]  not  a  statement	249	None	replace
1734	[BUG]  [BUGGY]  in  =  readBits(byteOrder);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(byteOrder);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	249	None	replace
1735	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MASKS[MAXIMUM_CACHE_SIZE];	  return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    	compilable	  [FE]  AssertionError  	22	12	replace
1736	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[MAXIMUM_CACHE_SIZE];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MASKS[MAXIMUM_CACHE_SIZE];	  return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    	compilable	  [FE]  AssertionError  	22	12	replace
1737	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  MASKS[MAXIMUM_CACHE_SIZE];	  return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    	compilable	  [FE]  AssertionError  	22	2	replace
1738	[BUG]  [BUGGY]  return  bitsOut  %  MASKS[MAXIMUM_CACHE_SIZE];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  MASKS[MAXIMUM_CACHE_SIZE];	  return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    	compilable	  [FE]  AssertionError  	22	2	replace
1739	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  +  MASKS[MAXIMUM_CACHE_SIZE];	  return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    	compilable	  [FE]  AssertionError  	22	12	replace
1740	[BUG]  [BUGGY]  return  bitsOut  +  MASKS[MAXIMUM_CACHE_SIZE];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  +  MASKS[MAXIMUM_CACHE_SIZE];	  return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    	compilable	  [FE]  AssertionError  	22	12	replace
1741	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	10	replace
1742	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	10	replace
1743	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	11	replace
1744	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)-  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	11	replace
1745	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	12	replace
1746	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	12	replace
1747	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	11	replace
1748	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE)-  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	11	replace
1749	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  count)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	12	replace
1750	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)-  1;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  count)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	12	replace
1751	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  *  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  *  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	11	replace
1752	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  *  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  *  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  *  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	11	replace
1753	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  2);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	12	replace
1754	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  2);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  2);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    	compilable	  [FE]  AssertionError  	102	12	replace
1755	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  +  2;  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  +  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  +  2;	  return    bitsOut.toByteArray()    &&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	128	None	replace
1756	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  BYTE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  BYTE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  BYTE_SIZE;	  return    bitsOut.toByteArray()    &&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	128	None	replace
1757	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize  *  MAXIMUM_CACHE_SIZE);  [CE]  ')'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    *    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	179	None	replace
1758	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.PI  *  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.PI  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.PI  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    *    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	179	None	replace
1759	[BUG]  [BUGGY]  return  bitsOut.length  -(itemsCachedSize  *  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(itemsCachedSize  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(itemsCachedSize  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    *    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	179	None	replace
1760	[BUG]  [BUGGY]  return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  *  bitsCachedSize);  [CE]  long  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  *  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  *  bitsCachedSize);	  return    bitsOut.length    -(bitsCachedSize    *    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	179	None	replace
1761	[BUG]  [BUGGY]  int  count  =  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	241	None	replace
1762	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    MAXIMUM_CACHE_SIZE?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	133	None	replace
1763	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	45	None	add
1764	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    bitsOut  &=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	45	None	add
1765	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
1766	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	45	None	add
1767	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	45	None	add
1768	[BUG]  [BUGGY]  return  bitsOut  &  4?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  4?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  4?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	129	None	replace
1769	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsCachedSize  :  0;	  return    bitsOut    <    <    4?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
1770	[BUG]  [BUGGY]  bitsOut.write(bitsCachedSize[count],  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  array  required,  but  int  found  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(bitsCachedSize[count],  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(bitsCachedSize[count],  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  array  required,  but  int  found	320	None	replace
1771	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.NAME,  MASKS[count],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  NAME  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.NAME,  MASKS[count],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.NAME,  MASKS[count],  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  NAME	320	None	replace
1772	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  0,  bitsCachedSize);  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  0,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  0,  bitsCachedSize);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  long  cannot  be  dereferenced	320	None	replace
1773	[BUG]  [BUGGY]  bitsOut.write(bitsCachedSize[count],  MAXIMUM_CACHE_SIZE,  MASKS[count]);  [CE]  array  required,  but  int  found  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(bitsCachedSize[count],  MAXIMUM_CACHE_SIZE,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(bitsCachedSize[count],  MAXIMUM_CACHE_SIZE,  MASKS[count]);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  array  required,  but  int  found	320	None	replace
1774	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	51	None	add
1775	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	51	None	add
1776	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	51	None	add
1777	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  	non-compiled	[CE]  possible  loss  of  precision	51	None	add
1778	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	51	None	add
1779	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	51	None	add
1780	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	51	None	add
1781	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(0,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(0,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	40	10	replace
1782	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(0,  bitsCachedSize)+  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(0,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(0,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	40	10	replace
1783	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASKS;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASKS;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASKS;	  return    bitsOut    *    MASKS_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	57	None	replace
1784	[BUG]  [BUGGY]  returns  bitsOut  *  MAXIMUM_CACHE_SIZE;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  returns  bitsOut  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	returns  bitsOut  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MASKS_SIZE;    	non-compiled	[CE]  ';'  expected	57	None	replace
1785	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  -  2;  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  -  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  -  2;	  return    bitsOut.toByteArray()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	301	None	replace
1786	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  -  BYTE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  -  BYTE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  -  BYTE_SIZE;	  return    bitsOut.toByteArray()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	301	None	replace
1787	[BUG]  [BUGGY]  in.read(bitsOut,  0,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  no  suitable  method  found  for  read(long,int,int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in.read(bitsOut,  0,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in.read(bitsOut,  0,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int,int)	211	None	replace
1788	[BUG]  [BUGGY]  in.read(bitsOut,  0,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MASKS[count];  [CE]  no  suitable  method  found  for  read(long,int,int)  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in.read(bitsOut,  0,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in.read(bitsOut,  0,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MASKS[count];	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int,int)	211	None	replace
1789	[BUG]  [BUGGY]  bitsOut  -=  in.read(byte,  MAXIMUM_CACHE_SIZE);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  in.read(byte,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  in.read(byte,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  '.class'  expected	211	None	replace
1790	[BUG]  [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	3	None	replace
1791	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	3	12	replace
1792	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	3	12	replace
1793	[BUG]  [BUGGY]  return  in.read(bytesOut,  bitsOut);  [CE]  cannot  find  symbol  bytesOut  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(bytesOut,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(bytesOut,  bitsOut);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  bytesOut	280	None	replace
1794	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_SIZE,  bitsOut,  MAXIMUM_CACHE_SIZE);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	280	None	replace
1795	[BUG]  [BUGGY]  return  in.read(bitsOut,  ByteOrder.BYTE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(bitsOut,  ByteOrder.BYTE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(bitsOut,  ByteOrder.BYTE_SIZE);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsOut);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	280	None	replace
1796	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  16);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  16);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  16);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	272	None	replace
1797	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  0);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  0);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  0);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	272	None	replace
1798	[BUG]  [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	191	None	replace
1799	[BUG]  [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE  -  1);  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE  -  1);	  return    bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	191	None	replace
1800	[BUG]  [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE  +  1);  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	191	None	replace
1801	[BUG]  [BUGGY]  return  bitsOut.toByteArray(Math.PI  *  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(Math.PI  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(Math.PI  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	191	None	replace
1802	[BUG]  [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }	  return    bitsOut    -    1;    bitsOut    -    1;    	non-compiled	[CE]  not  a  statement	334	None	replace
1803	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[MAXIMUM_CACHE_SIZE];  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[MAXIMUM_CACHE_SIZE];  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[MAXIMUM_CACHE_SIZE];  }	  return    bitsOut    -    1;    bitsOut    -    1;    	non-compiled	[CE]  not  a  statement	334	None	replace
1804	[BUG]  [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[MAXIMUM_CACHE_SIZE];  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[MAXIMUM_CACHE_SIZE];  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[MAXIMUM_CACHE_SIZE];  }	  return    bitsOut    -    1;    bitsOut    -    1;    	non-compiled	[CE]  not  a  statement	334	None	replace
1805	[BUG]  [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)];  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)];  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  else  {  bitsOut  =  new  long[Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)];  }	  return    bitsOut    -    1;    bitsOut    -    1;    	non-compiled	[CE]  not  a  statement	334	None	replace
1806	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	89	None	add
1807	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  bitsOut  %  MAXIMUM_CACHE_SIZE;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  bitsOut  %  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    bitsOut  %  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  not  a  statement	89	None	add
1808	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	89	None	add
1809	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	89	None	add
1810	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	89	None	add
1811	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  new  long[MAXIMUM_CACHE_SIZE];  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  new  long[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  new  long[MAXIMUM_CACHE_SIZE];	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	89	None	add
1812	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	89	None	add
1813	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  4;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    	compilable	  [FE]  AssertionError  	311	12	replace
1814	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  4;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  4;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    	compilable	  [FE]  AssertionError  	311	12	replace
1815	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (Math.PI  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (Math.PI  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (Math.PI  -  count))&  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	110	None	replace
1816	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];	  	non-compiled	[CE]  not  a  statement	21	None	add
1817	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	21	None	add
1818	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	21	None	add
1819	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	21	None	add
1820	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	21	None	add
1821	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  bitsOut.length;  [CE]  long  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  bitsOut.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    int  MAXIMUM_CACHE_SIZE  =  bitsOut.length;	  	non-compiled	[CE]  long  cannot  be  dereferenced	21	None	add
1822	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	21	None	add
1823	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1);    	non-compiled	[CE]  ';'  expected	225	None	replace
1824	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1L;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1);    	compilable	  [FE]  AssertionError  	225	12	replace
1825	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1L;  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1L;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1);    	compilable	  [FE]  AssertionError  	225	12	replace
1826	[BUG]  [BUGGY]  InputStream  in  =  readBits(this,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(this,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(this,  bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	251	None	replace
1827	[BUG]  [BUGGY]  in  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	251	None	replace
1828	[BUG]  [BUGGY]  in  =  readBits(this,  0,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(this,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(this,  0,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	251	None	replace
1829	[BUG]  [BUGGY]  bitsOut.write(BYTE_SIZE,  0,  count);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(BYTE_SIZE,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(BYTE_SIZE,  0,  count);	  bitsOut.write(MASKS,    0,    count);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	319	None	replace
1830	[BUG]  [BUGGY]  bitsOut.write(MASKS,  0,  count  -  2);  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS,  0,  count  -  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS,  0,  count  -  2);	  bitsOut.write(MASKS,    0,    count);    	non-compiled	[CE]  long  cannot  be  dereferenced	319	None	replace
1831	[BUG]  [BUGGY]  return  bitsOut  /  1;  bitsOut  /=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  bitsOut  /=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    bitsOut  /=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	154	None	add
1832	[BUG]  [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	154	None	add
1833	[BUG]  [BUGGY]  return  bitsOut  /  1;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(long,int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    in.read(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	154	None	add
1834	[BUG]  [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	154	None	add
1835	[BUG]  [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	154	None	add
1836	[BUG]  [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	308	None	replace
1837	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  bitsCachedSize);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol	308	None	replace
1838	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	182	None	add
1839	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	182	None	add
1840	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  	non-compiled	[CE]  unreachable  statement	182	None	add
1841	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	182	None	add
1842	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	182	None	add
1843	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	182	None	add
1844	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  	non-compiled	[CE]  unreachable  statement	182	None	add
1845	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    bitsOut  &=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	182	None	add
1846	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	103	None	add
1847	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	103	None	add
1848	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  	non-compiled	[CE]  ';'  expected	103	None	add
1849	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	103	None	add
1850	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	103	None	add
1851	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	103	None	add
1852	[BUG]  [BUGGY]  return  bitsOut  %  Math.ceil(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.ceil(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.ceil(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;	185	None	replace
1853	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  3;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
1854	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  3;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  3;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
1855	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
1856	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	185	12	replace
1857	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(0,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(0,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(0,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	30	None	replace
1858	[BUG]  [BUGGY]  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	240	None	replace
1859	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    &    MASKS[count];    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	240	None	replace
1860	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readIn  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readIn  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readIn	  return    bitsOut    &    MASKS[count];    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	240	None	replace
1861	[BUG]  [BUGGY]  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	119	None	replace
1862	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	116	None	replace
1863	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MASKS.length  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >>  (MASKS.length  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >>  (MASKS.length  -  count))  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	116	None	replace
1864	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MASKSSize  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MASKSSize  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >>  (MASKSSize  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >>  (MASKSSize  -  count))&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  MASKSSize	116	None	replace
1865	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE,  count);  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE,  count);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    count);    	non-compiled	[CE]  long  cannot  be  dereferenced	80	None	replace
1866	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  count);  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  count);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    count);    	non-compiled	[CE]  long  cannot  be  dereferenced	80	None	replace
1867	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -(bitsCachedSize  +  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -(bitsCachedSize  +  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    +    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	268	12	replace
1868	[BUG]  [BUGGY]  return  bitsOut  -(bitsCachedSize  +  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -(bitsCachedSize  +  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -(bitsCachedSize  +  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    +    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	268	12	replace
1869	[BUG]  [BUGGY]  return  bitsOut.length  -(bitsCachedSize  +  1);  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bitsCachedSize  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bitsCachedSize  +  1);	  return    bitsOut.length    -(bitsCachedSize    +    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	268	None	replace
1870	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE[0];  [CE]  array  required,  but  int  found  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE[0];	  return    bitsOut    &    MASKS[0];    	non-compiled	[CE]  array  required,  but  int  found	18	None	replace
1871	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    1);    	compilable	  [FE]  AssertionError  	262	11	replace
1872	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    1);    	compilable	  [FE]  AssertionError  	262	11	replace
1873	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    bitsOut  &=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	261	None	add
1874	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	261	None	add
1875	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	261	None	add
1876	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	261	None	add
1877	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	261	None	add
1878	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	261	None	add
1879	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	261	None	add
1880	[BUG]  [BUGGY]  return  BitReader.toByteArray(bitsOut);  [CE]  cannot  find  symbol  BitReader  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  BitReader.toByteArray(bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  BitReader.toByteArray(bitsOut);	  return    nextByteOrder.toByteArray();    	non-compiled	[CE]  cannot  find  symbol  BitReader	125	None	replace
1881	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	117	None	replace
1882	[BUG]  [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	117	None	replace
1883	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	117	None	replace
1884	[BUG]  [BUGGY]  Integer  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  is  already  defined  in  method  readBits(int)	117	None	replace
1885	[BUG]  [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	117	None	replace
1886	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readBits(byteOrder);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  InputStream  in  =  readBits(byteOrder);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder);    	non-compiled	[CE]  not  a  statement	249	None	replace
1887	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  bitsCachedSize);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder);    	non-compiled	[CE]  not  a  statement	249	None	replace
1888	[BUG]  [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  not  a  statement	276	None	replace
1889	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  +  1;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	330	None	replace
1890	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.FIELD_NAME)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.FIELD_NAME)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.FIELD_NAME)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	330	None	replace
1891	[BUG]  [BUGGY]  bitsOut  -=(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	330	None	replace
1892	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  not  a  statement	274	None	replace
1893	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut.int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut.int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut.int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  not  a  statement	274	None	replace
1894	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  long  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  long  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  long  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  not  a  statement	274	None	replace
1895	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &=  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &=  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  &=  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	39	None	add
1896	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	39	None	add
1897	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	39	None	add
1898	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  	non-compiled	[CE]  ';'  expected	39	None	add
1899	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	39	None	add
1900	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &=  Math.max(0,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &=  Math.max(0,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  &=  Math.max(0,  MAXIMUM_CACHE_SIZE)+  2;	  	non-compiled	[CE]  unreachable  statement	39	None	add
1901	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
1902	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (ByteOrder.LITTLE_ENDIAN  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (ByteOrder.LITTLE_ENDIAN  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (ByteOrder.LITTLE_ENDIAN  -  count))&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	69	None	replace
1903	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bytesCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bytesCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (bytesCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	69	None	replace
1904	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.PI  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.PI  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (Math.PI  -  count))&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	69	None	replace
1905	[BUG]  [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	120	None	replace
1906	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	120	None	replace
1907	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	120	None	replace
1908	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsIn);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsIn);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsIn);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	120	None	replace
1909	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  MASKS[count];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }  [CE]  incomparable  types:  long  and  <null>  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  MASKS[count];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  bitsOut  &  MASKS[count];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	165	None	replace
1910	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  MASKS[count];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_S  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  MASKS[count];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  bitsOut  &  MASKS[count];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_S	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	165	None	replace
1911	[BUG]  [BUGGY]  return  readBits(byteOrder,  MASKS[count]);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits(byteOrder,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(byteOrder,  MASKS[count]);	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	165	None	replace
1912	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	189	None	add
1913	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	189	None	add
1914	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	189	None	add
1915	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =  Integer.parseInt(this.bitsCachedSize);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	189	None	add
1916	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(BYTE_SIZE,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(BYTE_SIZE,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(BYTE_SIZE,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	31	None	replace
1917	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(BITS_CachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(BITS_CachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(BITS_CachedSize,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	31	None	replace
1918	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(ByteOrder.MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	31	None	replace
1919	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.MINUTE_SIZE,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.MINUTE_SIZE,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(ByteOrder.MINUTE_SIZE,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	31	None	replace
1920	[BUG]  [BUGGY]  bitsOut  =  readByte(bits,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bits  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(bits,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(bits,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bits	307	None	replace
1921	[BUG]  [BUGGY]  bitsOut  =  readByte(bytes,  BYTE_SIZE);  [CE]  cannot  find  symbol  bytes  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(bytes,  BYTE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(bytes,  BYTE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytes	307	None	replace
1922	[BUG]  [BUGGY]  bitsOut  =  readByte(bytes,  MASKS_SIZE);  [CE]  cannot  find  symbol  bytes  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(bytes,  MASKS_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(bytes,  MASKS_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytes	307	None	replace
1923	[BUG]  [BUGGY]  return  bitsOut  *  BYTE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  BYTE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  BYTE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	284	None	replace
1924	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_ENDIAN,  bitsOut);  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.BYTE_ENDIAN,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_ENDIAN,  bitsOut);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	279	None	replace
1925	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_ENDIAN,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.BYTE_ENDIAN,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_ENDIAN,  bitsCachedSize);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	279	None	replace
1926	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  2  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1927	[BUG]  [BUGGY]  return  bitsOut  -  2  *  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  2  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1928	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  2;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1929	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  2;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1930	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASKS.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASKS.length;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1931	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASKS.length;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASKS.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MASKS.length;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
1932	[BUG]  [BUGGY]  return  bitsOut  &  MASK_CAMCHE_SIZE;  [CE]  cannot  find  symbol  MASK_CAMCHE_SIZE  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASK_CAMCHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASK_CAMCHE_SIZE;	  return    bitsOut    &    MAXIMUM_CAMCHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASK_CAMCHE_SIZE	322	None	replace
1933	[BUG]  [BUGGY]  return  bitsOut  &  MASKSSize;  [CE]  cannot  find  symbol  MASKSSize  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKSSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKSSize;	  return    bitsOut    &    MAXIMUM_CAMCHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASKSSize	322	None	replace
1934	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count];  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  unreachable  statement	305	None	replace
1935	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASS[count];  [CE]  cannot  find  symbol  MASS  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count];  bitsOut  +=  MASS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  MASS	305	None	replace
1936	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASK[count];  [CE]  cannot  find  symbol  MASK  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASK[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count];  bitsOut  +=  MASK[count];	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  MASK	305	None	replace
1937	[BUG]  [BUGGY]  InputStream  in  =  readInt(bits,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bits  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bits,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bits,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bits	113	None	replace
1938	[BUG]  [BUGGY]  in  =  readInt(bits,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(bits,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(bits,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	113	None	replace
1939	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =  Integer.parseInt(this.bitsCachedSize);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	136	None	add
1940	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	136	None	add
1941	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(bitsCachedSize);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =  Integer.parseInt(bitsCachedSize);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	136	None	add
1942	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =  ByteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  incompatible  types	136	None	add
1943	[BUG]  [BUGGY]  return  Integer.toByteArray(bitsOut  +  1);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  Integer.toByteArray(bitsOut  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  Integer.toByteArray(bitsOut  +  1);	  return    Integer.toByteArray(bitsOut);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
1944	[BUG]  [BUGGY]  return  Integer.toByteArray(bitsOut  -  1);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  Integer.toByteArray(bitsOut  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  Integer.toByteArray(bitsOut  -  1);	  return    Integer.toByteArray(bitsOut);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
1945	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    bitsOut  &=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	85	None	add
1946	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	85	None	add
1947	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	85	None	add
1948	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	85	None	add
1949	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	85	None	add
1950	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	325	10	replace
1951	[BUG]  [BUGGY]  return  bitsOut  -  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	325	10	replace
1952	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	325	12	replace
1953	[BUG]  [BUGGY]  return  bitsOut  -  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	325	12	replace
1954	[BUG]  [BUGGY]  return  bitsOut  %  Math.log(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.log(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.log(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;	260	None	replace
1955	[BUG]  [BUGGY]  return  bitsOut  %  Math.pow(10,  bitsCachedSize);  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.pow(10,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.pow(10,  bitsCachedSize);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  possible  loss  of  precision	260	None	replace
1956	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  &  MASKS[0];  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  &  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    bitsOut  &  MASKS[0];	  	non-compiled	[CE]  not  a  statement	17	None	add
1957	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	17	None	add
1958	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	17	None	add
1959	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	17	None	add
1960	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[0];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[0];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	17	None	add
1961	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
1962	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	17	None	add
1963	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	245	None	replace
1964	[BUG]  [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	245	None	replace
1965	[BUG]  [BUGGY]  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))  &  MASKS[count];	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	2	None	replace
1966	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsOut.length);  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsOut.length);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsOut.length);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    0,    count);    	non-compiled	[CE]  long  cannot  be  dereferenced	219	None	replace
1967	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    0,    count);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	219	None	replace
1968	[BUG]  [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    0,    count);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	219	None	replace
1969	[BUG]  [BUGGY]  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	306	None	replace
1970	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    &    MASKS[count];    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	306	None	replace
1971	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readInt  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readInt  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readInt	  return    bitsOut    &    MASKS[count];    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	306	None	replace
1972	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	105	None	add
1973	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	105	None	add
1974	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	105	None	add
1975	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    bitsOut  &=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	105	None	add
1976	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	105	None	add
1977	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	105	None	add
1978	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	105	None	add
1979	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  3);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  3);	  return    bitsOut    &    Math.max(bitsCachedSize,    2);    	compilable	  [FE]  AssertionError  	327	12	replace
1980	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  3);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  3);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  3);	  return    bitsOut    &    Math.max(bitsCachedSize,    2);    	compilable	  [FE]  AssertionError  	327	12	replace
1981	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	37	None	add
1982	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	37	None	add
1983	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  	non-compiled	[CE]  unreachable  statement	37	None	add
1984	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;	  	non-compiled	[CE]  unreachable  statement	37	None	add
1985	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	37	None	add
1986	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	37	None	add
1987	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	37	None	add
1988	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  	non-compiled	[CE]  unreachable  statement	37	None	add
1989	[BUG]  [BUGGY]  return  bitsOut.length  -(bytesCachedSize  -  1);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bytesCachedSize  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bytesCachedSize  -  1);	  return    bitsOut.length    -(bytesCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	177	None	replace
1990	[BUG]  [BUGGY]  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	237	None	replace
1991	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	237	None	replace
1992	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  this.bitsCachedSize?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  this.bitsCachedSize?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1993	[BUG]  [BUGGY]  return(bitsOut  <  this.bitsCachedSize?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  this.bitsCachedSize?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  this.bitsCachedSize?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1994	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  this.bitsCachedSize?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  this.bitsCachedSize?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1995	[BUG]  [BUGGY]  return(bitsOut  >=  this.bitsCachedSize?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  this.bitsCachedSize?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  this.bitsCachedSize?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1996	[BUG]  [BUGGY]  return(bitsOut  <  =  this.bitsCachedSize?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  =  this.bitsCachedSize?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  =  this.bitsCachedSize?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
1997	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  1?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  1?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1998	[BUG]  [BUGGY]  return(bitsOut  <  1?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  1?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  1?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
1999	[BUG]  [BUGGY]  returns  bitsOut  /  MAXIMUM_CACHE_SIZE;  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  returns  bitsOut  /  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	returns  bitsOut  /  MAXIMUM_CACHE_SIZE;	  return    bitsOut    /    MASKS_SIZE;    	non-compiled	[CE]  ';'  expected	92	None	replace
2000	[BUG]  [BUGGY]  return  bitsIn  /  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bitsIn  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsIn  /  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsIn  /  MAXIMUM_CACHE_SIZE;	  return    bitsOut    /    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bitsIn	92	None	replace
2001	[BUG]  [BUGGY]  return  in;  InputStream  in  =  readInt(this.bitsCachedSize);  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in;  InputStream  in  =  readInt(this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in;  InputStream  in  =  readInt(this.bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(this.bitsCachedSize);    	non-compiled	[CE]  incompatible  types	299	None	replace
2002	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	97	None	add
2003	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
2004	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
2005	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
2006	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  in.read(bitsOut);  [CE]  no  suitable  method  found  for  read(long)  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  in.read(bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    in.read(bitsOut);	  	non-compiled	[CE]  no  suitable  method  found  for  read(long)	97	None	add
2007	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  unreachable  statement	197	None	replace
2008	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  unreachable  statement	197	None	replace
2009	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MASKS  -  count))&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	66	None	replace
2010	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.PI  -  count))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.PI  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (Math.PI  -  count))&  MASKS[count];	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	66	None	replace
2011	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS.length  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS.length  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MASKS.length  -  count))&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	66	None	replace
2012	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.PI  *  count))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.PI  *  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (Math.PI  *  count))&  MASKS[count];	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	66	None	replace
2013	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	244	None	replace
2014	[BUG]  [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	244	None	replace
2015	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.CACHE_SIZE  -  count))&  MASKS[count];  [CE]  cannot  find  symbol  CACHE_SIZE  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (Math.CACHE_SIZE  -  count))&  MASKS[count];	  return    this.bitsCachedSize;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  CACHE_SIZE	108	None	replace
2016	[BUG]  [BUGGY]  bitsOut  =(bitsCached!=  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached!=  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached!=  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	161	None	replace
2017	[BUG]  [BUGGY]  Return  bitsOut  -  MAXIMUM_CACHE_SIZE;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Return  bitsOut  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Return  bitsOut  -  MAXIMUM_CACHE_SIZE;	  Return    bitsOut    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	223	None	replace
2018	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  0,  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	127	None	replace
2019	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  16);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  16);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  16);	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	127	None	replace
2020	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  4);  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  4);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  4);	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	127	None	replace
2021	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  8);  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  8);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  8);	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	127	None	replace
2022	[BUG]  [BUGGY]  return  bitsOut  %  BYTE_SIZE;  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  BYTE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  BYTE_SIZE;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	90	None	replace
2023	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  8;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  8;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	90	12	replace
2024	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  8;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  8;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  8;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	90	12	replace
2025	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  4;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	90	12	replace
2026	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  4;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  MAXIMUM_CACHE_SIZE  +  4;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	90	12	replace
2027	[BUG]  [BUGGY]  return  bitsOut  -  1  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	171	None	replace
2028	[BUG]  [BUGGY]  return  bitsOut  <  <  1  &&  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1  &&  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1  &&  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
2029	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	297	None	replace
2030	[BUG]  [BUGGY]  if(bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	297	None	replace
2031	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readInt(MAXIMUM_CACHE_S  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readInt(MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readInt(MAXIMUM_CACHE_S	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	297	None	replace
2032	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readInt(MAXIMUM_CACHE_SIZE);  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readInt(MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readInt(MAXIMUM_CACHE_SIZE);  }	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	297	None	replace
2033	[BUG]  [BUGGY]  return  bitsOut  *  MASKSSize  -  1;  [CE]  cannot  find  symbol  MASKSSize  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MASKSSize  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MASKSSize  -  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    	non-compiled	[CE]  cannot  find  symbol  MASKSSize	54	None	replace
2034	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MASKS.length  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  MASKS.length  -  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    	compilable	  [FE]  AssertionError  	54	12	replace
2035	[BUG]  [BUGGY]  return  bitsOut  *  MASKS.length  -  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MASKS.length  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MASKS.length  -  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    	compilable	  [FE]  AssertionError  	54	12	replace
2036	[BUG]  [BUGGY]  return  bitsOut  -  Math.ceil(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.ceil(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.ceil(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	32	None	replace
2037	[BUG]  [BUGGY]  return  bitsOut  -  Math.floor(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.floor(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.floor(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	32	None	replace
2038	[BUG]  [BUGGY]  return  bitsOut  -  Math.log(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.log(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.log(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	32	None	replace
2039	[BUG]  [BUGGY]  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  not  a  statement	32	None	replace
2040	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.MAXIMUM_CACHE_SIZE);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	206	None	replace
2041	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	206	None	replace
2042	[BUG]  [BUGGY]  bitsOut.write(byteOrder);  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(byteOrder);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  long  cannot  be  dereferenced	206	None	replace
2043	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.MINIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.MINIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.MINIMUM_CACHE_SIZE);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	206	None	replace
2044	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	206	None	replace
2045	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	257	None	replace
2046	[BUG]  [BUGGY]  return  bitsOut  <  <  2  &&  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2  &&  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2  &&  bitsCachedSize  ==  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    2    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
2047	[BUG]  [BUGGY]  return  bitsOut  -  2  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  2  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    2    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	169	None	replace
2048	[BUG]  [BUGGY]  bitsOut  =  readBits(this,  MASKS[count],  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(this,  MASKS[count],  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(this,  MASKS[count],  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    bitsOut    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	255	None	replace
2049	[BUG]  [BUGGY]  bitsOut  =  readBits(this,  1,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(this,  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(this,  1,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    bitsOut    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	255	None	replace
2050	[BUG]  [BUGGY]  bitsOut  =  readBits(this,  BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(this,  BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(this,  BYTE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    bitsOut    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	255	None	replace
2051	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	140	None	add
2052	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	140	None	add
2053	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =  Integer.parseInt(this.bitsCachedSize);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	140	None	add
2054	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	316	None	replace
2055	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	316	None	replace
2056	[BUG]  [BUGGY]  int  count  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	316	None	replace
2057	[BUG]  [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	316	None	replace
2058	[BUG]  [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	316	None	replace
2059	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);	  	non-compiled	[CE]  unreachable  statement	101	None	add
2060	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	101	None	add
2061	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);	  	non-compiled	[CE]  unreachable  statement	101	None	add
2062	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	101	None	add
2063	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	101	None	add
2064	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	101	None	add
2065	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	101	None	add
2066	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	236	None	replace
2067	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	236	None	replace
2068	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  1]  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  1]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  ByteOrder.LITTLE_ENDIAN)?  MASKS[count  -  1]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	236	None	replace
2069	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  2  -  1;	  return    bitsOut    *    2;    	compilable	  [FE]  AssertionError  	56	12	replace
2070	[BUG]  [BUGGY]  return  bitsOut  *  2  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  2  -  1;	  return    bitsOut    *    2;    	compilable	  [FE]  AssertionError  	56	12	replace
2071	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  0)?  this.bitsCachedSize  :  0;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
2072	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  0)?  this.bitsCachedSize  :  0;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
2073	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
2074	[BUG]  [BUGGY]  return(bitsOut  <  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
2075	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MASKS[count];	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
2076	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MASKS[count];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MASKS[count];	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	12	replace
2077	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCachedSize);    	non-compiled	[CE]  not  a  statement	248	None	replace
2078	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder,  MAXIMUM_CACHE_SIZE  -  1);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  long  cannot  be  dereferenced	231	None	replace
2079	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  cannot  find  symbol  SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.SIZE,  MAXIMUM_CACHE_SIZE  -  1);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  cannot  find  symbol  SIZE	231	None	replace
2080	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	201	None	replace
2081	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	201	None	replace
2082	[BUG]  [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	201	None	replace
2083	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	201	None	replace
2084	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsCachedSize  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsCachedSize  &  MAXIMUM_CACHE_SIZE;	  return    bitsIn    &    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	321	12	replace
2085	[BUG]  [BUGGY]  return  bitsCachedSize  &  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsCachedSize  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsCachedSize  &  MAXIMUM_CACHE_SIZE;	  return    bitsIn    &    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	321	12	replace
2086	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    bitsOut  &=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	326	None	add
2087	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	326	None	add
2088	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  &=  Math.max(bitsCachedSize,  2);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  &=  Math.max(bitsCachedSize,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    bitsOut  &=  Math.max(bitsCachedSize,  2);	  	non-compiled	[CE]  unreachable  statement	326	None	add
2089	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	326	None	add
2090	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  Integer.MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	326	None	add
2091	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	326	None	add
2092	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(this,  MASKS_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  new  InputStreamReader(this,  MASKS_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  new  InputStreamReader(this,  MASKS_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    new    InputStreamReader(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	294	None	replace
2093	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(this,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  new  InputStreamReader(this,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  new  InputStreamReader(this,  bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    new    InputStreamReader(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	294	None	replace
2094	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	15	None	replace
2095	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  else  {  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  else  {  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  else  {  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  ')'  expected	15	None	replace
2096	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  else  {  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_S  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  else  {  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  else  {  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_S	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  ')'  expected	15	None	replace
2097	[BUG]  [BUGGY]  return  bitsOut  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	233	None	replace
2098	[BUG]  [BUGGY]  return  bitsOut  <  <  0  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  0  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  0  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	233	None	replace
2099	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	79	None	replace
2100	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.LITTLE_ENDIAN);  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.LITTLE_ENDIAN);	  return    bitsOut.read(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	79	None	replace
2101	[BUG]  [BUGGY]  return  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	79	None	replace
2102	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_ENDIAN,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_ENDIAN,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_ENDIAN,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	229	None	replace
2103	[BUG]  [BUGGY]  return  Integer.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  Integer.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  Integer.read(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	229	None	replace
2104	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  <  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  <  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  <  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	142	None	add
2105	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =  Integer.parseInt(this.bitsCachedSize);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	142	None	add
2106	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	142	None	add
2107	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =  ByteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  incompatible  types	142	None	add
2108	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  <  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  <  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  <  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	138	None	add
2109	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	138	None	add
2110	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	138	None	add
2111	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =  ByteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  incompatible  types	138	None	add
2112	[BUG]  [BUGGY]  in  =  readInt(MAXIMUM_CACHE_SIZE,  this.bitsCachedSize);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readInt(MAXIMUM_CACHE_SIZE,  this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readInt(MAXIMUM_CACHE_SIZE,  this.bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	293	None	replace
2113	[BUG]  [BUGGY]  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  this.bitsCachedSize);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  this.bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	293	None	replace
2114	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  bitsCachedSize);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(byteOrder,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(byteOrder,  bitsCachedSize);	  return    this.bitsCachedSize;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	109	None	replace
2115	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  +  1L;	  return    bitsOut    +    1;    	compilable	  [FE]  AssertionError  	157	12	replace
2116	[BUG]  [BUGGY]  return  bitsOut  +  1L;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  +  1L;	  return    bitsOut    +    1;    	compilable	  [FE]  AssertionError  	157	12	replace
2117	[BUG]  [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	329	None	replace
2118	[BUG]  [BUGGY]  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	329	None	replace
2119	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	329	None	replace
2120	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	329	None	replace
2121	[BUG]  [BUGGY]  bitsOut  =  ByteOrder.readBits(Math.PI  *  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  ByteOrder.readBits(Math.PI  *  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  ByteOrder.readBits(Math.PI  *  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	209	None	replace
2122	[BUG]  [BUGGY]  bitsOut  =  ByteOrder.readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  ByteOrder.readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  ByteOrder.readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	209	None	replace
2123	[BUG]  [BUGGY]  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE  -  1,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE  -  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE  -  1,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	209	None	replace
2124	[BUG]  [BUGGY]  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	209	None	replace
2125	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS_SIZE,  bitsCachedSize));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS_SIZE,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS_SIZE,  bitsCachedSize));	  return    bitsOut    &    Math.max(bitsCachedSize,    count));    	non-compiled	[CE]  ';'  expected	33	None	replace
2126	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	273	None	replace
2127	[BUG]  [BUGGY]  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	273	None	replace
2128	[BUG]  [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	273	None	replace
2129	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	273	None	replace
2130	[BUG]  [BUGGY]  return  in.read(byteOrder,  BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(byteOrder,  BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(byteOrder,  BYTE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    in.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	81	None	replace
2131	[BUG]  [BUGGY]  bitsOut  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	58	None	replace
2132	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	58	None	replace
2133	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    bitsOut  =(bitsCached  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	144	None	add
2134	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	144	None	add
2135	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  1))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	144	None	add
2136	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASK[count];  [CE]  cannot  find  symbol  MASK  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASK[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASK[count];	  	non-compiled	[CE]  cannot  find  symbol  MASK	144	None	add
2137	[BUG]  [BUGGY]  return  nextByteArray.toByteArray();  [CE]  cannot  find  symbol  nextByteArray  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  nextByteArray.toByteArray();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  nextByteArray.toByteArray();	  return    in.toByteArray();    	non-compiled	[CE]  cannot  find  symbol  nextByteArray	192	None	replace
2138	[BUG]  [BUGGY]  return  byteOrder.toByteArray();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  byteOrder.toByteArray();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  byteOrder.toByteArray();	  return    in.toByteArray();    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
2139	[BUG]  [BUGGY]  return  bitsOut  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	232	None	replace
2140	[BUG]  [BUGGY]  return  bitsOut  ||  MAXIMUM_CACHE_SIZE  >  bitsCachedSize;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  ||  MAXIMUM_CACHE_SIZE  >  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  ||  MAXIMUM_CACHE_SIZE  >  bitsCachedSize;	  return    bitsOut    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	232	None	replace
2141	[BUG]  [BUGGY]  return  bitsOut  &&  count  <  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &&  count  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &&  count  <  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	232	None	replace
2142	[BUG]  [BUGGY]  long  count  =  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  count  =  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  count  =  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	199	None	replace
2143	[BUG]  [BUGGY]  bitsOut.write(MASKS[count]  -  1);  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count]  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count]  -  1);	  bitsOut.write(MASKS[count]);    	non-compiled	[CE]  long  cannot  be  dereferenced	63	None	replace
2144	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (MAS  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (MAS  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (MAS	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached!=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	162	None	replace
2145	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (MA  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (MA  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (MA	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached!=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	162	None	replace
2146	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize!=  (MAS  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize!=  (MAS  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize!=  (MAS	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached!=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	162	None	replace
2147	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize!=  (MA  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize!=  (MA  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize!=  (MA	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached!=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	162	None	replace
2148	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  }  (MA  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  }  (MA  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  }  (MA	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached!=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	162	None	replace
2149	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (mas  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (mas  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (mas	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached!=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	162	None	replace
2150	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsCachedSize);  [CE]  no  suitable  method  found  for  read(int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.read(bitsOut);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	217	None	replace
2151	[BUG]  [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  bitsCachedSize);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bitsCachedSize  -  bitsCachedSize);	  return    bitsOut.length    -(bitsCachedSize    -    bitsOut.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	270	None	replace
2152	[BUG]  [BUGGY]  return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  -  bitsOut.length);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  -  bitsOut.length);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(MAXIMUM_CACHE_SIZE  -  bitsOut.length);	  return    bitsOut.length    -(bitsCachedSize    -    bitsOut.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	270	None	replace
2153	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  in.skipChildren();	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    in.skipChildren();    	non-compiled	[CE]  not  a  statement	118	None	replace
2154	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(ByteOrder.MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(ByteOrder.MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(ByteOrder.MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	106	None	replace
2155	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	333	None	replace
2156	[BUG]  [BUGGY]  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  +  1);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	333	None	replace
2157	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	195	None	replace
2158	[BUG]  [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	195	None	replace
2159	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  (MAXIMUM_CACHE_SIZE  *  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  (MAXIMUM_CACHE_SIZE  *  MASKS[count]);	  return    bitsOut    &    MAXIMUM_CACHE_SIZE[count];    	compilable	  [FE]  AssertionError  	258	10	replace
2160	[BUG]  [BUGGY]  return  bitsOut  &  (MAXIMUM_CACHE_SIZE  *  MASKS[count]);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  (MAXIMUM_CACHE_SIZE  *  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  (MAXIMUM_CACHE_SIZE  *  MASKS[count]);	  return    bitsOut    &    MAXIMUM_CACHE_SIZE[count];    	compilable	  [FE]  AssertionError  	258	10	replace
2161	[BUG]  [BUGGY]  return  bitsOut  &  (MAXIMUM_CACHE_SIZE  <  <  [count]);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  (MAXIMUM_CACHE_SIZE  <  <  [count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  (MAXIMUM_CACHE_SIZE  <  <  [count]);	  return    bitsOut    &    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  illegal  start  of  type	258	None	replace
2162	[BUG]  [BUGGY]  bitsOut  =  in.readInt();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
2163	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  count,  bitsCachedSize);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  count,  bitsCachedSize);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder,  count,  bitsCachedSize);  bitsOut  =  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	213	None	replace
2164	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsCachedSize!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	190	12	replace
2165	[BUG]  [BUGGY]  return(bitsCachedSize!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsCachedSize!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsCachedSize!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	190	12	replace
2166	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	141	12	replace
2167	[BUG]  [BUGGY]  return(bitsOut  >  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	141	12	replace
2168	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	141	12	replace
2169	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	141	12	replace
2170	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	41	None	add
2171	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	41	None	add
2172	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	41	None	add
2173	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	41	None	add
2174	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	41	None	add
2175	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	41	None	add
2176	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	41	None	add
2177	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	41	None	add
2178	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  BYTE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	216	None	replace
2179	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MASKS[count]);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  MASKS[count]);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	216	None	replace
2180	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	non-compiled	[CE]  ';'  expected	226	None	replace
2181	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	non-compiled	[CE]  ';'  expected	226	None	replace
2182	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  *  1));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  *  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  *  1));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	non-compiled	[CE]  ';'  expected	226	None	replace
2183	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	compilable	  [FE]  AssertionError  	226	12	replace
2184	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1)+  1;  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	compilable	  [FE]  AssertionError  	226	12	replace
2185	[BUG]  [BUGGY]  int  count  =  bitsOut  &  MASKS[count];  bitsOut  &  MASKS[count];  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  bitsOut  &  MASKS[count];  bitsOut  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  bitsOut  &  MASKS[count];  bitsOut  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  not  a  statement	302	None	replace
2186	[BUG]  [BUGGY]  int  count  =  bitsOut.length  -  MASKS[count];  bitsOut  &  MASKS[count];  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  bitsOut.length  -  MASKS[count];  bitsOut  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  bitsOut.length  -  MASKS[count];  bitsOut  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  not  a  statement	302	None	replace
2187	[BUG]  [BUGGY]  int  count  =  bitsOut.length  &  MASKS[count];  bitsOut  &  MASKS[count];  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  bitsOut.length  &  MASKS[count];  bitsOut  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  bitsOut.length  &  MASKS[count];  bitsOut  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  not  a  statement	302	None	replace
2188	[BUG]  [BUGGY]  int  count  =  bitsOut.length  -  MASKS[count];  bitsOut  -=  MASKS[count];  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  bitsOut.length  -  MASKS[count];  bitsOut  -=  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  bitsOut.length  -  MASKS[count];  bitsOut  -=  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	302	None	replace
2189	[BUG]  [BUGGY]  int  count  =  bitsOut.length  -  MASK[count];  bitsOut  &  MASKS[count];  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  bitsOut.length  -  MASK[count];  bitsOut  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  bitsOut.length  -  MASK[count];  bitsOut  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  not  a  statement	302	None	replace
2190	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	115	None	replace
2191	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (MASKS.length  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >=  (MASKS.length  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >=  (MASKS.length  -  count))  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	115	None	replace
2192	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
2193	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
2194	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	95	None	add
2195	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
2196	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCachedSize);	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
2197	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	95	None	add
2198	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MASKS_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MASKS_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MASKS_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	70	None	replace
2199	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MASK_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MASK_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  count  =  readBits(byteOrder,  MASK_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	70	None	replace
2200	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  in.skipChildren();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  in.skipChildren();	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();    	non-compiled	[CE]  not  a  statement	5	None	replace
2201	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  new  InputStreamReader(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  new  InputStreamReader(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
2202	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	87	None	add
2203	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	87	None	add
2204	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	87	None	add
2205	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	87	None	add
2206	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	87	None	add
2207	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    bitsOut  =  ByteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  incompatible  types	87	None	add
2208	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	87	None	add
2209	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MM_SIZE,  bitsCachedSize)+  1;  [CE]  cannot  find  symbol  MM_SIZE  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MM_SIZE,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MM_SIZE,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    	non-compiled	[CE]  cannot  find  symbol  MM_SIZE	46	None	replace
2210	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	310	None	add
2211	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	310	None	add
2212	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	310	None	add
2213	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	310	None	add
2214	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	310	None	add
2215	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  Integer.MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	310	None	add
2216	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	310	None	add
2217	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    0;    	non-compiled	[CE]  possible  loss  of  precision	282	None	replace
2218	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (bytesCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (bytesCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (bytesCachedSize  -  count))&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	13	None	replace
2219	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[BYTEOrder.LITTLE_ENDIAN];  [CE]  cannot  find  symbol  BYTEOrder  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[BYTEOrder.LITTLE_ENDIAN];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[BYTEOrder.LITTLE_ENDIAN];	  return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  cannot  find  symbol  BYTEOrder	22	None	replace
2220	[BUG]  [BUGGY]  return  bitsOut  -  1?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	130	None	replace
2221	[BUG]  [BUGGY]  return  bitsOut  %  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	130	None	replace
2222	[BUG]  [BUGGY]  return  bitsOut  -  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	130	None	replace
2223	[BUG]  [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  not  a  statement	267	None	replace
2224	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.MIN_BYTE_SIZE,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.MIN_BYTE_SIZE,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(ByteOrder.MIN_BYTE_SIZE,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	267	None	replace
2225	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	25	None	add
2226	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	25	None	add
2227	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
2228	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	25	None	add
2229	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	25	None	add
2230	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	25	None	add
2231	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	25	None	add
2232	[BUG]  [BUGGY]  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    in.readInt();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	332	None	replace
2233	[BUG]  [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    in.readInt();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	332	None	replace
2234	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  -=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  -=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  -=  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    in.readInt();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	332	None	replace
2235	[BUG]  [BUGGY]  bitsOut  -=  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    in.readInt();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	332	None	replace
2236	[BUG]  [BUGGY]  return  bitsOut  *  2;  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	55	None	add
2237	[BUG]  [BUGGY]  return  bitsOut  *  2;  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
2238	[BUG]  [BUGGY]  return  bitsOut  *  2;  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    bitsOut  +=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	55	None	add
2239	[BUG]  [BUGGY]  return  bitsOut  *  2;  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    bitsOut  =  readBits(MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	55	None	add
2240	[BUG]  [BUGGY]  return  bitsOut  *  2;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
2241	[BUG]  [BUGGY]  return  bitsOut  *  2;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	55	None	add
2242	[BUG]  [BUGGY]  bitsOut  =  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  *  MAXIMUM_CACHE_SIZE  :  ByteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  *  MAXIMUM_CACHE_SIZE  :  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  *  MAXIMUM_CACHE_SIZE  :  ByteOrder.LITTLE_ENDIAN;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    ByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  incompatible  types	218	None	replace
2243	[BUG]  [BUGGY]  bitsOut  =  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  /  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE  :  ByteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  /  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE  :  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  /  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE  :  ByteOrder.LITTLE_ENDIAN;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    ByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  incompatible  types	218	None	replace
2244	[BUG]  [BUGGY]  bitsOut  =  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    ByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	218	None	replace
2245	[BUG]  [BUGGY]  bitsOut  =  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  /  MAXIMUM_CACHE_SIZE  :  ByteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  /  MAXIMUM_CACHE_SIZE  :  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  /  MAXIMUM_CACHE_SIZE  :  ByteOrder.LITTLE_ENDIAN;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    ByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  incompatible  types	218	None	replace
2246	[BUG]  [BUGGY]  bitsOut  =  Integer.MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  Integer.MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  Integer.MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    ByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	218	None	replace
2247	[BUG]  [BUGGY]  return  bitsOut?  0  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  0  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  0  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    0?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	134	None	replace
2248	[BUG]  [BUGGY]  return  in.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.toByteArray()  &&  count  <  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    count    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
2249	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  (MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  (MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  (MAXIMUM_CACHE_SIZE);	  return    bitsOut.toByteArray()    &&    count    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	124	None	replace
2250	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	196	None	replace
2251	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  bitsOut;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  bitsOut;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	291	None	add
2252	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  bitsOut;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  bitsOut;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	291	None	add
2253	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =  Integer.parseInt(this.bitsCachedSize);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	291	None	add
2254	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >=  0)?  this.bitsCachedSize  :  bitsOut;  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >=  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bitsCached  >=  0)?  this.bitsCachedSize  :  bitsOut;	  	non-compiled	[CE]  unreachable  statement	291	None	add
2255	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
2256	[BUG]  [BUGGY]  return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
2257	[BUG]  [BUGGY]  return(bitsOut  <  =  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  =  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  =  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
2258	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
2259	[BUG]  [BUGGY]  return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
2260	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  this.bitsCachedSize)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  this.bitsCachedSize)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
2261	[BUG]  [BUGGY]  return(bitsOut  <  this.bitsCachedSize)?  this.bitsCachedSize  :  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  this.bitsCachedSize)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  this.bitsCachedSize)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
2262	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKSSize  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MASKSSize  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKSSize  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MASKSSize  -  count))&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  MASKSSize	11	None	replace
2263	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (MAXIMUM_CACHE_SIZE  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (MAXIMUM_CACHE_SIZE  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (MAXIMUM_CACHE_SIZE  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	163	None	replace
2264	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MAXIMUM_CACHE_SIZE  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MAXIMUM_CACHE_SIZE  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MAXIMUM_CACHE_SIZE  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	163	None	replace
2265	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCachedSize  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCachedSize  >=  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	163	None	replace
2266	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCachedSize  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCachedSize  >>  (bitsCachedSize  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	163	None	replace
2267	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	163	None	replace
2268	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	259	None	add
2269	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	259	None	add
2270	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	259	None	add
2271	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	259	None	add
2272	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  cannot  find  symbol	259	None	add
2273	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  cannot  find  symbol	259	None	add
2274	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  >  bitsCachedSize;  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  >  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  >  bitsCachedSize;	  return    bitsOut.toByteArray()    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	300	None	replace
2275	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  size  >  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  size  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  size  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	300	None	replace
2276	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[MAXIMUM_CACHE_SIZE];	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	250	None	replace
2277	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[0];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[0];	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	250	None	replace
2278	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  -  1];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  -  1];	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	250	None	replace
2279	[BUG]  [BUGGY]  int  count  =  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  bitsOut  &  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	238	None	replace
2280	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(BYTE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	104	None	replace
2281	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(BITS_CachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BITS_CachedSize  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(BITS_CachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(BITS_CachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BITS_CachedSize	104	None	replace
2282	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	104	12	replace
2283	[BUG]  [BUGGY]  return  bitsOut  -  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	104	12	replace
2284	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsOut  :  MAXIMUM_CACHE_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsOut  :  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsOut  :  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	243	None	replace
2285	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
2286	[BUG]  [BUGGY]  return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
2287	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MASKS[count];	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
2288	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MASKS[count];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MASKS[count];	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
2289	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  0)?  this.bitsCachedSize  :  0;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
2290	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  0)?  this.bitsCachedSize  :  0;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
2291	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	53	None	add
2292	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	53	None	add
2293	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	53	None	add
2294	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	53	None	add
2295	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	53	None	add
2296	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	53	None	add
2297	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  0;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  0;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	53	None	add
2298	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  bitsCachedSize.length;  [CE]  int  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  bitsCachedSize.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  bitsCachedSize.length;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	93	None	replace
2299	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  bitsCachedSize;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE.length;    	compilable	  [FE]  AssertionError  	93	12	replace
2300	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  bitsCachedSize;  [FE]  AssertionError  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  bitsCachedSize;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE.length;    	compilable	  [FE]  AssertionError  	93	12	replace
2301	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }	  return    this.bitsCachedSize;    int    count    =    this.bitsCachedSize;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	298	None	replace
2302	[BUG]  [BUGGY]  if(bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }	  return    this.bitsCachedSize;    int    count    =    this.bitsCachedSize;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	298	None	replace
2303	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  else  {  bitsOut  =  new  int[MAXIMUM_CACHE_SIZE];  }  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  else  {  bitsOut  =  new  int[MAXIMUM_CACHE_SIZE];  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  else  {  bitsOut  =  new  int[MAXIMUM_CACHE_SIZE];  }	  return    this.bitsCachedSize;    int    count    =    this.bitsCachedSize;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	298	None	replace
2304	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  else  {  bitsOut  =  new  long[MAXIMUM_CACHE_SIZE];  }  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  else  {  bitsOut  =  new  long[MAXIMUM_CACHE_SIZE];  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  else  {  bitsOut  =  new  long[MAXIMUM_CACHE_SIZE];  }	  return    this.bitsCachedSize;    int    count    =    this.bitsCachedSize;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	298	None	replace
2305	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  else  {  bitsOut  =  new  int[Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  else  {  bitsOut  =  new  int[Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  else  {  bitsOut  =  new  int[Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM	  return    this.bitsCachedSize;    int    count    =    this.bitsCachedSize;    	non-compiled	[CE]  ')'  expected	298	None	replace
2306	[BUG]  [BUGGY]  if(bitsOut  >=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  }  else  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  >=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  }  else  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  >=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  }  else  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	283	None	replace
2307	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  ==  0)?  this.bitsCachedSize  :  0;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
2308	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  ==  0)?  this.bitsCachedSize  :  0;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
2309	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  ==  0)?  this.bitsCachedSize  :  1;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
2310	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  ==  0)?  this.bitsCachedSize  :  1;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
2311	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  +  1]  -  1,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  +  1]  -  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  +  1]  -  1,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count    +    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	64	None	replace
2312	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  3;	  return    bitsOut    -    3;    	compilable	  [FE]  AssertionError  	181	12	replace
2313	[BUG]  [BUGGY]  return  bitsOut  %  3;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  3;	  return    bitsOut    -    3;    	compilable	  [FE]  AssertionError  	181	12	replace
2314	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  +  3;	  return    bitsOut    -    3;    	compilable	  [FE]  AssertionError  	181	12	replace
2315	[BUG]  [BUGGY]  return  bitsOut  +  3;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  +  3;	  return    bitsOut    -    3;    	compilable	  [FE]  AssertionError  	181	12	replace
2316	[BUG]  [BUGGY]  return  bitsOut.length  -  1  +  1;  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -  1  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  1  +  1;	  return    bitsOut.length    -    1;    	non-compiled	[CE]  long  cannot  be  dereferenced	174	None	replace
2317	[BUG]  [BUGGY]  return  bitsOut?  MAXIMUM_CACHE_SIZE  :  bitsOut;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  MAXIMUM_CACHE_SIZE  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  MAXIMUM_CACHE_SIZE  :  bitsOut;	  return    bitsOut?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	242	None	replace
2318	[BUG]  [BUGGY]  return  bitsOut?  MAXIMUM_CACHE_SIZE  :  bitsCachedSize;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  MAXIMUM_CACHE_SIZE  :  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  MAXIMUM_CACHE_SIZE  :  bitsCachedSize;	  return    bitsOut?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	242	None	replace
2319	[BUG]  [BUGGY]  return  bitsOut?  0,  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [CE]  :  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  0,  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  0,  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  :  expected	242	None	replace
2320	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS  -  count))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MASKS  -  count))&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	234	None	replace
2321	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS.length  -  count))&  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS.length  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MASKS.length  -  count))&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	234	None	replace
2322	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS[count  -  1]))&  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS[count  -  1]))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MASKS[count  -  1]))&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	234	None	replace
2323	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (MASKS  -  count))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (MASKS  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (MASKS  -  count))&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	234	None	replace
2324	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS[count  -  1))&  MASKS[count];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS[count  -  1))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MASKS[count  -  1))&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ']'  expected	234	None	replace
2325	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  MASKS[count];  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  MASKS[count];	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  unreachable  statement	246	None	replace
2326	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >=  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >=  ByteOrder.LITTLE_ENDIAN)?  MAXIMUM_CACHE_SIZE  :  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	239	None	replace
2327	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	14	None	replace
2328	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  >  expected	14	None	replace
2329	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	14	None	replace
2330	[BUG]  [BUGGY]  return  bitsOut  -  1L;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	150	None	add
2331	[BUG]  [BUGGY]  return  bitsOut  -  1L;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	150	None	add
2332	[BUG]  [BUGGY]  return  bitsOut  -  1L;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	150	None	add
2333	[BUG]  [BUGGY]  return  bitsOut  -  1L;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(long,int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    in.read(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	150	None	add
2334	[BUG]  [BUGGY]  return  bitsOut  -  1L;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	150	None	add
2335	[BUG]  [BUGGY]  return  bitsOut  -  1L;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  cannot  find  symbol	150	None	add
2336	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (MASKS  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (MASKS  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (MASKS  -  count))&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	10	None	replace
2337	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	324	None	add
2338	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	324	None	add
2339	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  	non-compiled	[CE]  ';'  expected	324	None	add
2340	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  	non-compiled	[CE]  ';'  expected	324	None	add
2341	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	324	None	add
2342	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	324	None	add
2343	[BUG]  [BUGGY]  bitsOut  -=  in.readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  in.readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  in.readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	212	None	replace
2344	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	212	None	replace
2345	[BUG]  [BUGGY]  bitsOut  -=  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	12	None	replace
2346	[BUG]  [BUGGY]  bitsOut.read(in,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.read(in,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.read(in,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	208	None	replace
2347	[BUG]  [BUGGY]  bitsOut.read(byte,  MAXIMUM_CACHE_SIZE);  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.read(byte,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.read(byte,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  '.class'  expected	208	None	replace
2348	[BUG]  [BUGGY]  bitsOut.write(bitsCachedSize[count],  0,  MAXIMUM_CACHE_SIZE);  [CE]  array  required,  but  int  found  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(bitsCachedSize[count],  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(bitsCachedSize[count],  0,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count],    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  array  required,  but  int  found	62	None	replace
2349	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  0,  MASKSSize);  [CE]  cannot  find  symbol  MASKSSize  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  0,  MASKSSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  0,  MASKSSize);	  bitsOut.write(MASKS[count],    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MASKSSize	62	None	replace
2350	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	187	None	add
2351	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	187	None	add
2352	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  incompatible  types	187	None	add
2353	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =  Integer.parseInt(this.bitsCachedSize);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	187	None	add
2354	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bitsCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bitsCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsCachedSize  :(bitsCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsCachedSize    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	264	None	replace
2355	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  16);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  16);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsCachedSize  :(bytesCached  >  16);	  return    bitsOut    <    <    4?    bitsCachedSize    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	264	None	replace
2356	[BUG]  [BUGGY]  return  bitsOut?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  bitsCachedSize  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsCachedSize    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	264	None	replace
2357	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	203	None	replace
2358	[BUG]  [BUGGY]  bitsOut  =  readBits(Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	203	None	replace
2359	[BUG]  [BUGGY]  bitsOut  =  readBits(ByteOrder.LITTLE_ENDIAN);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(ByteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(ByteOrder.LITTLE_ENDIAN);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	203	None	replace
2360	[BUG]  [BUGGY]  bitsOut  =  readBits(bitsCachedSize);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(bitsCachedSize);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	203	None	replace
2361	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (mode  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  mode  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (mode  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (mode  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  mode	164	None	replace
2362	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.PI  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.PI  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (Math.PI  -  count))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	164	None	replace
2363	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  >>  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCachedSize  >>  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCachedSize  >>  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	164	None	replace
2364	[BUG]  [BUGGY]  bitsOut.write(MASKS[0,  MAXIMUM_CACHE_SIZE));  [CE]  ']'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[0,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[0,  MAXIMUM_CACHE_SIZE));	  bitsOut.write(MASKS[count    -    1,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ']'  expected	61	None	replace
2365	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1,  1]);  [CE]  ']'  expected  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1,  1]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1,  1]);	  bitsOut.write(MASKS[count    -    1,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ']'  expected	61	None	replace
2366	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1,  16));  [CE]  ']'  expected  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1,  16));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1,  16));	  bitsOut.write(MASKS[count    -    1,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ']'  expected	61	None	replace
2367	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1,  MASKS_SIZE));  [CE]  ']'  expected  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1,  MASKS_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1,  MASKS_SIZE));	  bitsOut.write(MASKS[count    -    1,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ']'  expected	61	None	replace
2368	[BUG]  [BUGGY]  return  bitsOut  -  3;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(long,int)  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    in.read(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	180	None	add
2369	[BUG]  [BUGGY]  return  bitsOut  -  3;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	180	None	add
2370	[BUG]  [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	180	None	add
2371	[BUG]  [BUGGY]  return  bitsOut  -  3;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  no  suitable  method  found  for  read(long,int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	180	None	add
2372	[BUG]  [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	180	None	add
2373	[BUG]  [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	180	None	add
2374	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bitsCached  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  	non-compiled	[CE]  incompatible  types	289	None	add
2375	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =  Integer.parseInt(this.bitsCachedSize);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	289	None	add
2376	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  int  MAXIMUM_CACHE_SIZE  =  this.bitsCachedSize;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  int  MAXIMUM_CACHE_SIZE  =  this.bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    int  MAXIMUM_CACHE_SIZE  =  this.bitsCachedSize;	  	non-compiled	[CE]  unreachable  statement	289	None	add
2377	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	289	None	add
2378	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	35	None	add
2379	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	35	None	add
2380	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  	non-compiled	[CE]  unreachable  statement	35	None	add
2381	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	35	None	add
2382	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  	non-compiled	[CE]  unreachable  statement	35	None	add
2383	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	35	None	add
2384	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1]  *  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1]  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1]  *  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count    -    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	59	None	replace
2385	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1]  +  BYTE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1]  +  BYTE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1]  +  BYTE_SIZE);	  bitsOut.write(MASKS[count    -    1]);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	59	None	replace
2386	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1]  +  1);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1]  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1]  +  1);	  bitsOut.write(MASKS[count    -    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	59	None	replace
2387	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	278	None	replace
2388	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	278	None	replace
2389	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	278	None	replace
2390	[BUG]  [BUGGY]  return  in.readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    InputStream    in    =    readInt(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
2391	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
2392	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
2393	[BUG]  [BUGGY]  return  bitsOut  -  Math.log(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.log(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.log(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;	42	None	replace
2394	[BUG]  [BUGGY]  int  count  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	166	None	replace
2395	[BUG]  [BUGGY]  return  readBits(bytesCached,  MASKS[count]);  [CE]  cannot  find  symbol  bytesCached  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits(bytesCached,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(bytesCached,  MASKS[count]);	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCached	166	None	replace
2396	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsByteOrder.LITTLE_ENDIAN;  [CE]  cannot  find  symbol  bitsByteOrder  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsByteOrder.LITTLE_ENDIAN;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  cannot  find  symbol  bitsByteOrder	277	None	replace
2397	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsOut;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsOut;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  possible  loss  of  precision	277	None	replace
2398	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  not  a  statement	277	None	replace
2399	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;  [CE]  unreachable  statement  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsCachedSize;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  unreachable  statement	277	None	replace
2400	[BUG]  [BUGGY]  return  in.skipChildren();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.skipChildren();	  return    bitsOut    -    1;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
2401	[BUG]  [BUGGY]  bitsOut  -  1;  in.skipChildren();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -  1;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -  1;  in.skipChildren();	  return    bitsOut    -    1;    in.skipChildren();    	non-compiled	[CE]  not  a  statement	16	None	replace
2402	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.FIELD_NAME)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  FIELD_NAME  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.FIELD_NAME)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.FIELD_NAME)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	328	None	replace
2403	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	328	None	replace
2404	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder.MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder.MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder.MINIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(byteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_CACHE_SIZE	83	None	replace
2405	[BUG]  [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	265	None	replace
2406	[BUG]  [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	265	None	replace
2407	[BUG]  [BUGGY]  return  bitsOut  -  2?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  2?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    2?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	131	None	replace
2408	[BUG]  [BUGGY]  bitsOut.write(BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(BYTE_SIZE,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASK_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	318	None	replace
2409	[BUG]  [BUGGY]  bitsOut.write(BYTE_SIZE,  BYTE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(BYTE_SIZE,  BYTE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(BYTE_SIZE,  BYTE_SIZE);	  bitsOut.write(MASK_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	318	None	replace
2410	[BUG]  [BUGGY]  bitsOut.write(size,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  size  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(size,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(size,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASK_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  size	318	None	replace
2411	[BUG]  [BUGGY]  bitsOut.write(BYTE_SIZE,  MASK_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(BYTE_SIZE,  MASK_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(BYTE_SIZE,  MASK_SIZE);	  bitsOut.write(MASK_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	318	None	replace
2412	[BUG]  [BUGGY]  return  readBits(byteOrder,  bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits(byteOrder,  bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(byteOrder,  bitsOut,  MAXIMUM_CACHE_SIZE);	  return    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	204	None	replace
2413	[BUG]  [BUGGY]  return  readBits(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	204	None	replace
2414	[BUG]  [BUGGY]  return  readBits(byteOrder,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits(byteOrder,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(byteOrder,  bitsCachedSize);	  return    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	204	None	replace
2415	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  +  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	23	None	add
2416	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [CE]  unreachable  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  +  1];	  	non-compiled	[CE]  unreachable  statement	23	None	add
2417	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  +=  MASKS[count  +  1];  [CE]  unreachable  statement  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  +=  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  +=  MASKS[count  +  1];	  	non-compiled	[CE]  unreachable  statement	23	None	add
2418	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  +  1];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  +  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	23	None	add
2419	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  +  1];  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  +  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	23	None	add
2420	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count  +  1];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count  +  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	23	None	add
2421	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	98	11	replace
2422	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(10,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	98	11	replace
2423	[BUG]  [BUGGY]  return  in;  in.skipChildren();  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in;  in.skipChildren();	  return    this.bitsCachedSize;    in.skipChildren();    	non-compiled	[CE]  incompatible  types	112	None	replace
2424	[BUG]  [BUGGY]  return  in.bitsCachedSize;  [CE]  cannot  find  symbol  bitsCachedSize  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.bitsCachedSize;	  return    this.bitsCachedSize;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol  bitsCachedSize	112	None	replace
2425	[BUG]  [BUGGY]  while(in.skipChildren())  {  return  this.bitsCachedSize;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(in.skipChildren())  {  return  this.bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(in.skipChildren())  {  return  this.bitsCachedSize;	  return    this.bitsCachedSize;    in.skipChildren();    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
2426	[BUG]  [BUGGY]  while(in.skipChildren())  {  return  this.bitsCachedSize;  in.skipChildren();  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(in.skipChildren())  {  return  this.bitsCachedSize;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(in.skipChildren())  {  return  this.bitsCachedSize;  in.skipChildren();	  return    this.bitsCachedSize;    in.skipChildren();    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
2427	[BUG]  [BUGGY]  while(in.skipChildren())  {  return  this.bitsCachedSize;  in.skipChildren();  }  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(in.skipChildren())  {  return  this.bitsCachedSize;  in.skipChildren();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(in.skipChildren())  {  return  this.bitsCachedSize;  in.skipChildren();  }	  return    this.bitsCachedSize;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
2428	[BUG]  [BUGGY]  return  bitsOut  <  <  32  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  32  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  32  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    16    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
2429	[BUG]  [BUGGY]  return  bitsOut  -  2;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	152	None	add
2430	[BUG]  [BUGGY]  return  bitsOut  -  2;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(long,int)  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    in.read(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	152	None	add
2431	[BUG]  [BUGGY]  return  bitsOut  -  2;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  no  suitable  method  found  for  read(long,int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	152	None	add
2432	[BUG]  [BUGGY]  return  bitsOut  -  2;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	152	None	add
2433	[BUG]  [BUGGY]  return  bitsOut  -  2;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	152	None	add
2434	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	8	None	replace
2435	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCached,  0);  [CE]  cannot  find  symbol  bytesCached  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(bytesCached,  0);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(bytesCached,  0);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCached	8	None	replace
2436	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE);  [CE]  ']'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ']'  expected	60	None	replace
2437	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  BYTE_ENDIAN);  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  BYTE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  BYTE_ENDIAN);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	60	None	replace
2438	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
2439	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	99	None	add
2440	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
2441	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	99	None	add
2442	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readInt(bitsCachedSize);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
2443	[BUG]  [BUGGY]  return  bitsOut  <  <  4  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE    +    1;    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
2444	[BUG]  [BUGGY]  return  bitsOut  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	172	None	replace
2445	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  bitsOut  /  MAXIMUM_CACHE_SIZE;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  bitsOut  /  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    bitsOut  /  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  not  a  statement	47	None	add
2446	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	47	None	add
2447	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	47	None	add
2448	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	47	None	add
2449	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
2450	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  in.read(bitsOut);  [CE]  no  suitable  method  found  for  read(long)  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  in.read(bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    in.read(bitsOut);	  	non-compiled	[CE]  no  suitable  method  found  for  read(long)	47	None	add
2451	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  (bitsCachedSize  -  1))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  <  (bitsCachedSize  -  1))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  <  (bitsCachedSize  -  1))&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    1))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	167	None	replace
2452	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    bitsOut  =  Integer.parseInt(this.bitsCachedSize);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	148	None	add
2453	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	148	None	add
2454	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	148	None	add
2455	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	148	None	add
2456	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  +  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  MAXIMUM_CACHE_SIZE  +  2;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	88	12	replace
2457	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  +  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE  +  2;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	88	12	replace
2458	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	331	None	replace
2459	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.FIELD_NAME)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.FIELD_NAME)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.FIELD_NAME)?  bitsOut  :  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	331	None	replace
2460	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  16);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  16);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  16);	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	331	None	replace
2461	[BUG]  [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	156	None	add
2462	[BUG]  [BUGGY]  return  bitsOut  +  1;  bitsOut  +=  ByteOrder.LITTLE_ENDIAN;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  bitsOut  +=  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    bitsOut  +=  ByteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	156	None	add
2463	[BUG]  [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	156	None	add
2464	[BUG]  [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	156	None	add
2465	[BUG]  [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();	  	non-compiled	[CE]  cannot  find  symbol	156	None	add
2466	[BUG]  [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	156	None	add
2467	[BUG]  [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();	  	non-compiled	[CE]  cannot  find  symbol	156	None	add
2468	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  16;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  16;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  16;	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	193	None	replace
2469	[BUG]  [BUGGY]  return  bitsOut.toByteArray(),  4;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(),  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(),  4;	  return    bitsOut.toByteArray(),    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	193	None	replace
2470	[BUG]  [BUGGY]  int  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	200	None	replace
2471	[BUG]  [BUGGY]  bitsOut  -=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	200	None	replace
2472	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	313	None	replace
2473	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CA  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CA  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CA	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	313	None	replace
2474	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	313	None	replace
2475	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[bitsCachedSize  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[bitsCachedSize  +  1];	  return    bitsOut    &    MASKS[count    +    1];    	compilable	  [FE]  AssertionError  	24	11	replace
2476	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[bitsCachedSize  +  1];  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[bitsCachedSize  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[bitsCachedSize  +  1];	  return    bitsOut    &    MASKS[count    +    1];    	compilable	  [FE]  AssertionError  	24	11	replace
2477	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsCachedSize  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCachedSize    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	263	None	replace
2478	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  16);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  16);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  16);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCachedSize    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	263	None	replace
2479	[BUG]  [BUGGY]  return  bitsOut  &  3?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  3?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  3?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    3?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	132	None	replace
2480	[BUG]  [BUGGY]  return  bitsOut  <  <  3?  bitsOut  :  MASKS[count];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  3?  bitsOut  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  3?  bitsOut  :  MASKS[count];	  return    bitsOut    <    <    3?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
2481	[BUG]  [BUGGY]  return  bitsOut  &  16?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  16?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  16?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    16?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	135	None	replace
2482	[BUG]  [BUGGY]  return  bitsOut  <  <  32?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  32?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  32?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    16?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
2483	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (Math.PI  -  count))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (Math.PI  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (Math.PI  -  count))&  MASKS[count];	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	65	None	replace
2484	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	146	None	add
2485	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	146	None	add
2486	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	146	None	add
2487	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =  Integer.parseInt(this.bitsCachedSize);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	146	None	add
2488	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MASKS_SIZE);  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MASKS_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MASKS_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	215	None	replace
2489	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	215	None	replace
2490	[BUG]  [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	215	None	replace
2491	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  not  a  statement	198	None	replace
2492	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	198	None	replace
2493	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2],  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2],  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  *  2],  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count    *    2];    	non-compiled	[CE]  ';'  expected	288	None	replace
2494	[BUG]  [BUGGY]  return  bitsOut  &  2?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  2?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  2?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    2?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	78	None	replace
2495	[BUG]  [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  MASKS[count]);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  Math.max(bitsCachedSize,  MASKS[count]);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    +=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	315	None	replace
2496	[BUG]  [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)*  1;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)*  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)*  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    +=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	315	None	replace
2497	[BUG]  [BUGGY]  return  bitsOut  &  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    1?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	77	None	replace
2498	[BUG]  [BUGGY]  return  bitsOut  &  (1  <  <  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  (1  <  <  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  (1  <  <  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    1?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
2499	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	184	None	add
2500	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	184	None	add
2501	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	184	None	add
2502	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	184	None	add
2503	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  	non-compiled	[CE]  unreachable  statement	184	None	add
2504	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	184	None	add
2505	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	184	None	add
2506	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  	non-compiled	[CE]  unreachable  statement	184	None	add
2507	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  	non-compiled	[CE]  unreachable  statement	43	None	add
2508	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  	non-compiled	[CE]  unreachable  statement	43	None	add
2509	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	43	None	add
2510	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	43	None	add
2511	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	43	None	add
2512	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  	non-compiled	[CE]  unreachable  statement	43	None	add
2513	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	43	None	add
2514	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  &=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    bitsOut  &=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	43	None	add
2515	[BUG]  [BUGGY]  return  bitsOut.length  -  2L;  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -  2L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  2L;	  return    bitsOut.length    -    2;    	non-compiled	[CE]  long  cannot  be  dereferenced	220	None	replace
2516	[BUG]  [BUGGY]  return  bitsOut  -  Math.ceil(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.ceil(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.ceil(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;	100	None	replace
2517	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  bitsOut);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsOut,    bitsCachedSize);    	non-compiled	[CE]  possible  loss  of  precision	286	None	replace
2518	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  byte  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  byte  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  byte  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsOut,    bitsCachedSize);    	non-compiled	[CE]  possible  loss  of  precision	286	None	replace
2519	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  16)+  1;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  16)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  16)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  not  a  statement	312	None	replace
2520	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  10);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  10);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  10);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  not  a  statement	312	None	replace
2521	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  16);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  16);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  16);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  not  a  statement	312	None	replace
2522	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  2);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  2);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  not  a  statement	312	None	replace
2523	[BUG]  [BUGGY]  return  bitsOut  -  MASKS_SIZE;  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MASKS_SIZE;	  return    bitsOut.length    &    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	222	None	replace
2524	[BUG]  [BUGGY]  return  bitsIn.length  &  MASKS_SIZE;  [CE]  cannot  find  symbol  bitsIn  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsIn.length  &  MASKS_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsIn.length  &  MASKS_SIZE;	  return    bitsOut.length    &    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bitsIn	222	None	replace
2525	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  1L  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1L;    	compilable	  [FE]  AssertionError  	151	12	replace
2526	[BUG]  [BUGGY]  return  bitsOut  -  1L  *  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1L  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1L;    	compilable	  [FE]  AssertionError  	151	12	replace
2527	[BUG]  [BUGGY]  return  bitsOut  -  1L  <  <  8;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L  <  <  8;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1L  <  <  8;	  return    bitsOut    -    1L;    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
2528	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	271	None	replace
2529	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	271	None	replace
2530	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	271	None	replace
2531	[BUG]  [BUGGY]  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	271	None	replace
2532	[BUG]  [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	271	None	replace
2533	[BUG]  [BUGGY]  return  bitsOut  &  MASK;  [CE]  cannot  find  symbol  MASK  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASK;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASK;	  return    bitsOut    &    MAXIMUM_CACHE_STIZE;    	non-compiled	[CE]  cannot  find  symbol  MASK	323	None	replace
2534	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	12	replace
2535	[BUG]  [BUGGY]  return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  this.bitsCachedSize)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	12	replace
2536	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	2	replace
2537	[BUG]  [BUGGY]  return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  ==  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	2	replace
2538	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsCachedSize  -  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsCachedSize  -  MASKS[count];	  return    bitsOut    -    MASKS[count];    	compilable	  [FE]  AssertionError  	26	12	replace
2539	[BUG]  [BUGGY]  return  bitsCachedSize  -  MASKS[count];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsCachedSize  -  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsCachedSize  -  MASKS[count];	  return    bitsOut    -    MASKS[count];    	compilable	  [FE]  AssertionError  	26	12	replace
2540	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE[count];  [CE]  array  required,  but  int  found  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE[count];	  return    bitsOut    -    MASKS[count];    	non-compiled	[CE]  array  required,  but  int  found	26	None	replace
2541	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  3;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    	compilable	  [FE]  AssertionError  	38	12	replace
2542	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  3;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  3;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    	compilable	  [FE]  AssertionError  	38	12	replace
2543	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1L;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    	compilable	  [FE]  AssertionError  	38	11	replace
2544	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1L;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1L;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    	compilable	  [FE]  AssertionError  	38	11	replace
2545	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  ==  =  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  ==  =  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  ==  =  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    count    <    =    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
2546	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count!=  =  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count!=  =  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count!=  =  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    count    <    =    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
2547	[BUG]  [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	6	None	replace
2548	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	6	None	replace
2549	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	6	None	replace
2550	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	6	None	replace
2551	[BUG]  [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  incompatible  types	74	None	replace
2552	[BUG]  [BUGGY]  return  bitsOut  &(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [CE]  cannot  find  symbol  bytesCached  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &(bytesCached  >  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  cannot  find  symbol  bytesCached	74	None	replace
2553	[BUG]  [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bytesCached  >  16);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bytesCached  >  16);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  <  4)?  bitsOut  :(bytesCached  >  16);	  return(bitsOut    <    <    4)?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
2554	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder,  BYTE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder,  BYTE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder,  BYTE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	303	None	replace
2555	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder,  MASKS_SIZE);  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder,  MASKS_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder,  MASKS_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	303	None	replace
2556	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder,  3);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder,  3);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder,  3);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	303	None	replace
2557	[BUG]  [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MASKS_SIZE);  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *=  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MASKS_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *=  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  MASKS_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	71	None	replace
2558	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[count  *  2];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	287	None	add
2559	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [CE]  unreachable  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count  *  2];	  	non-compiled	[CE]  unreachable  statement	287	None	add
2560	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  *  2];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  *  2];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	287	None	add
2561	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  *  2];  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  *  2];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	287	None	add
2562	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  +=  MASKS[count  *  2];  [CE]  unreachable  statement  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  +=  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  +=  MASKS[count  *  2];	  	non-compiled	[CE]  unreachable  statement	287	None	add
2563	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut.add(ByteOrder.LITTLE_ENDIAN);  [CE]  long  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut.add(ByteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut.add(ByteOrder.LITTLE_ENDIAN);	  	non-compiled	[CE]  long  cannot  be  dereferenced	287	None	add
2564	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[bitsCachedSize  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[bitsCachedSize  -  1];	  return    bitsOut    &    MASKS[count    -    1];    	compilable	  [FE]  AssertionError  	20	12	replace
2565	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[bitsCachedSize  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[bitsCachedSize  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[bitsCachedSize  -  1];	  return    bitsOut    &    MASKS[count    -    1];    	compilable	  [FE]  AssertionError  	20	12	replace
2566	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1]  +  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count  -  1]  +  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count    -    1];    	compilable	  [FE]  AssertionError  	20	12	replace
2567	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1]  +  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1]  +  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count  -  1]  +  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count    -    1];    	compilable	  [FE]  AssertionError  	20	12	replace
2568	[BUG]  [BUGGY]  return  bitsOut  &  MASK[count  -  1];  [CE]  cannot  find  symbol  MASK  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASK[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASK[count  -  1];	  return    bitsOut    &    MASKS[count    -    1];    	non-compiled	[CE]  cannot  find  symbol  MASK	20	None	replace
2569	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  ')'  expected	314	None	replace
2570	[BUG]  [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  not  a  statement	314	None	replace
2571	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE  +  1);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.toString(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	285	None	replace
2572	[BUG]  [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.toString(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	285	None	replace
2573	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.toString(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	285	None	replace
2574	[BUG]  [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	202	None	replace
2575	[BUG]  [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_S  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_S	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	202	None	replace
2576	[BUG]  [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	202	None	replace
2577	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  maxIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  maxIMUM_CACHE_SIZE  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  maxIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  maxIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  maxIMUM_CACHE_SIZE	247	None	replace
2578	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MASKS_SIZE);  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MASKS_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  MASKS_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	247	None	replace
2579	[BUG]  [BUGGY]  return  bitsOut  <  <  8?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  8?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  8?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    <    <    8?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
2580	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  =  Integer.parseInt(bitsCachedSize);  }  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  =  Integer.parseInt(bitsCachedSize);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  =  Integer.parseInt(bitsCachedSize);  }	  return    bitsOut    -    1;    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	9	None	replace
2581	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  =  new  long[bitsCachedSize];  }  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  =  new  long[bitsCachedSize];  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  =  new  long[bitsCachedSize];  }	  return    bitsOut    -    1;    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	9	None	replace
2582	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MASKS_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MASKS_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  MASKS_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	72	None	replace
2583	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (Math.MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (Math.MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (Math.MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];	  return    this.bitsCachedSize;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	107	None	replace
2584	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
2585	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
2586	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MASKS[count],  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MASKS[count],  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MASKS[count],  count);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	235	None	replace
2587	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MASKS[count],  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MASKS[count],  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MASKS[count],  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	235	None	replace
2588	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MASKS[count],  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MASKS[count],  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MASKS[count],  bitsCachedSize);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	235	None	replace
2589	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  BYTEOrder.LITTLE_ENDIAN);  [CE]  cannot  find  symbol  BYTEOrder  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  BYTEOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  BYTEOrder.LITTLE_ENDIAN);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTEOrder	235	None	replace
2590	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  &  MASKS[0];  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  &  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    bitsOut  &  MASKS[0];	  	non-compiled	[CE]  not  a  statement	27	None	add
2591	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
2592	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	27	None	add
2593	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
2594	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	27	None	add
2595	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
2596	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
2597	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  InputStream  in  =  readInt(bits,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bits  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  InputStream  in  =  readInt(bits,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    InputStream  in  =  readInt(bits,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  bits	27	None	add
2598	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  0,  bitsOut.length);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  0,  bitsOut.length);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_SIZE,  0,  bitsOut.length);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	84	None	replace
2599	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  0,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	84	None	replace
2600	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  0,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  0,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_SIZE,  0,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	84	None	replace
2601	[BUG]  [BUGGY]  InputStream  in  =  readInt(bits,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  cannot  find  symbol  bits  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readInt(bits,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readInt(bits,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  cannot  find  symbol  bits	114	None	replace
2602	[BUG]  [BUGGY]  bitsOut  =  readInt(bits,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bits  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readInt(bits,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readInt(bits,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  cannot  find  symbol  bits	114	None	replace
2603	[BUG]  [BUGGY]  bitsOut  =  readInt(ByteOrder.LITTLE_ENDIAN);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readInt(ByteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readInt(ByteOrder.LITTLE_ENDIAN);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
2604	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	12	replace
2605	[BUG]  [BUGGY]  return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	12	replace
2606	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1L;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	11	replace
2607	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1L;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1L;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    	compilable	  [FE]  AssertionError  	183	11	replace
2608	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  BYTE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  BYTE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  BYTE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	304	None	replace
2609	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (MASKSSize  -  count))&  MASKS[count];  [CE]  cannot  find  symbol  MASKSSize  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >=  (MASKSSize  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >=  (MASKSSize  -  count))&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  MASKSSize	160	None	replace
2610	[BUG]  [BUGGY]  return  bitsOut.length  -(bytesCachedSize  -  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bytesCachedSize  -  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bytesCachedSize  -  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	269	None	replace
2611	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.abs(bitsCachedSize  -  MAXIMUM_CACHE_SIZE));  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.abs(bitsCachedSize  -  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.abs(bitsCachedSize  -  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	176	None	replace
2612	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.max(bitsCachedSize  -  MAXIMUM_CACHE_SIZE));  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.max(bitsCachedSize  -  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.max(bitsCachedSize  -  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	176	None	replace
2613	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  MASKS);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  MASKS);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_SIZE,  MASKS);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MASKS);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	230	None	replace
2614	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  MASKS);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  MASKS);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  MASKS);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MASKS);    	non-compiled	[CE]  long  cannot  be  dereferenced	230	None	replace
2615	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MASKS,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MASKS,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  MASKS,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MASKS);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	230	None	replace
2616	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_ENDIAN,  MASKS);  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_ENDIAN,  MASKS);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_ENDIAN,  MASKS);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MASKS);    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	230	None	replace
2617	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  0,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.FIELD_SIZE,  0,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(ByteOrder.FIELD_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	207	None	replace
2618	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder,  BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder,  BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder,  BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	82	None	replace
2619	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MASKS,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MASKS,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  MASKS,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	82	None	replace
2620	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	122	None	replace
2621	[BUG]  [BUGGY]  InputStream  in  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	122	None	replace
2622	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE  +  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	122	None	replace
2623	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  &  MASKS[count  -  1];  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  &  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  &  MASKS[count  -  1];	  	non-compiled	[CE]  not  a  statement	19	None	add
2624	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  -  1];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  -  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	19	None	add
2625	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  -  1];  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  -  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	19	None	add
2626	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count  -  1];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count  -  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	19	None	add
2627	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count  -  1];  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MASKS[count  -  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	19	None	add
2628	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCached  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	19	None	add
2629	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	19	None	add
2630	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	19	None	add
2631	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	49	None	add
2632	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	49	None	add
2633	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	49	None	add
2634	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    bitsOut  =  ByteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  incompatible  types	49	None	add
2635	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  bitsOut  =  ByteOrder.LITTLE_ENDIAN  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    bitsOut  =  ByteOrder.LITTLE_ENDIAN  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	49	None	add
2636	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	49	None	add
2637	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsOut);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	49	None	add
2638	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  2;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	86	12	replace
2639	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  +  2;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	86	12	replace
2640	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	275	None	replace
2641	[BUG]  [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	275	None	replace
2642	[BUG]  [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	275	None	replace
2643	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	275	None	replace
2644	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	275	None	replace
2645	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  1;	  return    bitsOut    <    <    1;    	compilable	  [FE]  AssertionError  	158	12	replace
2646	[BUG]  [BUGGY]  return  bitsOut  %  1;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  1;	  return    bitsOut    <    <    1;    	compilable	  [FE]  AssertionError  	158	12	replace
2647	[BUG]  [BUGGY]  return  bitsOut  <  <  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2;	  return    bitsOut    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
2648	[BUG]  [BUGGY]  return  bitsOut  <  <  1L;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1L;	  return    bitsOut    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
2649	[BUG]  [BUGGY]  return  bitsOut  <  <  4;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4;	  return    bitsOut    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
2650	[BUG]  [BUGGY]  return  bitsOut  <  <  8;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  8;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  8;	  return    bitsOut    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
2651	[BUG]  [BUGGY]  return  InputStream.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(long,int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  InputStream.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  InputStream.read(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	228	None	replace
2652	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(bitsCachedSize);  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  possible  loss  of  precision	214	None	replace
2653	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(bitsCachedSize,  byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(bitsCachedSize,  byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(bitsCachedSize,  byteOrder);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	214	None	replace
2654	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    2;    	non-compiled	[CE]  unreachable  statement	317	None	replace
2655	[BUG]  [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  16);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  16);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  16);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	304	None	replace
2656	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.LITTLE_ENDIAN,  MASKS[count]);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.LITTLE_ENDIAN,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.LITTLE_ENDIAN,  MASKS[count]);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  long  cannot  be  dereferenced	206	None	replace
2657	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.LITTLE_ENDIAN,  BYTEOrder.MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTEOrder  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.LITTLE_ENDIAN,  BYTEOrder.MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.LITTLE_ENDIAN,  BYTEOrder.MAXIMUM_CACHE_SIZE);	  bitsOut.write(ByteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol  BYTEOrder	206	None	replace
2658	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  +=  MASKS[0];  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0];  bitsOut  +=  MASKS[0];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[0];    bitsOut  +=  MASKS[0];	  	non-compiled	[CE]  unreachable  statement	17	None	add
2659	[BUG]  [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder);    	non-compiled	[CE]  not  a  statement	249	None	replace
2660	[BUG]  [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder);    	non-compiled	[CE]  not  a  statement	249	None	replace
2661	[BUG]  [BUGGY]  return  in  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	249	None	replace
2662	[BUG]  [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	333	None	replace
2663	[BUG]  [BUGGY]  if(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	333	None	replace
2664	[BUG]  [BUGGY]  if(bitsOut  >=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  >=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  >=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	333	None	replace
2665	[BUG]  [BUGGY]  return  bitsOut  &  MASK_CACHE_SIZE;  [CE]  cannot  find  symbol  MASK_CACHE_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASK_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASK_CACHE_SIZE;	  return    bitsOut    &    MAXIMUM_CACHE_STIZE;    	non-compiled	[CE]  cannot  find  symbol  MASK_CACHE_SIZE	323	None	replace
2666	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[BYTE_SIZE];  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[BYTE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[BYTE_SIZE];	  return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	22	None	replace
2667	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[BYTE_ENDIAN];  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[BYTE_ENDIAN];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[BYTE_ENDIAN];	  return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	22	None	replace
2668	[BUG]  [BUGGY]  return  bitsOut  <  <  1  &&  MAXIMUM_CACHE_SIZE  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  1  &&  MAXIMUM_CACHE_SIZE  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  1  &&  MAXIMUM_CACHE_SIZE  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    1?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
2669	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  unreachable  statement	252	None	replace
2670	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	252	None	replace
2671	[BUG]  [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	154	None	add
2672	[BUG]  [BUGGY]  return  bitsOut  /  1;  bitsOut  /  1;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  bitsOut  /  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    bitsOut  /  1;	  	non-compiled	[CE]  not  a  statement	154	None	add
2673	[BUG]  [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	154	None	add
2674	[BUG]  [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  /=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  /=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  /=  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	154	None	add
2675	[BUG]  [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  1;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    1;    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	154	None	add
2676	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  bitsCachedSize);  [CE]  no  suitable  method  found  for  min(ByteOrder,int)  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  bitsCachedSize);	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  min(ByteOrder,int)	96	None	replace
2677	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  bitsCachedSize  -  1);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  bitsCachedSize  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_SIZE,  bitsCachedSize  -  1);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	231	None	replace
2678	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  bitsOut  -  1);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  bitsOut  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_SIZE,  bitsOut  -  1);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	231	None	replace
2679	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  bitsCachedSize  -  1);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  bitsCachedSize  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  bitsCachedSize  -  1);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	231	None	replace
2680	[BUG]  [BUGGY]  return  byteOrder.read(ByteOrder.BYTE_SIZE,  bitsOut  -  1);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  byteOrder.read(ByteOrder.BYTE_SIZE,  bitsOut  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  byteOrder.read(ByteOrder.BYTE_SIZE,  bitsOut  -  1);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	231	None	replace
2681	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	146	None	add
2682	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCachedSize  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	146	None	add
2683	[BUG]  [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	146	None	add
2684	[BUG]  [BUGGY]  bitsOut  =  readByte(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	307	None	replace
2685	[BUG]  [BUGGY]  bitsOut  =  readByte(buffs,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  buffs  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readByte(buffs,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readByte(buffs,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  buffs	307	None	replace
2686	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (bitsCachedSize  -  1))?  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))?    MASKS[count]    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	163	None	replace
2687	[BUG]  [BUGGY]  bitsOut  =  readInt(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readInt(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readInt(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
2688	[BUG]  [BUGGY]  bitsOut  =(bitsCached  [Delete]  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  [Delete]  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  [Delete]  (bitsCachedSize  -  1))  &  MASKS[count];	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    1))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	7	None	replace
2689	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  =  1;	  return    bitsOut.toByteArray()    &&    count    <    =    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
2690	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  =  2;	  return    bitsOut.toByteArray()    &&    count    <    =    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
2691	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  32;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  32;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  =  32;	  return    bitsOut.toByteArray()    &&    count    <    =    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
2692	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  16;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  16;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  =  16;	  return    bitsOut.toByteArray()    &&    count    <    =    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
2693	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  3;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  =  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  =  3;	  return    bitsOut.toByteArray()    &&    count    <    =    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
2694	[BUG]  [BUGGY]  return  bitsOut  &(value  >  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  value  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &(value  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &(value  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  value	266	None	replace
2695	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	141	2	replace
2696	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	141	2	replace
2697	[BUG]  [BUGGY]  return  bitsOut  <  <  3;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  3;	  return    bitsOut    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
2698	[BUG]  [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    2;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	317	None	replace
2699	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  not  a  statement	41	None	add
2700	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	41	None	add
2701	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	41	None	add
2702	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	41	None	add
2703	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;	  	non-compiled	[CE]  unreachable  statement	41	None	add
2704	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  count  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  count  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  count  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	15	None	replace
2705	[BUG]  [BUGGY]  if(bitsOut!=  bitsOut)  {  return  count  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  bitsOut)  {  return  count  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  bitsOut)  {  return  count  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	15	None	replace
2706	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  bitsOut  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  }	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	15	None	replace
2707	[BUG]  [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  count;	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    +=    count;    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
2708	[BUG]  [BUGGY]  return  bitsOut.length  -  MAXIMUM_CACHE_SIZE,  bitsCachedSize;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -  MAXIMUM_CACHE_SIZE,  bitsCachedSize;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  MAXIMUM_CACHE_SIZE,  bitsCachedSize;	  return    bitsOut.length    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	175	None	replace
2709	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	187	None	add
2710	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	187	None	add
2711	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  ';'  expected	187	None	add
2712	[BUG]  [BUGGY]  return  bitsIn  &  MAXIMUM_CACHE_SIZE  +  1;  [CE]  cannot  find  symbol  bitsIn  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsIn  &  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsIn  &  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsIn    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bitsIn	321	None	replace
2713	[BUG]  [BUGGY]  return  bitsOut.length  &  MASKS_SIZE  *  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  &  MASKS_SIZE  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  &  MASKS_SIZE  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut.length    &    MASKS_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	222	None	replace
2714	[BUG]  [BUGGY]  return  bitsOut.length  &  MASKS_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  &  MASKS_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  &  MASKS_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    &    MASKS_SIZE;    	non-compiled	[CE]  ';'  expected	222	None	replace
2715	[BUG]  [BUGGY]  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  not  a  statement	214	None	replace
2716	[BUG]  [BUGGY]  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  not  a  statement	214	None	replace
2717	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1L;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    	compilable	  [FE]  AssertionError  	54	12	replace
2718	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1L;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1L;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    	compilable	  [FE]  AssertionError  	54	12	replace
2719	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsOut  >>  (bitsCached  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsOut  >>  (bitsCached  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsOut  >>  (bitsCached	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ')'  expected	121	None	replace
2720	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsOut!=  (bitsCached  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsOut!=  (bitsCached  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsOut!=  (bitsCached	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ')'  expected	121	None	replace
2721	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsOut  >=  (bitsCached  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsOut  >=  (bitsCached  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsOut  >=  (bitsCached	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ')'  expected	121	None	replace
2722	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached  >>  (bitsC  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached  >>  (bitsC  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached  >>  (bitsC	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ')'  expected	121	None	replace
2723	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached  >=  (bitsC  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached  >=  (bitsC  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached  >=  (bitsC	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ')'  expected	121	None	replace
2724	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsOut  >>  (bytesCached  [CE]  ')'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsOut  >>  (bytesCached  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsOut  >>  (bytesCached	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ')'  expected	121	None	replace
2725	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  1);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCachedSize    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	263	None	replace
2726	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  1));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  1));	  return    bitsOut    <    <    4?    bitsOut    :(bitsCachedSize    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	263	None	replace
2727	[BUG]  [BUGGY]  return  in.read(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  no  suitable  method  found  for  read(ByteOrder,int,long)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    in.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  no  suitable  method  found  for  read(ByteOrder,int,long)	279	None	replace
2728	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	136	None	add
2729	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCachedSize  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	136	None	add
2730	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	136	None	add
2731	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bits);  [CE]  cannot  find  symbol  bits  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =  Integer.parseInt(this.bits);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =  Integer.parseInt(this.bits);	  	non-compiled	[CE]  cannot  find  symbol  bits	136	None	add
2732	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  else  {  bitsOut  =  new  long[ByteOrder.LITTLE_ENDIAN];  }  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  else  {  bitsOut  =  new  long[ByteOrder.LITTLE_ENDIAN];  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  int  count  =  this.bitsCachedSize;  }  else  {  bitsOut  =  new  long[ByteOrder.LITTLE_ENDIAN];  }	  return    this.bitsCachedSize;    int    count    =    this.bitsCachedSize;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	298	None	replace
2733	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  &  MASKS[count];  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  &  MASKS[count];  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  &  MASKS[count];  }	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  not  a  statement	302	None	replace
2734	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  }  else  {  bitsOut  &  MASKS[count];  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  }  else  {  bitsOut  &  MASKS[count];  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  }  else  {  bitsOut  &  MASKS[count];  }	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  not  a  statement	302	None	replace
2735	[BUG]  [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  bitsOut  &  MASKS[count];  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  bitsOut  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  bitsOut  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  not  a  statement	302	None	replace
2736	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  MASKS[count];  }  else  {  bitsOut  &=  MASKS[count];  }  [CE]  incomparable  types:  long  and  <null>  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  MASKS[count];  }  else  {  bitsOut  &=  MASKS[count];  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  bitsOut  &  MASKS[count];  }  else  {  bitsOut  &=  MASKS[count];  }	  return    bitsOut    &    MASKS[count];    bitsOut    &    MASKS[count];    	non-compiled	[CE]  incomparable  types:  long  and  <null>	302	None	replace
2737	[BUG]  [BUGGY]  return  bitsOut,  bitsCachedSize  +  1;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut,  bitsCachedSize  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut,  bitsCachedSize  +  1;	  return    bitsOut.length    +    1;    	non-compiled	[CE]  ';'  expected	221	None	replace
2738	[BUG]  [BUGGY]  return  bitsOut,  count  +  1;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut,  count  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut,  count  +  1;	  return    bitsOut.length    +    1;    	non-compiled	[CE]  ';'  expected	221	None	replace
2739	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  	non-compiled	[CE]  not  a  statement	43	None	add
2740	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;	  	non-compiled	[CE]  unreachable  statement	43	None	add
2741	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  2;	  	non-compiled	[CE]  unreachable  statement	43	None	add
2742	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	43	None	add
2743	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    2;    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	43	None	add
2744	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	99	None	add
2745	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	99	None	add
2746	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	99	None	add
2747	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	99	None	add
2748	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	99	None	add
2749	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	99	None	add
2750	[BUG]  [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count]);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count]);	  	non-compiled	[CE]  possible  loss  of  precision	99	None	add
2751	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  ']'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  MASKS[MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  ']'  expected	320	None	replace
2752	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  1,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  1,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  long  cannot  be  dereferenced	320	None	replace
2753	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  MASKS[count],  bitsCachedSize);  [CE]  long  cannot  be  dereferenced  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  MASKS[count],  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  MASKS[count],  bitsCachedSize);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  long  cannot  be  dereferenced	320	None	replace
2754	[BUG]  [BUGGY]  bitsOut.write(MASKS[count],  BYTE_ENDIAN,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count],  BYTE_ENDIAN,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count],  BYTE_ENDIAN,  bitsCachedSize);	  bitsOut.write(MASKS[count],    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	320	None	replace
2755	[BUG]  [BUGGY]  return  in.toByteArray()  -  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.toByteArray()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.toByteArray()  -  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol	301	None	replace
2756	[BUG]  [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	297	None	replace
2757	[BUG]  [BUGGY]  if(in!=  null)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(in!=  null)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(in!=  null)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE);  }	  return    this.bitsCachedSize;    InputStream    in    =    readInt(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	297	None	replace
2758	[BUG]  [BUGGY]  return  bitsOut  <  <  4  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE    +    1;    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
2759	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  	non-compiled	[CE]  not  a  statement	182	None	add
2760	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;	  	non-compiled	[CE]  unreachable  statement	182	None	add
2761	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	182	None	add
2762	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)-  1;  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)-  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)-  1;	  	non-compiled	[CE]  unreachable  statement	182	None	add
2763	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	182	None	add
2764	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)-  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)-    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	182	None	add
2765	[BUG]  [BUGGY]  bitsOut  -  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -  1;	  return    bitsOut    -    1;    bitsOut    -    1;    	non-compiled	[CE]  not  a  statement	334	None	replace
2766	[BUG]  [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  }	  return    bitsOut    -    1;    bitsOut    -    1;    	non-compiled	[CE]  not  a  statement	334	None	replace
2767	[BUG]  [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -  1;	  return    bitsOut    -    1;    bitsOut    -    1;    	non-compiled	[CE]  not  a  statement	334	None	replace
2768	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  <  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  <  (bitsCachedSize  -  count))&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	234	None	replace
2769	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  1))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  1))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >=  (bitsCachedSize  -  1))&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	234	None	replace
2770	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bytesCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bytesCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bytesCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	201	None	replace
2771	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	201	None	replace
2772	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >>  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >>  (bitsCachedSize  -  count))  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(byteOrder  >>  (bitsCachedSize  -  count))  &  MASKS[count  +  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	23	None	add
2773	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >>  (bitsCachedSize  +  1))  &  MASKS[count  +  1];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >>  (bitsCachedSize  +  1))  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(byteOrder  >>  (bitsCachedSize  +  1))  &  MASKS[count  +  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	23	None	add
2774	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
2775	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >>  (bitsCachedSize  -  1))  &  MASKS[count  +  1];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >>  (bitsCachedSize  -  1))  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(byteOrder  >>  (bitsCachedSize  -  1))  &  MASKS[count  +  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	23	None	add
2776	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut.write(MASKS[count  +  1]);  [CE]  long  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut.write(MASKS[count  +  1]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut.write(MASKS[count  +  1]);	  	non-compiled	[CE]  long  cannot  be  dereferenced	23	None	add
2777	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  &  MASKS[count  +  1];  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  &  MASKS[count  +  1];	  	non-compiled	[CE]  not  a  statement	23	None	add
2778	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >>  (bitsCachedSize  +  count))  &  MASKS[count  +  1];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  +  1];  bitsOut  =(byteOrder  >>  (bitsCachedSize  +  count))  &  MASKS[count  +  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    +    1];    bitsOut  =(byteOrder  >>  (bitsCachedSize  +  count))  &  MASKS[count  +  1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	23	None	add
2779	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	316	None	replace
2780	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[0],  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[0],  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[0],  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[0];    	non-compiled	[CE]  ';'  expected	18	None	replace
2781	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE  +  1);	  	non-compiled	[CE]  unreachable  statement	101	None	add
2782	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	101	None	add
2783	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE  +  1);  [CE]  no  suitable  method  found  for  max(int)  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE  +  1);	  	non-compiled	[CE]  no  suitable  method  found  for  max(int)	101	None	add
2784	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);	  	non-compiled	[CE]  unreachable  statement	101	None	add
2785	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	101	None	add
2786	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE  +  2);  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE  +  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE  +  2);	  	non-compiled	[CE]  unreachable  statement	101	None	add
2787	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE  +  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1);    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE  +  1);	  	non-compiled	[CE]  unreachable  statement	101	None	add
2788	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(2,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(2,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(2,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	267	None	replace
2789	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  bitsCachedSize));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  bitsCachedSize));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  bitsCachedSize));	  return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	267	None	replace
2790	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  in.skipChildren();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  in.skipChildren();	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
2791	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  in.skipChildren();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  in.skipChildren();	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    in.skipChildren();    	non-compiled	[CE]  not  a  statement	118	None	replace
2792	[BUG]  [BUGGY]  Return  bitsOut  &  MASKS_SIZE;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Return  bitsOut  &  MASKS_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Return  bitsOut  &  MASKS_SIZE;	  Return    bitsOut    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	223	None	replace
2793	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	3	replace
2794	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	3	replace
2795	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
2796	[BUG]  [BUGGY]  return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	143	12	replace
2797	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	11	replace
2798	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  MAXIMUM_CACHE_SIZE?  bitsOut  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	11	replace
2799	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  bitsOut);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	3	replace
2800	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  bitsOut);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  bitsOut);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	3	replace
2801	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  2?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  2?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
2802	[BUG]  [BUGGY]  return(bitsOut  <  2?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  2?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  2?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	145	12	replace
2803	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	189	None	add
2804	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  incompatible  types	189	None	add
2805	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	189	None	add
2806	[BUG]  [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut!=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut!=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  ';'  expected	189	None	add
2807	[BUG]  [BUGGY]  bitsOut.write(MASKS[0,  MAXIMUM_CACHE_SIZE  -  1]);  [CE]  ']'  expected  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[0,  MAXIMUM_CACHE_SIZE  -  1]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[0,  MAXIMUM_CACHE_SIZE  -  1]);	  bitsOut.write(MASKS[count    -    1,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ']'  expected	61	None	replace
2808	[BUG]  [BUGGY]  return  bitsIn.length  -  1;  [CE]  cannot  find  symbol  bitsIn  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsIn.length  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsIn.length  -  1;	  return    bitsOut.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  bitsIn	174	None	replace
2809	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	176	None	replace
2810	[BUG]  [BUGGY]  return  bitsOut.length  -(Math.max(16,  bitsCachedSize  -  MAXIMUM_CACHE_SIZE));  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(Math.max(16,  bitsCachedSize  -  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(Math.max(16,  bitsCachedSize  -  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	176	None	replace
2811	[BUG]  [BUGGY]  return  in.toByteArray()  &&  count  >  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.toByteArray()  &&  count  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.toByteArray()  &&  count  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    count    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
2812	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	147	12	replace
2813	[BUG]  [BUGGY]  return(bitsOut  <  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	147	12	replace
2814	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  >  bitsOut.length;  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  >  bitsOut.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  MAXIMUM_CACHE_SIZE  >  bitsOut.length;	  return    bitsOut.toByteArray()    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	300	None	replace
2815	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  cachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  cachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  cachedSize  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	300	None	replace
2816	[BUG]  [BUGGY]  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	71	None	replace
2817	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  bitsCachedSize);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  InputStream  in  =  readBits(byteOrder,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	71	None	replace
2818	[BUG]  [BUGGY]  return  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	71	None	replace
2819	[BUG]  [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_S  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_S	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	202	None	replace
2820	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.min(count,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	100	12	replace
2821	[BUG]  [BUGGY]  return  bitsOut  -  Math.min(count,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.min(count,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	100	12	replace
2822	[BUG]  [BUGGY]  return  bitsOut  -  Math.pow(10,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.pow(10,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.pow(10,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  possible  loss  of  precision	100	None	replace
2823	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	11	replace
2824	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	139	11	replace
2825	[BUG]  [BUGGY]  return  bitsOut  &&  size  >  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  size  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &&  size  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &&  size  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  size	232	None	replace
2826	[BUG]  [BUGGY]  returns  bitsOut  &&  count  >  MAXIMUM_CACHE_SIZE;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  returns  bitsOut  &&  count  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	returns  bitsOut  &&  count  >  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	232	None	replace
2827	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  }  else  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  }  else  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  }  else  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	283	None	replace
2828	[BUG]  [BUGGY]  byte[count]  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  byte[count]  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	byte[count]  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	283	None	replace
2829	[BUG]  [BUGGY]  return  in  &  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in  &  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in  &  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	245	None	replace
2830	[BUG]  [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  0);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  0);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCached,  0);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	245	None	replace
2831	[BUG]  [BUGGY]  bitsOut  *  MAXIMUM_CACHE_SIZE;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.read(bitsOut);    	non-compiled	[CE]  not  a  statement	217	None	replace
2832	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsOut,  0,  count);  [CE]  no  suitable  method  found  for  read(long,int,int)  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsOut,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsOut,  0,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.read(bitsOut);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int,int)	217	None	replace
2833	[BUG]  [BUGGY]  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsOut,  count);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsOut,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *  MAXIMUM_CACHE_SIZE;  in.read(bitsOut,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.read(bitsOut);    	non-compiled	[CE]  not  a  statement	217	None	replace
2834	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS_SIZE  -  count))&  MASKS[count];  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS_SIZE  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MASKS_SIZE  -  count))&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached!=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	162	None	replace
2835	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(0,  2);	  return    bitsOut    &    Math.max(bitsCachedSize,    2);    	compilable	  [FE]  AssertionError  	327	12	replace
2836	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  2);	  return    bitsOut    &    Math.max(bitsCachedSize,    2);    	compilable	  [FE]  AssertionError  	327	12	replace
2837	[BUG]  [BUGGY]  return  bitsOut  <  <  8  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  8  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  8  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    4    &&    bitsCachedSize    >=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	233	None	replace
2838	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  byte  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  byte  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  byte  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    0;    	non-compiled	[CE]  possible  loss  of  precision	282	None	replace
2839	[BUG]  [BUGGY]  byte  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  byte  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	byte  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    0;    	non-compiled	[CE]  possible  loss  of  precision	282	None	replace
2840	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (MASKS[count  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >=  (MASKS[count  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >=  (MASKS[count  -  count))  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ']'  expected	1	None	replace
2841	[BUG]  [BUGGY]  bitsOut  =  bitsOut  *  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  bitsOut  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  bitsOut  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    ByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	218	None	replace
2842	[BUG]  [BUGGY]  bitsOut  =  bitsOut  *  ByteOrder.LITTLE_ENDIAN;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  bitsOut  *  ByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  bitsOut  *  ByteOrder.LITTLE_ENDIAN;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    ByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	218	None	replace
2843	[BUG]  [BUGGY]  bitsOut  =  bitsCachedSize  *  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  bitsCachedSize  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  bitsCachedSize  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    ByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	218	None	replace
2844	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	196	None	replace
2845	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  0,  MASKS.length);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  0,  MASKS.length);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  0,  MASKS.length);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	84	None	replace
2846	[BUG]  [BUGGY]  bitsOut  =  readBits(byte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  '.class'  expected	58	None	replace
2847	[BUG]  [BUGGY]  byte[count  *  MAXIMUM_CACHE_SIZE]  =  Math.max(bitsOut,  bitsCachedSize);  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  byte[count  *  MAXIMUM_CACHE_SIZE]  =  Math.max(bitsOut,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	byte[count  *  MAXIMUM_CACHE_SIZE]  =  Math.max(bitsOut,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsOut,    bitsCachedSize);    	non-compiled	[CE]  ']'  expected	286	None	replace
2848	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  bitsCachedSize);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsOut,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsOut,    bitsCachedSize);    	non-compiled	[CE]  possible  loss  of  precision	286	None	replace
2849	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	216	None	replace
2850	[BUG]  [BUGGY]  bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    this.bitsCachedSize;    bitsOut    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	255	None	replace
2851	[BUG]  [BUGGY]  return  in;  bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in;  bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in;  bitsOut  =  readBits(this,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    bitsOut    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	255	None	replace
2852	[BUG]  [BUGGY]  in.read(MASKS,  count);  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  no  suitable  method  found  for  read(long[],int)  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in.read(MASKS,  count);  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in.read(MASKS,  count);  bitsOut  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  no  suitable  method  found  for  read(long[],int)	236	None	replace
2853	[BUG]  [BUGGY]  int  count  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)?  bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	236	None	replace
2854	[BUG]  [BUGGY]  nextByteOrder  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  nextByteOrder  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  nextByteOrder  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	nextByteOrder  =(byteOrder  >=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  nextByteOrder	257	None	replace
2855	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	117	11	replace
2856	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	117	11	replace
2857	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	117	None	replace
2858	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  not  a  statement	324	None	add
2859	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	324	None	add
2860	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	324	None	add
2861	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  	non-compiled	[CE]  unreachable  statement	324	None	add
2862	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  not  a  statement	324	None	add
2863	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  	non-compiled	[CE]  not  a  statement	324	None	add
2864	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  min(int)  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  no  suitable  method  found  for  min(int)	324	None	add
2865	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(count,    MAXIMUM_CACHE_SIZE);    bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE));	  	non-compiled	[CE]  not  a  statement	324	None	add
2866	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  not  a  statement	184	None	add
2867	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	184	None	add
2868	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  +=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	184	None	add
2869	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	184	None	add
2870	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	184	None	add
2871	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	184	None	add
2872	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  &=  MASKS[count];  }  [CE]  incomparable  types:  long  and  <null>  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  &=  MASKS[count];  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  &=  MASKS[count];  }	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	246	None	replace
2873	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  [CE]  incomparable  types:  long  and  <null>  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	246	None	replace
2874	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  MAXIMUM_CACHE_SIZE;  }  [CE]  incomparable  types:  long  and  <null>  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  MAXIMUM_CACHE_SIZE;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  MAXIMUM_CACHE_SIZE;  }	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	246	None	replace
2875	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize!=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize!=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >>    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	186	4	replace
2876	[BUG]  [BUGGY]  return(this.bitsCachedSize!=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize!=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize!=  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >>    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	186	4	replace
2877	[BUG]  [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	265	None	replace
2878	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  8)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bytesCached  <  <  8)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bytesCached  <  <  8)&  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
2879	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CAPCHE_SIZE;  [CE]  cannot  find  symbol  MAXIMUM_CAPCHE_SIZE  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CAPCHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CAPCHE_SIZE;	  return    bitsOut    &    MILLIS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CAPCHE_SIZE	94	None	replace
2880	[BUG]  [BUGGY]  InputStream  in  =  readBits(this.bitsCachedSize,  bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(this.bitsCachedSize,  bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(this.bitsCachedSize,  bitsOut,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this.bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	295	None	replace
2881	[BUG]  [BUGGY]  bitsOut  =(bitsOut  >=  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsOut  >=  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsOut  >=  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];	  return    this.bitsCachedSize;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	110	None	replace
2882	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  16);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  16);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  16);	  return    bitsOut    <    <    4?    bitsOut    :(bitsCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
2883	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  unreachable  statement	328	None	replace
2884	[BUG]  [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  unreachable  statement	328	None	replace
2885	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  not  a  statement	328	None	replace
2886	[BUG]  [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  not  a  statement	328	None	replace
2887	[BUG]  [BUGGY]  return  bitsOut.length  -  8;  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -  8;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -  8;	  return    bitsOut.length    -    2;    	non-compiled	[CE]  long  cannot  be  dereferenced	220	None	replace
2888	[BUG]  [BUGGY]  return  bitsOut  -  Math.min(count,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(count,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.min(count,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	32	None	replace
2889	[BUG]  [BUGGY]  return  bitsOut  -  Math.pow(10,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.pow(10,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.pow(10,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	32	None	replace
2890	[BUG]  [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	278	None	replace
2891	[BUG]  [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	278	None	replace
2892	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
2893	[BUG]  [BUGGY]  return  in  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in  &  MASKS[count];	  return    bitsOut    &    MASKS[count];    InputStream    in    =    readInt(bitsCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	306	None	replace
2894	[BUG]  [BUGGY]  in.read(bitsOut,  0,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(long,int,int)  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in.read(bitsOut,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in.read(bitsOut,  0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int,int)	208	None	replace
2895	[BUG]  [BUGGY]  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.read(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.read(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	208	None	replace
2896	[BUG]  [BUGGY]  return  byteOrder.read(ByteOrder.BYTE_SIZE,  bitsOut);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  byteOrder.read(ByteOrder.BYTE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  byteOrder.read(ByteOrder.BYTE_SIZE,  bitsOut);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	229	None	replace
2897	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  16));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  16));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  16));	  return    bitsOut    &    Math.max(bitsCachedSize,    16));    	non-compiled	[CE]  ';'  expected	227	None	replace
2898	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsOut;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsOut;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  possible  loss  of  precision	277	None	replace
2899	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsOut;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsOut;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  possible  loss  of  precision	277	None	replace
2900	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  int  MAXIMUM_CACHE_SIZE  =  bitsOut;  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  int  MAXIMUM_CACHE_SIZE  =  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  int  MAXIMUM_CACHE_SIZE  =  bitsOut;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  possible  loss  of  precision	277	None	replace
2901	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsIn.length;  [CE]  cannot  find  symbol  bitsIn  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsIn.length;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  bitsIn.length;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    nextByteOrder.LITTLE_ENDIAN;    	non-compiled	[CE]  cannot  find  symbol  bitsIn	277	None	replace
2902	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(ByteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	31	None	replace
2903	[BUG]  [BUGGY]  return  Integer.toString(bitsOut);  [CE]  no  suitable  method  found  for  toString(long)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  Integer.toString(bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  Integer.toString(bitsOut);	  return    in.toByteArray();    	non-compiled	[CE]  no  suitable  method  found  for  toString(long)	192	None	replace
2904	[BUG]  [BUGGY]  return  bitOut.toByteArray();  [CE]  cannot  find  symbol  bitOut  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitOut.toByteArray();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitOut.toByteArray();	  return    in.toByteArray();    	non-compiled	[CE]  cannot  find  symbol  bitOut	192	None	replace
2905	[BUG]  [BUGGY]  bitsOut.write(byteOrder.FIELD_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]                                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(byteOrder.FIELD_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(byteOrder.FIELD_SIZE,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(ByteOrder.FIELD_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	207	None	replace
2906	[BUG]  [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  BYTEOrder.LITTLE_ENDIAN);  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(ByteOrder.FIELD_SIZE,  BYTEOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(ByteOrder.FIELD_SIZE,  BYTEOrder.LITTLE_ENDIAN);	  bitsOut.write(ByteOrder.FIELD_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	207	None	replace
2907	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	259	None	add
2908	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	259	None	add
2909	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	259	None	add
2910	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	259	None	add
2911	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	259	None	add
2912	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	259	None	add
2913	[BUG]  [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  max(int)  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  no  suitable  method  found  for  max(int)	259	None	add
2914	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	53	None	add
2915	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  	non-compiled	[CE]  possible  loss  of  precision	53	None	add
2916	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;  [CE]  cannot  find  symbol  nextByteOrder  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  cannot  find  symbol  nextByteOrder	53	None	add
2917	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);	  	non-compiled	[CE]  possible  loss  of  precision	53	None	add
2918	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;	  	non-compiled	[CE]  possible  loss  of  precision	53	None	add
2919	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  count;  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  count;	  	non-compiled	[CE]  possible  loss  of  precision	53	None	add
2920	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN);  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  -  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    -    1;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN);	  	non-compiled	[CE]  incompatible  types	53	None	add
2921	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  count);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    0,    count);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	219	None	replace
2922	[BUG]  [BUGGY]  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsCachedSize);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  0,  bitsCachedSize);	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder,    0,    count);    	non-compiled	[CE]  not  a  statement	219	None	replace
2923	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  not  a  statement	97	None	add
2924	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	97	None	add
2925	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	97	None	add
2926	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.min(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	97	None	add
2927	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	97	None	add
2928	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	97	None	add
2929	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	97	None	add
2930	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  not  a  statement	103	None	add
2931	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	103	None	add
2932	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	103	None	add
2933	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	103	None	add
2934	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	103	None	add
2935	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Math.min(MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  min(int)  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Math.min(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Math.min(MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  no  suitable  method  found  for  min(int)	103	None	add
2936	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  	non-compiled	[CE]  possible  loss  of  precision	103	None	add
2937	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  not  a  statement	35	None	add
2938	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	35	None	add
2939	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	35	None	add
2940	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  +=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  +=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  +=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	35	None	add
2941	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	35	None	add
2942	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  &  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  not  a  statement	35	None	add
2943	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >>  0)?  this.bitsCachedSize  :  bitsOut;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >>  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bitsCached  >>  0)?  this.bitsCachedSize  :  bitsOut;	  	non-compiled	[CE]  incompatible  types	291	None	add
2944	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	291	None	add
2945	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached!=  0)?  this.bitsCachedSize  :  bitsOut;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bitsCached!=  0)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bitsCached!=  0)?  this.bitsCachedSize  :  bitsOut;	  	non-compiled	[CE]  unreachable  statement	291	None	add
2946	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =  Integer.parseInt(this.bits);  [CE]  cannot  find  symbol  bits  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =  Integer.parseInt(this.bits);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =  Integer.parseInt(this.bits);	  	non-compiled	[CE]  cannot  find  symbol  bits	291	None	add
2947	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	148	None	add
2948	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCachedSize  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	148	None	add
2949	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    bitsOut  =(bitsCached  >>  (bytesCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	148	None	add
2950	[BUG]  [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =  Integer.parseInt(this.bits);  [CE]  cannot  find  symbol  bits  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  bitsOut  =  Integer.parseInt(this.bits);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    bitsOut  =  Integer.parseInt(this.bits);	  	non-compiled	[CE]  cannot  find  symbol  bits	148	None	add
2951	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  maxIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  maxIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  maxIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	128	None	replace
2952	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  OSXIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  OSXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  OSXIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	128	None	replace
2953	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.abs(count  -  bitsCachedSize))  &  MASKS[count];  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (Math.abs(count  -  bitsCachedSize))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (Math.abs(count  -  bitsCachedSize))  &  MASKS[count];	  return    bitsOut    -    1;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	11	None	replace
2954	[BUG]  [BUGGY]  int  count  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	250	None	replace
2955	[BUG]  [BUGGY]  int  count  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =(byteOrder!=  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  return    this.bitsCachedSize;    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	250	None	replace
2956	[BUG]  [BUGGY]  return  bitsOut  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	156	None	add
2957	[BUG]  [BUGGY]  return  bitsOut  +  1;  bitsOut  +=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  bitsOut  +=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    bitsOut  +=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	156	None	add
2958	[BUG]  [BUGGY]  return  bitsOut  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	156	None	add
2959	[BUG]  [BUGGY]  return  bitsOut  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	156	None	add
2960	[BUG]  [BUGGY]  return  bitsOut  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	156	None	add
2961	[BUG]  [BUGGY]  return  bitsOut  +  1;  bitsOut  +  1;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  bitsOut  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    bitsOut  +  1;	  	non-compiled	[CE]  not  a  statement	156	None	add
2962	[BUG]  [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	156	None	add
2963	[BUG]  [BUGGY]  return  bitsOut  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    +    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	156	None	add
2964	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  not  a  statement	39	None	add
2965	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	39	None	add
2966	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;	  	non-compiled	[CE]  unreachable  statement	39	None	add
2967	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	39	None	add
2968	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	39	None	add
2969	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  	non-compiled	[CE]  possible  loss  of  precision	39	None	add
2970	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	39	None	add
2971	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	310	None	add
2972	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  	non-compiled	[CE]  possible  loss  of  precision	310	None	add
2973	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;  [CE]  cannot  find  symbol  nextByteOrder  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  cannot  find  symbol  nextByteOrder	310	None	add
2974	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;	  	non-compiled	[CE]  possible  loss  of  precision	310	None	add
2975	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);	  	non-compiled	[CE]  possible  loss  of  precision	310	None	add
2976	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  count;  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  2;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    2;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  count;	  	non-compiled	[CE]  possible  loss  of  precision	310	None	add
2977	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  not  a  statement	276	None	replace
2978	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsOut);    	compilable	  [FE]  AssertionError  	276	11	replace
2979	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsOut);    	compilable	  [FE]  AssertionError  	276	11	replace
2980	[BUG]  [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  missing  return  statement	276	None	replace
2981	[BUG]  [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  incompatible  types	276	None	replace
2982	[BUG]  [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut.write(MASKS[count]);  }  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut.write(MASKS[count]);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut.write(MASKS[count]);  }	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  long  cannot  be  dereferenced	276	None	replace
2983	[BUG]  [BUGGY]  return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE);  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  MAXIMUM_CACHE_SIZE?  bitsOut  :(bytesCachedSize  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    MAXIMUM_CACHE_SIZE?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  >  expected	133	None	replace
2984	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(10.0,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(10.0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(10.0,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	40	None	replace
2985	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(1,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(1,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	40	12	replace
2986	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(1,  bitsCachedSize)+  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(1,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(1,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	40	12	replace
2987	[BUG]  [BUGGY]  return  bitsOut  -  1L;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	150	None	add
2988	[BUG]  [BUGGY]  return  bitsOut  -  1L;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	150	None	add
2989	[BUG]  [BUGGY]  return  bitsOut  -  1L;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	150	None	add
2990	[BUG]  [BUGGY]  return  bitsOut  -  1L;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	150	None	add
2991	[BUG]  [BUGGY]  return  bitsOut  -  1L;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	150	None	add
2992	[BUG]  [BUGGY]  return  bitsOut  -  1L;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	150	None	add
2993	[BUG]  [BUGGY]  return  bitsOut  -  1L;  bitsOut  -  1L;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1L;  bitsOut  -  1L;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    1L;    bitsOut  -  1L;	  	non-compiled	[CE]  not  a  statement	150	None	add
2994	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE  +  1));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE  +  1));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	non-compiled	[CE]  ';'  expected	226	None	replace
2995	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(16,  bitsCachedSize  +  1));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(16,  bitsCachedSize  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(16,  bitsCachedSize  +  1));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	non-compiled	[CE]  ';'  expected	226	None	replace
2996	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count  +  1));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  count  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  count  +  1));	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE    +    1));    	non-compiled	[CE]  ';'  expected	226	None	replace
2997	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS_SIZE,  bitsCachedSize)+  1;  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS_SIZE,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS_SIZE,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	46	None	replace
2998	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	10	replace
2999	[BUG]  [BUGGY]  return  bitsOut  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	10	replace
3000	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE)*  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE)*  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	10	replace
3001	[BUG]  [BUGGY]  return  bitsOut  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE)*  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE)*  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -(bitsCachedSize  *  MAXIMUM_CACHE_SIZE)*  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	10	replace
3002	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  16  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  16  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
3003	[BUG]  [BUGGY]  return  bitsOut  -  16  *  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  16  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  16  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	50	12	replace
3004	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	85	None	add
3005	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  &  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  &  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  &  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	85	None	add
3006	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	85	None	add
3007	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	85	None	add
3008	[BUG]  [BUGGY]  if(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	209	None	replace
3009	[BUG]  [BUGGY]  if(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	209	None	replace
3010	[BUG]  [BUGGY]  if(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  =  ByteOrder.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut	  return    bitsOut    -    1;    bitsOut    =    ByteOrder.readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	209	None	replace
3011	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(MASKS.length,  bitsCachedSize);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	104	12	replace
3012	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  bitsCachedSize);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS.length,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS.length,  bitsCachedSize);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	compilable	  [FE]  AssertionError  	104	12	replace
3013	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(BITS.length,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BITS  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(BITS.length,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(BITS.length,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.min(MASKS.length,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BITS	104	None	replace
3014	[BUG]  [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  count);  [CE]  long  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  -(bitsCachedSize  -  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  -(bitsCachedSize  -  count);	  return    bitsOut.length    -(bitsCachedSize    -    bitsOut.length);    	non-compiled	[CE]  long  cannot  be  dereferenced	270	None	replace
3015	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
3016	[BUG]  [BUGGY]  return  bitsOut  -  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    -    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	42	12	replace
3017	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  	non-compiled	[CE]  not  a  statement	37	None	add
3018	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	37	None	add
3019	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  1;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  1;	  	non-compiled	[CE]  unreachable  statement	37	None	add
3020	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  2;  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)/  2;	  	non-compiled	[CE]  unreachable  statement	37	None	add
3021	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  2;	  	non-compiled	[CE]  not  a  statement	37	None	add
3022	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)/    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	37	None	add
3023	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (bit  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (bit  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (bit	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	161	None	replace
3024	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (mes  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (mes  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >>  (mes	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	161	None	replace
3025	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize!=  (bit  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize!=  (bit  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize!=  (bit	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	161	None	replace
3026	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >=  (bit  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >=  (bit  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCachedSize  >=  (bit	  return    bitsOut    &    MASKS[count];    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	161	None	replace
3027	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
3028	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  +=  MASKS[count  -  1];  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  -  1];  bitsOut  +=  MASKS[count  -  1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    -    1];    bitsOut  +=  MASKS[count  -  1];	  	non-compiled	[CE]  unreachable  statement	19	None	add
3029	[BUG]  [BUGGY]  BitInputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  BitInputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	BitInputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	247	None	replace
3030	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  -  1);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	247	None	replace
3031	[BUG]  [BUGGY]  bitsOut  =(bitsOut  >>  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsOut  >>  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsOut  >>  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];	  return    this.bitsCachedSize;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	111	None	replace
3032	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  =  in.readInt();	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	213	None	replace
3033	[BUG]  [BUGGY]  if(bitsOut!=  null)  {  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  [CE]  incomparable  types:  long  and  <null>  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  null)  {  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  null)  {  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  incomparable  types:  long  and  <null>	213	None	replace
3034	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  [CE]  incomparable  types:  long  and  <null>  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  incomparable  types:  long  and  <null>	213	None	replace
3035	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  else  {  bitsOut  =  in.readInt();  }  [CE]  incomparable  types:  long  and  <null>  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  else  {  bitsOut  =  in.readInt();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  else  {  bitsOut  =  in.readInt();  }	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  incomparable  types:  long  and  <null>	213	None	replace
3036	[BUG]  [BUGGY]  if(bitsOut!=  null)  {  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  else  {  bitsOut  =  in.readInt();  }  [CE]  incomparable  types:  long  and  <null>  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  null)  {  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  else  {  bitsOut  =  in.readInt();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  null)  {  return  bitsOut  -  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  else  {  bitsOut  =  in.readInt();  }	  return    bitsOut    -    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  incomparable  types:  long  and  <null>	213	None	replace
3037	[BUG]  [BUGGY]  return  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(long,int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	79	None	replace
3038	[BUG]  [BUGGY]  return  bitsOut.read(byte,  MAXIMUM_CACHE_SIZE);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byte,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byte,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  '.class'  expected	79	None	replace
3039	[BUG]  [BUGGY]  return  bitsOut.read(MASKS,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(MASKS,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(MASKS,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	79	None	replace
3040	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	49	None	add
3041	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  	non-compiled	[CE]  possible  loss  of  precision	49	None	add
3042	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	49	None	add
3043	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	49	None	add
3044	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	49	None	add
3045	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.toString(MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  incompatible  types	49	None	add
3046	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE    *    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	49	None	add
3047	[BUG]  [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  <  4)?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  <  4)?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE  +  1);	  return(bitsOut    <    <    4)?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
3048	[BUG]  [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	6	None	replace
3049	[BUG]  [BUGGY]  return  in  &  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in  &  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in  &  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	6	None	replace
3050	[BUG]  [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  InputStream  in  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	6	None	replace
3051	[BUG]  [BUGGY]  return  bitsOut  &  Math.pow(10,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.pow(10,  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.pow(10,  MAXIMUM_CACHE_SIZE));	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	30	None	replace
3052	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bitsOut  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :(bitsOut  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsCachedSize  :(bitsOut  >  MAXIMUM_CACHE_SIZE);	  return    bitsOut    <    <    4?    bitsCachedSize    :(bytesCached    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	264	None	replace
3053	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	51	None	add
3054	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;  [CE]  cannot  find  symbol  nextByteOrder  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  cannot  find  symbol  nextByteOrder	51	None	add
3055	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;	  	non-compiled	[CE]  possible  loss  of  precision	51	None	add
3056	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);	  	non-compiled	[CE]  possible  loss  of  precision	51	None	add
3057	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  count;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE  +  1;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    MAXIMUM_CACHE_SIZE    +    1;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  count;	  	non-compiled	[CE]  possible  loss  of  precision	51	None	add
3058	[BUG]  [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	329	None	replace
3059	[BUG]  [BUGGY]  bitsOut  -=  in.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  in.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  in.readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    InputStream    in    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	329	None	replace
3060	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE  +  1);  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE  +  1);	  bitsOut    =    readBits(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	203	None	replace
3061	[BUG]  [BUGGY]  bitsOut.write(MASKS[count]  -  1,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count]  -  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count]  -  1,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count]);    	non-compiled	[CE]  long  cannot  be  dereferenced	63	None	replace
3062	[BUG]  [BUGGY]  return  bitsInt  *  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bitsInt  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsInt  *  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsInt  *  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  bitsInt	57	None	replace
3063	[BUG]  [BUGGY]  return  bitsOut  *  MILLIS_SIZE;  [CE]  cannot  find  symbol  MILLIS_SIZE  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MILLIS_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MILLIS_SIZE;	  return    bitsOut    *    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MILLIS_SIZE	57	None	replace
3064	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  BYTE_SIZE;  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  BYTE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  MAXIMUM_CACHE_SIZE  *  BYTE_SIZE;	  return    bitsOut    *    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	57	None	replace
3065	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	273	None	replace
3066	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  possible  loss  of  precision	273	None	replace
3067	[BUG]  [BUGGY]  return  readBits(in,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  readBits(in,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  readBits(in,  MAXIMUM_CACHE_SIZE);	  return    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	204	None	replace
3068	[BUG]  [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MASKS_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  cannot  find  symbol  MASKS_CACHE_SIZE  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  MAXIMUM_CACHE_SIZE  =  Math.min(MASKS_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  MAXIMUM_CACHE_SIZE  =  Math.min(MASKS_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  cannot  find  symbol  MASKS_CACHE_SIZE	197	None	replace
3069	[BUG]  [BUGGY]  return  bitsOut  -  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	152	None	add
3070	[BUG]  [BUGGY]  return  bitsOut  -  2;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	152	None	add
3071	[BUG]  [BUGGY]  return  bitsOut  -  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	152	None	add
3072	[BUG]  [BUGGY]  return  bitsOut  -  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	152	None	add
3073	[BUG]  [BUGGY]  return  bitsOut  -  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  possible  loss  of  precision	152	None	add
3074	[BUG]  [BUGGY]  return  bitsOut  -  2;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	152	None	add
3075	[BUG]  [BUGGY]  return  bitsOut  -  2;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  2;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    2;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	152	None	add
3076	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	138	None	add
3077	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	138	None	add
3078	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (this.bitsCachedSize  -  count))  &  MASKS[count];  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (this.bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  (this.bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	138	None	add
3079	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCachedSize  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	138	None	add
3080	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  <  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  ';'  expected	138	None	add
3081	[BUG]  [BUGGY]  while(in.skipChildren())  {  return  this.bitsCachedSize;  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(in.skipChildren())  {  return  this.bitsCachedSize;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(in.skipChildren())  {  return  this.bitsCachedSize;  }	  return    this.bitsCachedSize;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
3082	[BUG]  [BUGGY]  while(in.skipChildren())  {  bitsOut.skipChildren();  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(in.skipChildren())  {  bitsOut.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(in.skipChildren())  {  bitsOut.skipChildren();	  return    this.bitsCachedSize;    in.skipChildren();    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
3083	[BUG]  [BUGGY]  while(in.skipChildren())  {  return  bitsOut;  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(in.skipChildren())  {  return  bitsOut;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(in.skipChildren())  {  return  bitsOut;  }	  return    this.bitsCachedSize;    in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
3084	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    in.skipChildren();    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	112	None	replace
3085	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(MASKS_OUT,  bitsCachedSize);  [CE]  cannot  find  symbol  MASKS_OUT  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(MASKS_OUT,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(MASKS_OUT,  bitsCachedSize);	  return    bitsOut    &    Math.max(bitsCachedSize,    count);    	non-compiled	[CE]  cannot  find  symbol  MASKS_OUT	106	None	replace
3086	[BUG]  [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	120	None	replace
3087	[BUG]  [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	120	None	replace
3088	[BUG]  [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readBits(bytesCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	122	None	replace
3089	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    BYTE_SIZE;    	non-compiled	[CE]  ';'  expected	224	None	replace
3090	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [CE]  cannot  find  symbol  bytesCached  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bytesCached  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	289	None	add
3091	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  bitsOut  =(bytesCached  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    bitsOut  =(bytesCached  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  bitsOut;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	289	None	add
3092	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :  MASKS[count];  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsCachedSize  :  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsCachedSize  :  MASKS[count];	  return    bitsOut    <    <    4?    bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
3093	[BUG]  [BUGGY]  return  bitsOut  &  Math.pow(10,  MAXIMUM_CACHE_SIZE);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.pow(10,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.pow(10,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	98	None	replace
3094	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }  [CE]  incomparable  types:  long  and  <null>  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }	  return    this.bitsCachedSize;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	109	None	replace
3095	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE	  return    this.bitsCachedSize;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	109	None	replace
3096	[BUG]  [BUGGY]  return  bitsOut.read(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.read(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(byteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  long  cannot  be  dereferenced	83	None	replace
3097	[BUG]  [BUGGY]  return  in.read(byteOrder.BYTE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(byteOrder.BYTE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(byteOrder.BYTE_SIZE,  bitsCachedSize);	  return    bitsOut.read(byteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	83	None	replace
3098	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut.close();  }  [CE]  long  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut.close();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut.close();  }	  return    bitsOut    -    1;    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	9	None	replace
3099	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  [CE]  incomparable  types:  long  and  <null>  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }	  return    bitsOut    -    1;    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incomparable  types:  long  and  <null>	9	None	replace
3100	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  =  in.readInt();  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  =  in.readInt();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=  MAXIMUM_CACHE_SIZE;  }  else  {  bitsOut  =  in.readInt();  }	  return    bitsOut    -    1;    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
3101	[BUG]  [BUGGY]  return  Bits.toByteArray(bitsOut);  [CE]  cannot  find  symbol  Bits  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  Bits.toByteArray(bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  Bits.toByteArray(bitsOut);	  return    nextByteOrder.toByteArray();    	non-compiled	[CE]  cannot  find  symbol  Bits	125	None	replace
3102	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	87	None	add
3103	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  	non-compiled	[CE]  possible  loss  of  precision	87	None	add
3104	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;  [CE]  cannot  find  symbol  nextByteOrder  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  cannot  find  symbol  nextByteOrder	87	None	add
3105	[BUG]  [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  byteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  byteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  byteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  incompatible  types	87	None	add
3106	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MASKS[count  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >>  (MASKS[count  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >>  (MASKS[count  -  count))  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ']'  expected	2	None	replace
3107	[BUG]  [BUGGY]  while(in.skipChildren())  {  return  bitsOut  -  1;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(in.skipChildren())  {  return  bitsOut  -  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(in.skipChildren())  {  return  bitsOut  -  1;	  return    bitsOut    -    1;    in.skipChildren();    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
3108	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	82	None	replace
3109	[BUG]  [BUGGY]  return  byteOrder.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  byteOrder.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  byteOrder.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	82	None	replace
3110	[BUG]  [BUGGY]  return  byteOrder.read(ByteOrder.BYTE_SIZE,  bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  byteOrder.read(ByteOrder.BYTE_SIZE,  bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  byteOrder.read(ByteOrder.BYTE_SIZE,  bitsOut,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	82	None	replace
3111	[BUG]  [BUGGY]  return  bytesOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bytesOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bytesOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	82	None	replace
3112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  *  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  %  MAXIMUM_CACHE_SIZE  *  2;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	90	12	replace
3113	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  *  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE  *  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  MAXIMUM_CACHE_SIZE  *  2;	  return    bitsOut    %    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	90	12	replace
3114	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (MASKS_SIZE  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >=  (MASKS_SIZE  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >=  (MASKS_SIZE  -  count))  &  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	115	None	replace
3115	[BUG]  [BUGGY]  long  bitsOut  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  bitsOut  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  long  bitsOut  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	long  bitsOut  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsOut,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  is  already  defined  in  method  readBits(int)	199	None	replace
3116	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  >  4?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  >  4?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  >  4?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	243	None	replace
3117	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MAXIMUM_CACHE_SIZE    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	243	None	replace
3118	[BUG]  [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsOut  :  new  long(MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsOut  :  new  long(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MAXIMUM_CACHE_SIZE  <  <  4?  bitsOut  :  new  long(MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MAXIMUM_CACHE_SIZE    <    <    4?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	243	None	replace
3119	[BUG]  [BUGGY]  bitsOut  =(bitsOut  >>  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsOut  >>  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsOut  >>  (bitsCachedSize  -  count))&  MASKS[count];	  return    this.bitsCachedSize;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	108	None	replace
3120	[BUG]  [BUGGY]  bitsOut  =(bitsOut  >=  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsOut  >=  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsOut  >=  (bitsCachedSize  -  count))&  MASKS[count];	  return    this.bitsCachedSize;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	108	None	replace
3121	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS  -  count))&  this.bitsCachedSize[count];  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS  -  count))&  this.bitsCachedSize[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MASKS  -  count))&  this.bitsCachedSize[count];	  return    this.bitsCachedSize;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	108	None	replace
3122	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS.length  -  count))&  this.bitsCachedSize[count];  [CE]  array  required,  but  int  found  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MASKS.length  -  count))&  this.bitsCachedSize[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MASKS.length  -  count))&  this.bitsCachedSize[count];	  return    this.bitsCachedSize;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  array  required,  but  int  found	108	None	replace
3123	[BUG]  [BUGGY]  bitsOut.write(MASKS[bitsCachedSize  +  1]);  [CE]  long  cannot  be  dereferenced  [FE]                                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[bitsCachedSize  +  1]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[bitsCachedSize  +  1]);	  bitsOut.write(MASKS[count    +    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	64	None	replace
3124	[BUG]  [BUGGY]  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	&=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    &=    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	272	None	replace
3125	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached  >>  (MAXIM  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached  >>  (MAXIM  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached  >>  (MAXIM	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	116	None	replace
3126	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached!=  (MAXIM  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached!=  (MAXIM  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached!=  (MAXIM	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	116	None	replace
3127	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached  >=  (MAXIM  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached  >=  (MAXIM  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulSfântulOut  =(bitsCached  >=  (MAXIM	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	116	None	replace
3128	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  count  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }  [CE]  incomparable  types:  long  and  <null>  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  count  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  count  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incomparable  types:  long  and  <null>	12	None	replace
3129	[BUG]  [BUGGY]  return  bitsOut  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	12	None	replace
3130	[BUG]  [BUGGY]  Int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
3131	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    bitsOut  =(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	144	None	add
3132	[BUG]  [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (this.bitsCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  MAXIMUM_CACHE_SIZE?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  bitsOut  =(bytesCached  >>  (this.bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    <    MAXIMUM_CACHE_SIZE?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE);    bitsOut  =(bytesCached  >>  (this.bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	144	None	add
3133	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	95	None	add
3134	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  not  a  statement	95	None	add
3135	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	95	None	add
3136	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	95	None	add
3137	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	95	None	add
3138	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    bitsOut  &=  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	95	None	add
3139	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	95	None	add
3140	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	95	None	add
3141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  1  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  1  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
3142	[BUG]  [BUGGY]  return(bitsOut  <  1  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  1  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  1  ||  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
3143	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  1)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  <  1)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
3144	[BUG]  [BUGGY]  return(bitsOut  <  1)?  this.bitsCachedSize  :  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  <  1)?  this.bitsCachedSize  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  <  1)?  this.bitsCachedSize  :  1;	  return(bitsOut    >    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    1;    	compilable	  [FE]  AssertionError  	149	12	replace
3145	[BUG]  [BUGGY]  return  bitsOut  %  Math.pow(10,  MAXIMUM_CACHE_SIZE);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  Math.pow(10,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  %  Math.pow(10,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    %    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  possible  loss  of  precision	260	None	replace
3146	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bytesCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bytesCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bytesCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	198	None	replace
3147	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  readBits(byteOrder);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	198	None	replace
3148	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bytesCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bytesCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bytesCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    readBits(byteOrder);    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	198	None	replace
3149	[BUG]  [BUGGY]  return  in.read(ByteOrder.BYTE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.read(ByteOrder.BYTE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.read(ByteOrder.BYTE_ENDIAN,  MAXIMUM_CACHE_SIZE);	  return    in.read(ByteOrder.BYTE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	81	None	replace
3150	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  >>  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  >>  (bitsCachedSize  -  count))  &  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(byteOrder  >>  (bitsCachedSize  -  count))  &  MASKS[count  *  2];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	287	None	add
3151	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  &  MASKS[count  *  2];  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  &  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  &  MASKS[count  *  2];	  	non-compiled	[CE]  not  a  statement	287	None	add
3152	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  >>  (bitsCachedSize  *  2))  &  MASKS[count  *  2];  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  >>  (bitsCachedSize  *  2))  &  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(byteOrder  >>  (bitsCachedSize  *  2))  &  MASKS[count  *  2];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	287	None	add
3153	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  &  MASKS[count  *  2]  :  null;  [CE]  unreachable  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  &  MASKS[count  *  2]  :  null;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  &  MASKS[count  *  2]  :  null;	  	non-compiled	[CE]  unreachable  statement	287	None	add
3154	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  *  2];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  *  2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)&  MASKS[count  *  2];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	287	None	add
3155	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  null;  [CE]  unreachable  statement  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[count  *  2];  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  null;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[count    *    2];    bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  null;	  	non-compiled	[CE]  unreachable  statement	287	None	add
3156	[BUG]  [BUGGY]  return  bitsOut.length  /(bitsCachedSize  -  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.length  /(bitsCachedSize  -  MAXIMUM_CACHE_SIZE));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length  /(bitsCachedSize  -  MAXIMUM_CACHE_SIZE));	  return    bitsOut.length    -(bitsCachedSize    -    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	269	None	replace
3157	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();    	compilable	  [FE]  AssertionError  	5	12	replace
3158	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();    	compilable	  [FE]  AssertionError  	5	12	replace
3159	[BUG]  [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    in.skipChildren();    	non-compiled	[CE]  not  a  statement	5	None	replace
3160	[BUG]  [BUGGY]  return  bitsOut  /  MILLIS_SIZE;  [CE]  cannot  find  symbol  MILLIS_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MILLIS_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  /  MILLIS_SIZE;	  return    bitsOut    /    MASKS_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MILLIS_SIZE	92	None	replace
3161	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  unreachable  statement	200	None	replace
3162	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  ')'  expected	200	None	replace
3163	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE)/  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  unreachable  statement	200	None	replace
3164	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  >=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  >=  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >=    ByteOrder.LITTLE_ENDIAN)?    bitsCached    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	239	None	replace
3165	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  4;	  return    bitsOut    *    2;    	compilable	  [FE]  AssertionError  	56	12	replace
3166	[BUG]  [BUGGY]  return  bitsOut  *  4;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  4;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  4;	  return    bitsOut    *    2;    	compilable	  [FE]  AssertionError  	56	12	replace
3167	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  3;	  return    bitsOut    *    2;    	compilable	  [FE]  AssertionError  	56	12	replace
3168	[BUG]  [BUGGY]  return  bitsOut  *  3;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  3;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  3;	  return    bitsOut    *    2;    	compilable	  [FE]  AssertionError  	56	12	replace
3169	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCached  <  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCached  <  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =(bytesCached    >=    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	65	None	replace
3170	[BUG]  [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  bitsOut  +=  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  bitsOut  +=  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	305	None	replace
3171	[BUG]  [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  }  else  {  bitsOut.write(Integer.toString(MAXIMUM_CACHE_SIZE));  }  [CE]  long  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  }  else  {  bitsOut.write(Integer.toString(MAXIMUM_CACHE_SIZE));  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  }  else  {  bitsOut.write(Integer.toString(MAXIMUM_CACHE_SIZE));  }	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  long  cannot  be  dereferenced	305	None	replace
3172	[BUG]  [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  }  else  {  bitsOut  =  Integer.parseInt(bitsCachedSize);  }  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  }  else  {  bitsOut  =  Integer.parseInt(bitsCachedSize);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  }  else  {  bitsOut  =  Integer.parseInt(bitsCachedSize);  }	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	305	None	replace
3173	[BUG]  [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  }  else  {  bitsOut  =  new  int[MAXIMUM_CACHE_SIZE];  }  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  }  else  {  bitsOut  =  new  int[MAXIMUM_CACHE_SIZE];  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  }  else  {  bitsOut  =  new  int[MAXIMUM_CACHE_SIZE];  }	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  incompatible  types	305	None	replace
3174	[BUG]  [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  }  else  {  bitsOut  =  Integer.toString(bitsCachedSize);  }  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  }  else  {  bitsOut  =  Integer.toString(bitsCachedSize);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  +=  MASKS[count];  }  else  {  bitsOut  =  Integer.toString(bitsCachedSize);  }	  return    bitsOut    &    MASKS[count];    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  incompatible  types	305	None	replace
3175	[BUG]  [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	180	None	add
3176	[BUG]  [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	180	None	add
3177	[BUG]  [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	180	None	add
3178	[BUG]  [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  3;  InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    3;    InputStream  in  =  readInt(bitsOut,  MAXIMUM_CACHE_SIZE);  bitsOut  -=  in.readInt();	  	non-compiled	[CE]  cannot  find  symbol	180	None	add
3179	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	36	12	replace
3180	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	36	12	replace
3181	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.min(0,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	36	12	replace
3182	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(0,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(0,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(0,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.min(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    	compilable	  [FE]  AssertionError  	36	12	replace
3183	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    bitsOut  &  Math.max(bitsCachedSize,  count)+  1;	  	non-compiled	[CE]  not  a  statement	45	None	add
3184	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	45	None	add
3185	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  +=  Math.max(bitsCachedSize,  count)+  1;  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  +=  Math.max(bitsCachedSize,  count)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    bitsOut  +=  Math.max(bitsCachedSize,  count)+  1;	  	non-compiled	[CE]  unreachable  statement	45	None	add
3186	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	45	None	add
3187	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  count);  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  count);	  	non-compiled	[CE]  unreachable  statement	45	None	add
3188	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  count)+  1;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  count)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  count)+  1;	  	non-compiled	[CE]  not  a  statement	45	None	add
3189	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  	non-compiled	[CE]  unreachable  statement	45	None	add
3190	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut));  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count)+    1;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut));	  	non-compiled	[CE]  ';'  expected	45	None	add
3191	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	142	None	add
3192	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  incompatible  types	142	None	add
3193	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (this.bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	142	None	add
3194	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (this.bitsCachedSize  -  count))  &  MASKS[count];  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >>  (this.bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >>  (this.bitsCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  unreachable  statement	142	None	add
3195	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	142	None	add
3196	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  MAXIMUM_CACHE_SIZE)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  ';'  expected	142	None	add
3197	[BUG]  [BUGGY]  Integer  bitsOut  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  variable  bitsOut  is  already  defined  in  method  readBits(int)  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  bitsOut  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  bitsOut  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  bitsOut  is  already  defined  in  method  readBits(int)	166	None	replace
3198	[BUG]  [BUGGY]  int  count  =  readBits(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    int    count    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	166	None	replace
3199	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1],  MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1]);  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1],  MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1],  MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1]);	  bitsOut.write(MASKS[count    -    1]);    	non-compiled	[CE]  ')'  expected	59	None	replace
3200	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1]  +  1,  MAXIMUM_CACHE_SIZE);  [CE]  long  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1]  +  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1]  +  1,  MAXIMUM_CACHE_SIZE);	  bitsOut.write(MASKS[count    -    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	59	None	replace
3201	[BUG]  [BUGGY]  bitsOut.write(MASKS[count  -  1],  bitsCachedSize);  [CE]  long  cannot  be  dereferenced  [FE]                              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASKS[count  -  1],  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASKS[count  -  1],  bitsCachedSize);	  bitsOut.write(MASKS[count    -    1]);    	non-compiled	[CE]  long  cannot  be  dereferenced	59	None	replace
3202	[BUG]  [BUGGY]  return  bitsOut  *  2;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	55	None	add
3203	[BUG]  [BUGGY]  return  bitsOut  *  2;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	55	None	add
3204	[BUG]  [BUGGY]  return  bitsOut  *  2;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    InputStream  in  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  in.readInt();	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	55	None	add
3205	[BUG]  [BUGGY]  return  bitsOut  *  2;  int  count  =  readBits(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  2;  int  count  =  readBits(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    *    2;    int  count  =  readBits(bitsOut,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	55	None	add
3206	[BUG]  [BUGGY]  return  bitsOut  -  1,  count;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  1,  count;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1,  count;	  return    bitsOut    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ';'  expected	88	None	replace
3207	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	331	None	replace
3208	[BUG]  [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	331	None	replace
3209	[BUG]  [BUGGY]  if(bitsOut  >=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  >=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  >=  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	331	None	replace
3210	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  -  1;  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	331	None	replace
3211	[BUG]  [BUGGY]  return  bitsOut?  bitsOut  :  MAXIMUM_CACHE_SIZE  +  1;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  bitsOut  :  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  bitsOut  :  MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	242	None	replace
3212	[BUG]  [BUGGY]  return  bitsOut?  bitsIn  :  MAXIMUM_CACHE_SIZE;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut?  bitsIn  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut?  bitsIn  :  MAXIMUM_CACHE_SIZE;	  return    bitsOut?    bitsOut    :    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  incompatible  types	242	None	replace
3213	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	105	None	add
3214	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	105	None	add
3215	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	105	None	add
3216	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  &=  Math.max(bitsCachedSize,  count);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  &=  Math.max(bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    bitsOut  &=  Math.max(bitsCachedSize,  count);	  	non-compiled	[CE]  unreachable  statement	105	None	add
3217	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  	non-compiled	[CE]  unreachable  statement	105	None	add
3218	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  &  Math.max(bitsCachedSize,  count);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  bitsOut  &  Math.max(bitsCachedSize,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    bitsOut  &  Math.max(bitsCachedSize,  count);	  	non-compiled	[CE]  not  a  statement	105	None	add
3219	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  max(int)  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  no  suitable  method  found  for  max(int)	105	None	add
3220	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  count);  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  count);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    count);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  count);	  	non-compiled	[CE]  unreachable  statement	105	None	add
3221	[BUG]  [BUGGY]  bitsOut.write(MASK_SIZE,  MASKS_SIZE);  [CE]  cannot  find  symbol  MASK_SIZE  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASK_SIZE,  MASKS_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASK_SIZE,  MASKS_SIZE);	  bitsOut.write(MASK_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MASK_SIZE	318	None	replace
3222	[BUG]  [BUGGY]  bitsOut.write(MASK_SIZE,  MASKS[count]);  [CE]  cannot  find  symbol  MASK_SIZE  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut.write(MASK_SIZE,  MASKS[count]);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut.write(MASK_SIZE,  MASKS[count]);	  bitsOut.write(MASK_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MASK_SIZE	318	None	replace
3223	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  +  1;  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE  +  1;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    int    MAXIMUM_CACHE_SIZE    =(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	284	None	replace
3224	[BUG]  [BUGGY]  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  *  MAXIMUM_CACHE_SIZE;  in.skipChildren();  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  *  MAXIMUM_CACHE_SIZE;  in.skipChildren();	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    in.skipChildren();    	non-compiled	[CE]  not  a  statement	68	None	replace
3225	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  1);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  1);	  	non-compiled	[CE]  unreachable  statement	261	None	add
3226	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  0);  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  0);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  0);	  	non-compiled	[CE]  unreachable  statement	261	None	add
3227	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	261	None	add
3228	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  2);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  2);	  	non-compiled	[CE]  unreachable  statement	261	None	add
3229	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	261	None	add
3230	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  &=  Math.max(bitsCachedSize,  1);  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  bitsOut  &=  Math.max(bitsCachedSize,  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    bitsOut  &=  Math.max(bitsCachedSize,  1);	  	non-compiled	[CE]  unreachable  statement	261	None	add
3231	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(Math.max(bitsCachedSize,  1));  [CE]  no  suitable  method  found  for  max(int)  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  1);  int  MAXIMUM_CACHE_SIZE  =  Math.max(Math.max(bitsCachedSize,  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    1);    int  MAXIMUM_CACHE_SIZE  =  Math.max(Math.max(bitsCachedSize,  1));	  	non-compiled	[CE]  no  suitable  method  found  for  max(int)	261	None	add
3232	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	313	None	replace
3233	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_S	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	313	None	replace
3234	[BUG]  [BUGGY]  return  bitsOut  &  MASKS_CACHE_SIZE;  [CE]  cannot  find  symbol  MASKS_CACHE_SIZE  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS_CACHE_SIZE;	  return    bitsOut    &    MAXIMUM_CAMCHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MASKS_CACHE_SIZE	322	None	replace
3235	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  maxIMUM_CACHE_SIZE;  [CE]  long  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  maxIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  maxIMUM_CACHE_SIZE;	  return    bitsOut.toByteArray()    &&    count    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	124	None	replace
3236	[BUG]  [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  2;  [CE]  long  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray()  &&  count  <  2;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray()  &&  count  <  2;	  return    bitsOut.toByteArray()    &&    count    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  long  cannot  be  dereferenced	124	None	replace
3237	[BUG]  [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE)+  1;	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	314	None	replace
3238	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	303	None	replace
3239	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readByte  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readByte  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readByte	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	303	None	replace
3240	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readByte(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readByte(  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readByte(	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	303	None	replace
3241	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readByte(byteOrder  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readByte(byteOrder  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  readByte(byteOrder	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	303	None	replace
3242	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	303	None	replace
3243	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  }  else  {  bitsOut  =	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	303	None	replace
3244	[BUG]  [BUGGY]  return  bitsOut  <  <  2  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  2  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  2  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE;	  return    bitsOut    <    <    2    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
3245	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	21	None	add
3246	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  bitsOut  +=  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  bitsOut  +=  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    bitsOut  +=  MASKS[MAXIMUM_CACHE_SIZE];	  	non-compiled	[CE]  unreachable  statement	21	None	add
3247	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  	non-compiled	[CE]  possible  loss  of  precision	21	None	add
3248	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  byteOrder.LITTLE_ENDIAN;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[MAXIMUM_CACHE_SIZE];  int  MAXIMUM_CACHE_SIZE  =  byteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[MAXIMUM_CACHE_SIZE];    int  MAXIMUM_CACHE_SIZE  =  byteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  incompatible  types	21	None	add
3249	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  2);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  2);	  	non-compiled	[CE]  unreachable  statement	326	None	add
3250	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  &  Math.max(bitsCachedSize,  2);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  &  Math.max(bitsCachedSize,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    bitsOut  &  Math.max(bitsCachedSize,  2);	  	non-compiled	[CE]  not  a  statement	326	None	add
3251	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  2);  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  2);	  	non-compiled	[CE]  unreachable  statement	326	None	add
3252	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  +=  Math.max(bitsCachedSize,  2);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  bitsOut  +=  Math.max(bitsCachedSize,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    bitsOut  +=  Math.max(bitsCachedSize,  2);	  	non-compiled	[CE]  unreachable  statement	326	None	add
3253	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    int  MAXIMUM_CACHE_SIZE  =  Math.max(0,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  unreachable  statement	326	None	add
3254	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  int  MAXIMUM_CACHE_SIZE  =  Math.max(Math.max(bitsCachedSize,  2));  [CE]  no  suitable  method  found  for  max(int)  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  int  MAXIMUM_CACHE_SIZE  =  Math.max(Math.max(bitsCachedSize,  2));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    int  MAXIMUM_CACHE_SIZE  =  Math.max(Math.max(bitsCachedSize,  2));	  	non-compiled	[CE]  no  suitable  method  found  for  max(int)	326	None	add
3255	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  2);  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  2);  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  2);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    Math.max(bitsCachedSize,    2);    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  2);	  	non-compiled	[CE]  unreachable  statement	326	None	add
3256	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	89	None	add
3257	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	89	None	add
3258	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	89	None	add
3259	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  %  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  %  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  %  MAXIMUM_CACHE_SIZE  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	89	None	add
3260	[BUG]  [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  &  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  %  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  &  MASKS[count]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    %    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  &  MASKS[count]  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  possible  loss  of  precision	89	None	add
3261	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(count,  MAXIMUM_CACHE_SIZE)+  1;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    MAXIMUM_CACHE_SIZE    =    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	195	None	replace
3262	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(count,  MAXIMUM_CACHE_SIZE)+  1;  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	3	None	replace
3263	[BUG]  [BUGGY]  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  readBits(this,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	readBits(this,  MAXIMUM_CACHE_SIZE,  bitsOut);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	251	None	replace
3264	[BUG]  [BUGGY]  in  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  in  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	in  =  readBits(this,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	251	None	replace
3265	[BUG]  [BUGGY]  InputStream  in  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(this,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(this,  MAXIMUM_CACHE_SIZE);	  return    this.bitsCachedSize;    InputStream    in    =    readBits(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	251	None	replace
3266	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  	non-compiled	[CE]  possible  loss  of  precision	47	None	add
3267	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  0;	  	non-compiled	[CE]  possible  loss  of  precision	47	None	add
3268	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  Math.max(bitsOut,  bitsCachedSize);	  	non-compiled	[CE]  possible  loss  of  precision	47	None	add
3269	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;  [CE]  cannot  find  symbol  nextByteOrder  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =  nextByteOrder.LITTLE_ENDIAN;	  	non-compiled	[CE]  cannot  find  symbol  nextByteOrder	47	None	add
3270	[BUG]  [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  /  MAXIMUM_CACHE_SIZE;  int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    /    MAXIMUM_CACHE_SIZE;    int  MAXIMUM_CACHE_SIZE  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  1;	  	non-compiled	[CE]  possible  loss  of  precision	47	None	add
3271	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MAXIMUM_CACHE_SIZE  -  count))&  MAXIMUM_CACHE_SIZE;  [CE]  variable  bitsOut  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  (MAXIMUM_CACHE_SIZE  -  count))&  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =(bitsCachedSize  >>  (MAXIMUM_CACHE_SIZE  -  count))&  MAXIMUM_CACHE_SIZE;	  return    bitsOut    *    MAXIMUM_CACHE_SIZE;    bitsOut    =(bytesCached    >>    (bitsCachedSize    -    count))    &    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  variable  bitsOut  might  already  have  been  assigned	69	None	replace
3272	[BUG]  [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MIN_VALUE_SIZE;  [CE]  cannot  find  symbol  MIN_VALUE_SIZE  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MIN_VALUE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MIN_VALUE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE_SIZE	330	None	replace
3273	[BUG]  [BUGGY]  nextByte  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  nextByte  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  nextByte  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	nextByte  -=(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  bitsOut  :  Integer.MAXIMUM_CACHE_SIZE;	  return    bitsOut    -    1;    bitsOut    -=(byteOrder    ==    ByteOrder.LITTLE_ENDIAN)?    bitsOut    :    Integer.MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  nextByte	330	None	replace
3274	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  &  MASKS[1];  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  &  MASKS[1];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    bitsOut  &  MASKS[1];	  	non-compiled	[CE]  not  a  statement	27	None	add
3275	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[2];  [CE]  cannot  find  symbol  bytesCached  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MASKS[2];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	27	None	add
3276	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[2];  [CE]  cannot  find  symbol  bytesCached  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  MASKS[1];  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[2];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    &    MASKS[1];    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MASKS[2];	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	27	None	add
3277	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE  +  1));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCached  >  MAXIMUM_CACHE_SIZE  +  1));	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
3278	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1));  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bitsCachedSize  >  MAXIMUM_CACHE_SIZE  +  1));	  return    bitsOut    <    <    4?    bitsOut    :(bytesCached    >    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
3279	[BUG]  [BUGGY]  int  count  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	235	None	replace
3280	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE  -  1);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	235	None	replace
3281	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MISSING_MASKS_SIZE);  [CE]  cannot  find  symbol  MISSING_MASKS_SIZE  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MISSING_MASKS_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MISSING_MASKS_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MISSING_MASKS_SIZE	235	None	replace
3282	[BUG]  [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MISSING_CACHE_SIZE);  [CE]  cannot  find  symbol  MISSING_CACHE_SIZE  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MISSING_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  =  readBits(MAXIMUM_CACHE_SIZE,  MISSING_CACHE_SIZE);	  return    bitsOut    &    MASKS[count];    bitsOut    =    readBits(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  MISSING_CACHE_SIZE	235	None	replace
3283	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  [CE]  incomparable  types:  long  and  <null>  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  incomparable  types:  long  and  <null>	114	None	replace
3284	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  else  {  bitsOut  =  in.readInt();  }  [CE]  incomparable  types:  long  and  <null>  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  else  {  bitsOut  =  in.readInt();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(bytes,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  }  else  {  bitsOut  =  in.readInt();  }	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  incomparable  types:  long  and  <null>	114	None	replace
3285	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  =  in.readInt();  }  [CE]  incomparable  types:  long  and  <null>  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  =  in.readInt();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  this.bitsCachedSize;  InputStream  in  =  readInt(MAXIMUM_CACHE_SIZE,  bitsOut);  bitsOut  =  in.readInt();  }	  return    this.bitsCachedSize;    InputStream    in    =    readInt(bytes,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  incomparable  types:  long  and  <null>	114	None	replace
3286	[BUG]  [BUGGY]  return  in.toByteArray(MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  in.toByteArray(MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  in.toByteArray(MAXIMUM_CACHE_SIZE);	  return    bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
3287	[BUG]  [BUGGY]  return  bitsOut.toByteArray(Math.max(MAXIMUM_CACHE_SIZE),  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  max(int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut.toByteArray(Math.max(MAXIMUM_CACHE_SIZE),  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray(Math.max(MAXIMUM_CACHE_SIZE),  MAXIMUM_CACHE_SIZE);	  return    bitsOut.toByteArray(MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  max(int)	191	None	replace
3288	[BUG]  [BUGGY]  bitsOut  -=  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(long,int)  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  in.read(bitsOut,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  no  suitable  method  found  for  read(long,int)	211	None	replace
3289	[BUG]  [BUGGY]  bitsOut  -=  in.read(buffer,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  buffer  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  -=  in.read(buffer,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  -=  in.read(buffer,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    -    1;    in.read(bitsOut,    MAXIMUM_CACHE_SIZE);    bitsOut    -=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  cannot  find  symbol  buffer	211	None	replace
3290	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  ==  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
3291	[BUG]  [BUGGY]  return(bitsOut  ==  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  ==  0)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    ==    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	188	12	replace
3292	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =  readByte(byteOrder,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
3293	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
3294	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
3295	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    InputStream  in  =  readInt(bitsCached,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
3296	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =  readByte(bytes,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  bytes  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  bitsOut  =  readByte(bytes,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    bitsOut  =  readByte(bytes,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  cannot  find  symbol  bytes	25	None	add
3297	[BUG]  [BUGGY]  return  bitsOut  -  MASKS[count];  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  -  MASKS[count];  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return    bitsOut    -    MASKS[count];    InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	25	None	add
3298	[BUG]  [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  in;  }  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  in;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  MAXIMUM_CACHE_SIZE)  {  return  in;  }	  return    this.bitsCachedSize;    InputStream    in    =    new    InputStreamReader(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	294	None	replace
3299	[BUG]  [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  in;  }  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  in;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut!=  MAXIMUM_CACHE_SIZE)  {  return  in;  }	  return    this.bitsCachedSize;    InputStream    in    =    new    InputStreamReader(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	294	None	replace
3300	[BUG]  [BUGGY]  if(bitsOut  >=  MAXIMUM_CACHE_SIZE)  {  return  in;  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  >=  MAXIMUM_CACHE_SIZE)  {  return  in;  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  >=  MAXIMUM_CACHE_SIZE)  {  return  in;  }	  return    this.bitsCachedSize;    InputStream    in    =    new    InputStreamReader(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  incompatible  types	294	None	replace
3301	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  new  InputStreamReader(this,  MAXIMUM_CACHE_SIZE  +  1);	  return    this.bitsCachedSize;    InputStream    in    =    new    InputStreamReader(this,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	294	None	replace
3302	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  bitsOut  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  bitsOut  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	2	replace
3303	[BUG]  [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  bitsOut  :  bitsOut;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  bitsOut  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  MAXIMUM_CACHE_SIZE)?  bitsOut  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	2	replace
3304	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	2	replace
3305	[BUG]  [BUGGY]  return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  bitsOut;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  ==  this.bitsCachedSize)?  this.bitsCachedSize  :  bitsOut;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	2	replace
3306	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  this.bitsCachedSize)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(bitsOut  >=  this.bitsCachedSize)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	3	replace
3307	[BUG]  [BUGGY]  return(bitsOut  >=  this.bitsCachedSize)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  this.bitsCachedSize)?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut  >=  this.bitsCachedSize)?  bitsOut  :  MAXIMUM_CACHE_SIZE;	  return(bitsOut    >=    MAXIMUM_CACHE_SIZE)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	290	3	replace
3308	[BUG]  [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(2,  MAXIMUM_CACHE_SIZE);  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(2,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(2,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  unreachable  statement	275	None	replace
3309	[BUG]  [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	bitsOut  &  Math.max(0,  MAXIMUM_CACHE_SIZE);  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  not  a  statement	244	None	replace
3310	[BUG]  [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  else  {  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  else  {  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  else  {  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol	308	None	replace
3311	[BUG]  [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol	308	None	replace
3312	[BUG]  [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  else  {  bitsOut  =  in.readInt();  }  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  else  {  bitsOut  =  in.readInt();  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  else  {  bitsOut  =  in.readInt();  }	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol	308	None	replace
3313	[BUG]  [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  else  {  bitsOut  =  readByteInputStream(byteOrder.LITTLE_ENDIAN);  }  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  else  {  bitsOut  =  readByteInputStream(byteOrder.LITTLE_ENDIAN);  }  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  else  {  bitsOut  =  readByteInputStream(byteOrder.LITTLE_ENDIAN);  }	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  cannot  find  symbol	308	None	replace
3314	[BUG]  [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  else  {  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  else  {  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  bitsOut)  {  return  bitsOut  &  MASKS[count];  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN);  }  else  {  bitsOut  =  readByte(byteOrder.LITTLE_ENDIAN	  return    bitsOut    &    MASKS[count];    bitsOut    =    readByte(byteOrder.LITTLE_ENDIAN);    	non-compiled	[CE]  ')'  expected	308	None	replace
3315	[BUG]  [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized  [FE]        AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  Integer  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	Integer  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  variable  MAXIMUM_CACHE_SIZE  might  not  have  been  initialized	271	None	replace
3316	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIM  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIM  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIM	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	271	None	replace
3317	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MA  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MA  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MA	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	271	None	replace
3318	[BUG]  [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	if(bitsOut  ==  null)  {  return  bitsOut  &  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  int  MAXIMUM_CACHE_SIZE  =  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    int    MAXIMUM_CACHE_SIZE    =    Math.max(MAXIMUM_CACHE_SIZE,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	271	None	replace
3319	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCached,  bytesOut);  [CE]  cannot  find  symbol  bytesCached  [FE]                      AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  InputStream  in  =  readBits(bytesCached,  bytesOut);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	InputStream  in  =  readBits(bytesCached,  bytesOut);	  return    bitsOut    &    Math.max(bitsCachedSize,    MAXIMUM_CACHE_SIZE)+    1;    InputStream    in    =    readBits(bytesCached,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol  bytesCached	8	None	replace
3320	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >=  0)?  bitsOut  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return(this.bitsCachedSize  >=  0)?  bitsOut  :  bitsOut;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	292	2	replace
3321	[BUG]  [BUGGY]  return(this.bitsCachedSize  >=  0)?  bitsOut  :  bitsOut;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(this.bitsCachedSize  >=  0)?  bitsOut  :  bitsOut;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(this.bitsCachedSize  >=  0)?  bitsOut  :  bitsOut;	  return(bitsOut    >=    0)?    this.bitsCachedSize    :    bitsOut;    	compilable	  [FE]  AssertionError  	292	2	replace
3322	[BUG]  [BUGGY]  return  InputStream.read(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  no  suitable  method  found  for  read(ByteOrder,int)  [FE]                  AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return  InputStream.read(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  InputStream.read(byteOrder,  MAXIMUM_CACHE_SIZE);	  return    bitsOut.read(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  no  suitable  method  found  for  read(ByteOrder,int)	228	None	replace
3323	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(byteOrder  ==  ByteOrder.LITTLE_ENDIAN)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	140	None	add
3324	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  unreachable  statement	140	None	add
3325	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bitsCached  >=  (bytesCachedSize  -  count))  &  MASKS[count];	  	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	140	None	add
3326	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]          AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >>  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	140	None	add
3327	[BUG]  [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [CE]  cannot  find  symbol  bytesCached  [FE]            AssertionError    [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  return(bitsOut  >=  0)?  this.bitsCachedSize  :  MAXIMUM_CACHE_SIZE;  bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return(bitsOut    >=    0)?    this.bitsCachedSize    :    MAXIMUM_CACHE_SIZE;    bitsOut  =(bytesCached  >=  (bitsCachedSize  -  count))  &  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  cannot  find  symbol  bytesCached	140	None	add
3328	[BUG]  [BUGGY]  int  count  =  bitsOut.length  &  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [CE]  variable  count  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;      [BUGGY]  int  count  =  bitsOut.length  &  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];  [BUGGY]      }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	int  count  =  bitsOut.length  &  MASKS[count];  bitsOut  =(byteOrder  >>  ByteOrder.LITTLE_ENDIAN)&  MASKS[count];	  return    bitsOut    &    MASKS[count];    bitsOut    =(byteOrder    >>    ByteOrder.LITTLE_ENDIAN)&    MASKS[count];    	non-compiled	[CE]  variable  count  is  already  defined  in  method  readBits(int)	238	None	replace
