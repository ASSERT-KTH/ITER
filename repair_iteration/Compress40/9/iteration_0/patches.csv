bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  *  MAXIMUM_CACHE_SIZE;	return  bitsOut;  	compilable	  [FE]  AssertionError  	17	12	replace
2	[BUG]  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  *  MAXIMUM_CACHE_SIZE;  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  *  MAXIMUM_CACHE_SIZE;	return  bitsOut;  	compilable	  [FE]  AssertionError  	17	12	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  -  1;  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  -  1;	return  bitsOut;  	compilable	  [FE]  AssertionError  	17	12	replace
4	[BUG]  [BUGGY]  return  bitsOut  -  1;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  -  1;  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  -  1;	return  bitsOut;  	compilable	  [FE]  AssertionError  	17	12	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  this.bitsCachedSize;  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  this.bitsCachedSize;	return  bitsOut;  	compilable	  [FE]  AssertionError  	17	12	replace
6	[BUG]  [BUGGY]  return  this.bitsCachedSize;  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  this.bitsCachedSize;  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  this.bitsCachedSize;	return  bitsOut;  	compilable	  [FE]  AssertionError  	17	12	replace
7	[BUG]  [BUGGY]  return  bitsOut  &  MASKS_SIZE;  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]          AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  &  MASKS_SIZE;  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS_SIZE;	return  bitsOut;  	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	17	None	replace
8	[BUG]  [BUGGY]  return  bitsOut.length;  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut.length;  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.length;	return  bitsOut;  	non-compiled	[CE]  long  cannot  be  dereferenced	17	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  &  MASKS[count];  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  MASKS[count];	return  bitsOut;  	compilable	  [FE]  AssertionError  	17	2	replace
10	[BUG]  [BUGGY]  return  bitsOut  &  MASKS[count];  [FE]  AssertionError  [FE]              AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  &  MASKS[count];  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  MASKS[count];	return  bitsOut;  	compilable	  [FE]  AssertionError  	17	2	replace
11	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]                AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]    [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	  	return  bitsOut;  	non-compiled	[CE]  missing  return  statement	17	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	return  bitsOut;  	compilable	  [FE]  AssertionError  	17	11	replace
13	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	return  bitsOut;  	compilable	  [FE]  AssertionError  	17	11	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	add	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	return  bitsOut;  	compilable	  [FE]  AssertionError  	17	12	replace
15	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE)+  1;	return  bitsOut;  	compilable	  [FE]  AssertionError  	17	12	replace
16	[BUG]  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]        AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  &  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	return  bitsOut;  	non-compiled	[CE]  ';'  expected	17	None	replace
17	[BUG]  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]          AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.read(ByteOrder.BYTE_SIZE,  MAXIMUM_CACHE_SIZE);	return  bitsOut;  	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	17	None	replace
18	[BUG]  [BUGGY]  return  bitsOut  <  <  4  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  <  <  4  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE;	return  bitsOut;  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
19	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :  MAXIMUM_CACHE_SIZE;	return  bitsOut;  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
20	[BUG]  [BUGGY]  return  bitsOut.toByteArray();  [CE]  long  cannot  be  dereferenced  [FE]        AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut.toByteArray();  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut.toByteArray();	return  bitsOut;  	non-compiled	[CE]  long  cannot  be  dereferenced	17	None	replace
21	[BUG]  [BUGGY]  return  bitsOut  <  <  8?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  <  <  8?  bitsOut  :  MAXIMUM_CACHE_SIZE;  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  8?  bitsOut  :  MAXIMUM_CACHE_SIZE;	return  bitsOut;  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
22	[BUG]  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [BUGGY]  return  bitsOut  <  <  4?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);  [BUGGY]  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	108	108	2	replace	return  bitsOut  <  <  4?  bitsOut  :(bytesCached  >  MAXIMUM_CACHE_SIZE);	return  bitsOut;  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
