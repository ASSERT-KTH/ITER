bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
2	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	18	None	replace
3	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	18	None	replace
4	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	18	None	replace
5	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	18	None	replace
6	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	18	None	replace
7	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	78	None	replace
8	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	78	None	replace
9	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	78	None	replace
10	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	78	None	replace
11	[BUG]  [BUGGY]  if(bytesCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	44	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder!=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	40	11	replace
13	[BUG]  [BUGGY]  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder!=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	40	11	replace
14	[BUG]  [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if    (bitsCachedSize    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	54	None	replace
15	[BUG]  [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {  [CE]  cannot  find  symbol  DEFAULT_BYTE_SIZE  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bitsCachedSize  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {	  if    (bitsCachedSize    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_BYTE_SIZE	54	None	replace
16	[BUG]  [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_SECONDS)  {  [CE]  cannot  find  symbol  BYTE_SECONDS  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_SECONDS)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bitsCachedSize  ==  ByteOrder.BYTE_SECONDS)  {	  if    (bitsCachedSize    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SECONDS	54	None	replace
17	[BUG]  [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bitsCachedSize  ==  ByteOrder.MAXIMUM_CACHE_SIZE  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {	  if    (bitsCachedSize    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	54	None	replace
18	[BUG]  [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if    (bitsCachedSize    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	54	None	replace
19	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	25	None	replace
20	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	25	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  2)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  2)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	25	6	replace
22	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  2)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  2)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  2)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	25	6	replace
23	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
24	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	81	None	replace
25	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
26	[BUG]  [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	81	None	replace
27	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	81	None	replace
28	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  8)?  nextByte  :  MAXIMUM_CACHE_SIZE;	  bitsOut    |=(bytesCachedSize    <    <    8)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
29	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  nextByte  :  MASK_SIZE;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  nextByte  :  MASK_SIZE;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  8)?  nextByte  :  MASK_SIZE;	  bitsOut    |=(bytesCachedSize    <    <    8)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
30	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  nextByte  :  count;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  nextByte  :  count;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  8)?  nextByte  :  count;	  bitsOut    |=(bytesCachedSize    <    <    8)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
31	[BUG]  [BUGGY]  bitsOut  |=(bytesCachedSize  <  <  8)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(bytesCachedSize  <  <  8)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(bytesCachedSize  <  <  8)?  nextByte  :  MAXIMUM_CACHE_SIZE;	  bitsOut    |=(bytesCachedSize    <    <    8)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
32	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  bytesCachedSize  :  count;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  bytesCachedSize  :  count;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  8)?  bytesCachedSize  :  count;	  bitsOut    |=(bytesCachedSize    <    <    8)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
33	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  nextByte  :  MAK_SIZE;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  nextByte  :  MAK_SIZE;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  8)?  nextByte  :  MAK_SIZE;	  bitsOut    |=(bytesCachedSize    <    <    8)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
34	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	12	None	replace
35	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  SIZE  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	12	None	replace
36	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	12	None	replace
37	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.SECOND  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  SECOND  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.SECOND  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.SECOND  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND	12	None	replace
38	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.FIELD_NAME)  {	  if(nextByte    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	12	None	replace
39	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	12	None	replace
40	[BUG]  [BUGGY]  if(number  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  number  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(number  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(number  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCount    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  number	63	None	replace
41	[BUG]  [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder    >>    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	60	None	replace
42	[BUG]  [BUGGY]  if(bytesCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder    >>    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	60	None	replace
43	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.SIZE)  {  [CE]  cannot  find  symbol  SIZE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.SIZE)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	9	None	replace
44	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_SIZE)  {  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.FIELD_SIZE)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	9	None	replace
45	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.SECOND_BYTE)  {  [CE]  cannot  find  symbol  SECOND_BYTE  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.SECOND_BYTE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.SECOND_BYTE)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND_BYTE	9	None	replace
46	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.NAME)  {  [CE]  cannot  find  symbol  NAME  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.NAME)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.NAME)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  NAME	9	None	replace
47	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.UTF8)  {  [CE]  cannot  find  symbol  UTF8  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.UTF8)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.UTF8)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  UTF8	9	None	replace
48	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIRST_BITS)  {  [CE]  cannot  find  symbol  FIRST_BITS  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.FIRST_BITS)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.FIRST_BITS)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST_BITS	9	None	replace
49	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  1)?  nextByte  :  MAXIMUM_CACHE_SIZE;	  bitsOut    |=(bytesCachedSize    <    <    1)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
50	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  nextByte  :  count;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  nextByte  :  count;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  1)?  nextByte  :  count;	  bitsOut    |=(bytesCachedSize    <    <    1)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
51	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  nextByte  :  MASK_SIZE;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  nextByte  :  MASK_SIZE;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  1)?  nextByte  :  MASK_SIZE;	  bitsOut    |=(bytesCachedSize    <    <    1)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
52	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  bytesCachedSize  :  count;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  bytesCachedSize  :  count;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  1)?  bytesCachedSize  :  count;	  bitsOut    |=(bytesCachedSize    <    <    1)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
53	[BUG]  [BUGGY]  bitsOut  |=(bytesCachedSize  <  <  1)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(bytesCachedSize  <  <  1)?  nextByte  :  MAXIMUM_CACHE_SIZE;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(bytesCachedSize  <  <  1)?  nextByte  :  MAXIMUM_CACHE_SIZE;	  bitsOut    |=(bytesCachedSize    <    <    1)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
54	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_SIZE    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	11	None	replace
55	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.BYTE_SIZE  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.BYTE_SIZE  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.BYTE_SIZE  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_SIZE    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	11	None	replace
56	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  byteOrder  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  byteOrder  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  byteOrder  ==  ByteOrder.BYTE_SIZE)  {	  if(byteOrder    ==    ByteOrder.BYTE_SIZE    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	11	None	replace
57	[BUG]  [BUGGY]  if(bytesCachedSize  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  0  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder    >>    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	43	None	replace
58	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
59	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
60	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
61	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
62	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	2	None	replace
63	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	29	None	replace
64	[BUG]  [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	29	None	replace
65	[BUG]  [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	29	None	replace
66	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	29	None	replace
67	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    counts    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	28	None	replace
68	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    counts    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	28	None	replace
69	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    counts    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	28	None	replace
70	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    counts    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	28	None	replace
71	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    counts    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	28	None	replace
72	[BUG]  [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	replace
73	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	5	None	replace
74	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	5	None	replace
75	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsOut)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsOut)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsOut)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    nextByte)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	82	None	replace
76	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsCachedSize)  {  [CE]  cannot  find  symbol  bitsOut  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsCachedSize)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    nextByte)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	82	None	replace
77	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  nextByte)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  nextByte)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  nextByte)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    nextByte)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	82	None	replace
78	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    nextByte)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	82	None	replace
79	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  nextByte)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  nextByte)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  nextByte)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    nextByte)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	82	None	replace
80	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsOut)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsOut)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsOut)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    nextByte)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	82	None	replace
81	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	23	None	replace
82	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	23	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	23	6	replace
84	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	23	6	replace
85	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
86	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
87	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	31	None	add
88	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
89	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
90	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
91	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	3	None	replace
92	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	3	None	replace
93	[BUG]  [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	3	None	replace
94	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	36	None	replace
95	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	36	None	replace
96	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	36	None	replace
97	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
98	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	73	None	replace
99	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  count))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  count))  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  count))  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	73	None	replace
100	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  nextByte))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  nextByte))  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  nextByte))  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	73	None	replace
101	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	73	None	replace
102	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	73	None	replace
103	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	73	None	replace
104	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	75	None	replace
105	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	75	None	replace
106	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	75	None	replace
107	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  >  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  >  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  >  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	75	None	replace
108	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	74	None	replace
109	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	74	None	replace
110	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	74	None	replace
111	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	74	None	replace
112	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	74	None	replace
113	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	74	None	replace
114	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	add
115	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	add
116	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	24	None	add
117	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	add
118	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	add
119	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  [BUGGY]  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  [BUGGY]  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  [BUGGY]  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	24	None	add
120	[BUG]  [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	55	None	replace
121	[BUG]  [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	55	None	replace
122	[BUG]  [BUGGY]  if  (bytesCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (bytesCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bytesCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	55	None	replace
123	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByte.length);  [CE]  'else'  without  'if'  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByte.length);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  0,  nextByte.length);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
124	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  1);  [CE]  'else'  without  'if'  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  0,  count  -  1);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
125	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByteSize);  [CE]  'else'  without  'if'  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByteSize);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  0,  nextByteSize);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
126	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  +  1);  [CE]  'else'  without  'if'  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  +  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  0,  count  +  1);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
127	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByte);  [CE]  'else'  without  'if'  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  0,  nextByte);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
128	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByte.bitsCachedSize);  [CE]  'else'  without  'if'  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByte.bitsCachedSize);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  0,  nextByte.bitsCachedSize);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
129	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  1,  nextByte);  [CE]  'else'  without  'if'  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  1,  nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  0,  count  -  1,  nextByte);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
130	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	76	None	replace
131	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.FIELD_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.FIELD_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.FIELD_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	76	None	replace
132	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	76	None	replace
133	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	76	None	replace
134	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  SIZE  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	76	None	replace
135	[BUG]  [BUGGY]  bitsOut  =  nextByte.read();  [CE]  'else'  without  'if'  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  nextByte.read();  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  nextByte.read();	  bitsOut    =    in.read();    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
136	[BUG]  [BUGGY]  bitsOut  =  in.read(nextByte,  count);  [CE]  'else'  without  'if'  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.read(nextByte,  count);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read(nextByte,  count);	  bitsOut    =    in.read();    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
137	[BUG]  [BUGGY]  bitsOut  =  in.readBits(nextByte,  count);  [CE]  'else'  without  'if'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.readBits(nextByte,  count);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.readBits(nextByte,  count);	  bitsOut    =    in.read();    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
138	[BUG]  [BUGGY]  bitsOut  =  in.readInt();  [CE]  'else'  without  'if'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.readInt();  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.readInt();	  bitsOut    =    in.read();    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
139	[BUG]  [BUGGY]  bitsOut  =  readInt(nextByte);  [CE]  'else'  without  'if'  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readInt(nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readInt(nextByte);	  bitsOut    =    readShort(nextByte);    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
140	[BUG]  [BUGGY]  bitsOut  =  readShort(nextByte,  count);  [CE]  'else'  without  'if'  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readShort(nextByte,  count);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readShort(nextByte,  count);	  bitsOut    =    readShort(nextByte);    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
141	[BUG]  [BUGGY]  bitsOut  =  readByte(nextByte);  [CE]  'else'  without  'if'  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readByte(nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readByte(nextByte);	  bitsOut    =    readShort(nextByte);    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
142	[BUG]  [BUGGY]  bitsOut  =  readShort(nextByte  +  1);  [CE]  'else'  without  'if'  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readShort(nextByte  +  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readShort(nextByte  +  1);	  bitsOut    =    readShort(nextByte);    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
143	[BUG]  [BUGGY]  bitsOut  =  readUnsignedByte(nextByte);  [CE]  'else'  without  'if'  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readUnsignedByte(nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readUnsignedByte(nextByte);	  bitsOut    =    readShort(nextByte);    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
144	[BUG]  [BUGGY]  bitsOut  =  readLong(nextByte);  [CE]  'else'  without  'if'  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readLong(nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readLong(nextByte);	  bitsOut    =    readShort(nextByte);    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
145	[BUG]  [BUGGY]  bitsOut  =  readFully(nextByte);  [CE]  'else'  without  'if'  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readFully(nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readFully(nextByte);	  bitsOut    =    readShort(nextByte);    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
146	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    byteOrder    ==    ByteOrder.BYTE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	17	None	replace
147	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_SIZE  ||  byteOrder  ==  ByteOrder.BYTE_ENDIAN)  {  [CE]  cannot  find  symbol  LITTLE_SIZE  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_SIZE  ||  byteOrder  ==  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_SIZE  ||  byteOrder  ==  ByteOrder.BYTE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    byteOrder    ==    ByteOrder.BYTE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  LITTLE_SIZE	17	None	replace
148	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_ENDIAN)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    byteOrder    ==    ByteOrder.BYTE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	17	None	replace
149	[BUG]  [BUGGY]  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    byteOrder    ==    ByteOrder.BYTE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	17	None	replace
150	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	16	None	replace
151	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.NUMBER  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.NUMBER  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.NUMBER  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER	16	None	replace
152	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.FIELD_NAME)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	16	None	replace
153	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE	16	None	replace
154	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	34	None	replace
155	[BUG]  [BUGGY]  if  (nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if    (nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	52	None	replace
156	[BUG]  [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if    (nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	52	None	replace
157	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	13	None	replace
158	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	13	None	replace
159	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_END)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	80	None	replace
160	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_END)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_END)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_END)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_END)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	80	None	replace
161	[BUG]  [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_END)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	80	None	replace
162	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_END)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	80	None	replace
163	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  ByteOrder.BYTE_END)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  ByteOrder.BYTE_END)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  ByteOrder.BYTE_END)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_END)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	80	None	replace
164	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_END)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_END)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  ByteOrder.BYTE_END)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_END)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	80	None	replace
165	[BUG]  [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	4	None	replace
166	[BUG]  [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	4	None	replace
167	[BUG]  [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count!=  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	4	None	replace
168	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	30	None	replace
169	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	30	None	replace
170	[BUG]  [BUGGY]  bitsOut.read(nextByte,  count);  [CE]  'else'  without  'if'  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.read(nextByte,  count);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.read(nextByte,  count);	  bitsOut.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
171	[BUG]  [BUGGY]  bitsOut.close();  [CE]  'else'  without  'if'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.close();  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.close();	  bitsOut.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
172	[BUG]  [BUGGY]  bitsOut.read(nextByte,  0,  nextByte);  [CE]  'else'  without  'if'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.read(nextByte,  0,  nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.read(nextByte,  0,  nextByte);	  bitsOut.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
173	[BUG]  [BUGGY]  bitsOut.readFully(nextByte);  [CE]  'else'  without  'if'  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.readFully(nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.readFully(nextByte);	  bitsOut.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
174	[BUG]  [BUGGY]  bitsOut.write(nextByte,  count);  [CE]  'else'  without  'if'  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.write(nextByte,  count);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.write(nextByte,  count);	  bitsOut.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
175	[BUG]  [BUGGY]  bitsOut.read(nextByte,  0,  nextByte.length);  [CE]  'else'  without  'if'  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.read(nextByte,  0,  nextByte.length);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.read(nextByte,  0,  nextByte.length);	  bitsOut.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
176	[BUG]  [BUGGY]  bitsOut.defaultReadBits(nextByte);  [CE]  'else'  without  'if'  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.defaultReadBits(nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.defaultReadBits(nextByte);	  bitsOut.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
177	[BUG]  [BUGGY]  if(byteOrder.length  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  length  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder.length  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder.length  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(numbersCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  length	1	None	replace
178	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
179	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
180	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
181	[BUG]  [BUGGY]  If(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
182	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
183	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
184	[BUG]  [BUGGY]  bitsOut  =  readShortBits(nextByte,  count);  [CE]  'else'  without  'if'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readShortBits(nextByte,  count);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readShortBits(nextByte,  count);	  bitsOut    =    readShortBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
185	[BUG]  [BUGGY]  bitsOut  =  readIntBits(nextByte);  [CE]  'else'  without  'if'  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readIntBits(nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readIntBits(nextByte);	  bitsOut    =    readShortBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
186	[BUG]  [BUGGY]  bitsOut  =  readShortBits(nextByte  +  1);  [CE]  'else'  without  'if'  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readShortBits(nextByte  +  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readShortBits(nextByte  +  1);	  bitsOut    =    readShortBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
187	[BUG]  [BUGGY]  bitsOut  =  readLongBits(nextByte);  [CE]  'else'  without  'if'  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readLongBits(nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readLongBits(nextByte);	  bitsOut    =    readShortBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
188	[BUG]  [BUGGY]  bitsOut  =  readEndBits(nextByte);  [CE]  'else'  without  'if'  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readEndBits(nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readEndBits(nextByte);	  bitsOut    =    readShortBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
189	[BUG]  [BUGGY]  bitsOut  =  readShortBits(nextByte  -  1);  [CE]  'else'  without  'if'  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readShortBits(nextByte  -  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readShortBits(nextByte  -  1);	  bitsOut    =    readShortBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
190	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	14	None	replace
191	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	14	None	replace
192	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  SIZE  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	14	None	replace
193	[BUG]  [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	70	None	replace
194	[BUG]  [BUGGY]  if  (count  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (count  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (count  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	70	None	replace
195	[BUG]  [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	70	None	replace
196	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.NUMBER_INT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.NUMBER_INT    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	72	None	replace
197	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.NUMBER_SIZE  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_SIZE  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.NUMBER_SIZE  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.NUMBER_SIZE  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.NUMBER_INT    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_SIZE	72	None	replace
198	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  byteOrder  ==  ByteOrder.NUMBER_INT)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  byteOrder  ==  ByteOrder.NUMBER_INT)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  byteOrder  ==  ByteOrder.NUMBER_INT)  {	  if(byteOrder    ==    ByteOrder.NUMBER_INT    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	72	None	replace
199	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.SECOND  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  SECOND  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.SECOND  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.SECOND  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.NUMBER_INT    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND	72	None	replace
200	[BUG]  [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
201	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.NAME)  {  [CE]  cannot  find  symbol  NAME  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.NAME)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.NAME)  {	  if(bitsCachedSize    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  NAME	62	None	replace
202	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIRST_BYTE)  {  [CE]  cannot  find  symbol  FIRST_BYTE  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIRST_BYTE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.FIRST_BYTE)  {	  if(bitsCachedSize    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST_BYTE	62	None	replace
203	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BIG_SIZE)  {  [CE]  cannot  find  symbol  BIG_SIZE  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BIG_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BIG_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  BIG_SIZE	62	None	replace
204	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	27	None	replace
205	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	27	None	replace
206	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	27	None	replace
207	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	add
208	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	add
209	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >>  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >>  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >>  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	add
210	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	add
211	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
212	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [Delete]  bitsCachedSize)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [Delete]  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [Delete]  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	35	None	add
213	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	add
214	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
215	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	32	None	replace
216	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	32	None	replace
217	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	32	7	replace
218	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	32	7	replace
219	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.MIN_VALUE)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (byteOrder  ==  ByteOrder.MIN_VALUE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.MIN_VALUE)  {	  if    (byteOrder    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	53	None	replace
220	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {  [CE]  cannot  find  symbol  DEFAULT_BYTE_SIZE  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (byteOrder  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_BYTE_SIZE	53	None	replace
221	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	83	None	replace
222	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  bitsCachedSize)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	83	None	replace
223	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  >  nextByte)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  >  nextByte)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  >  nextByte)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	83	None	replace
224	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  bitsCachedSize)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	83	None	replace
225	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  >  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  >  bitsCachedSize)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	83	None	replace
226	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  nextByte)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  nextByte)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  nextByte)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	83	None	replace
227	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
228	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
229	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder!=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	57	11	replace
230	[BUG]  [BUGGY]  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder!=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	57	11	replace
231	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
232	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
233	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >>  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >>  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >>  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
234	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    bitsCachedSize)    {    if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
235	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    bitsCachedSize)    {    If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
236	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    bitsCachedSize)    {    if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
237	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [Delete]  bitsCachedSize)  {  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [Delete]  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [Delete]  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	37	None	add
238	[BUG]  [BUGGY]  bitsOut  =  new  long[nextByte];  [CE]  'else'  without  'if'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  new  long[nextByte];  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  new  long[nextByte];	  bitsOut    =    new    long[bitsCachedSize];    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
239	[BUG]  [BUGGY]  bitsOut  =  new  long[bitsCachedSize  +  1];  [CE]  'else'  without  'if'  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  new  long[bitsCachedSize  +  1];  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  new  long[bitsCachedSize  +  1];	  bitsOut    =    new    long[bitsCachedSize];    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
240	[BUG]  [BUGGY]  bitsOut  =  new  long[bitsCachedSize  -  1];  [CE]  'else'  without  'if'  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  new  long[bitsCachedSize  -  1];  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  new  long[bitsCachedSize  -  1];	  bitsOut    =    new    long[bitsCachedSize];    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
241	[BUG]  [BUGGY]  bitsOut  =  new  long[bitsCachedSize  +  count];  [CE]  'else'  without  'if'  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  new  long[bitsCachedSize  +  count];  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  new  long[bitsCachedSize  +  count];	  bitsOut    =    new    long[bitsCachedSize];    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
242	[BUG]  [BUGGY]  bitsOut  =  new  long[bytesCachedSize];  [CE]  'else'  without  'if'  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  new  long[bytesCachedSize];  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  new  long[bytesCachedSize];	  bitsOut    =    new    long[bitsCachedSize];    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
243	[BUG]  [BUGGY]  bitsOut  =  new  int[bitsCachedSize];  [CE]  'else'  without  'if'  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  new  int[bitsCachedSize];	  bitsOut    =    new    long[bitsCachedSize];    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
244	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	add
245	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >>  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >>  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >>  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	add
246	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	add
247	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	add
248	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	22	None	add
249	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [Delete]  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [Delete]  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [Delete]  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	22	None	add
250	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [BUGGY]  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [BUGGY]  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [BUGGY]  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	22	None	add
251	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	38	None	replace
252	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	38	None	replace
253	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	38	2	replace
254	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsCachedSize)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	38	2	replace
255	[BUG]  [BUGGY]  bitsOut  =  in.read(nextByte,  0,  nextByte);  [CE]  'else'  without  'if'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.read(nextByte,  0,  nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read(nextByte,  0,  nextByte);	  bitsOut    =    in.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
256	[BUG]  [BUGGY]  bitsOut  =  in.read(nextByte  +  1);  [CE]  'else'  without  'if'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.read(nextByte  +  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read(nextByte  +  1);	  bitsOut    =    in.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
257	[BUG]  [BUGGY]  bitsOut  =  in.read(nextByte,  0,  count);  [CE]  'else'  without  'if'  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.read(nextByte,  0,  count);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read(nextByte,  0,  count);	  bitsOut    =    in.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
258	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  byteOrder  ==  ByteOrder.SIZE)  {  [CE]  cannot  find  symbol  SIZE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  byteOrder  ==  ByteOrder.SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  byteOrder  ==  ByteOrder.SIZE)  {	  if(byteOrder    ==    ByteOrder.SIZE    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	15	None	replace
259	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {  [CE]  cannot  find  symbol  SIZE  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.SIZE)  {	  if(byteOrder    ==    ByteOrder.SIZE    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	15	None	replace
260	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  SIZE  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.SIZE    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	15	None	replace
261	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.MINUS  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  MINUS  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.MINUS  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.MINUS  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.SIZE    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  MINUS	15	None	replace
262	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	21	None	replace
263	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  count  +  1);  [CE]  'else'  without  'if'  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  count  +  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  count  +  1);	  bitsOut    =    readBits(nextByte,    count);    	non-compiled	[CE]  'else'  without  'if'	46	None	replace
264	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  count  -  1);  [CE]  'else'  without  'if'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  count  -  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  count  -  1);	  bitsOut    =    readBits(nextByte,    count);    	non-compiled	[CE]  'else'  without  'if'	46	None	replace
265	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  'else'  without  'if'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte,    count);    	non-compiled	[CE]  'else'  without  'if'	46	None	replace
266	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  nextByte);  [CE]  'else'  without  'if'  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  nextByte);	  bitsOut    =    readBits(nextByte,    count);    	non-compiled	[CE]  'else'  without  'if'	46	None	replace
267	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  1);  [CE]  'else'  without  'if'  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  1);	  bitsOut    =    readBits(nextByte,    count);    	non-compiled	[CE]  'else'  without  'if'	46	None	replace
268	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS);  [CE]  'else'  without  'if'  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  MASKS);	  bitsOut    =    readBits(nextByte,    count);    	non-compiled	[CE]  'else'  without  'if'	46	None	replace
269	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.BYTE_SIZE)  {	  if(nextByte    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	7	None	replace
270	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	7	None	replace
271	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	7	None	replace
272	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.BIGINT_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.BIGINT_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.BIGINT_SIZE)  {	  if(nextByte    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	7	None	replace
273	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.BYTE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.BYTE_ENDIAN)  {	  if(nextByte    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	7	None	replace
274	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
275	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
276	[BUG]  [BUGGY]  If(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
277	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  <  bitsCachedSize)  {  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  <  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  >  expected	58	None	replace
278	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
279	[BUG]  [BUGGY]  if(numbersCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  numbersCachedSize  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(numbersCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(numbersCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  numbersCachedSize	86	None	replace
280	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  1);  [CE]  'else'  without  'if'  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte  +  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte  +  1);	  bitsOut    =    readBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	45	None	replace
281	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  -  1);  [CE]  'else'  without  'if'  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte  -  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte  -  1);	  bitsOut    =    readBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	45	None	replace
282	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0);  [CE]  'else'  without  'if'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  0);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  0);	  bitsOut    =    readBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	45	None	replace
283	[BUG]  [BUGGY]  bitsOut.write(nextByte,  0,  nextByte.length);  [CE]  'else'  without  'if'  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.write(nextByte,  0,  nextByte.length);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.write(nextByte,  0,  nextByte.length);	  bitsOut.write(nextByte);    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
284	[BUG]  [BUGGY]  bitsOut.write(nextByte  +  1);  [CE]  'else'  without  'if'  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.write(nextByte  +  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.write(nextByte  +  1);	  bitsOut.write(nextByte);    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
285	[BUG]  [BUGGY]  bitsOut.write(nextByte,  0,  nextByte);  [CE]  'else'  without  'if'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.write(nextByte,  0,  nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.write(nextByte,  0,  nextByte);	  bitsOut.write(nextByte);    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
286	[BUG]  [BUGGY]  bitsOut.write(nextByte,  0,  count);  [CE]  'else'  without  'if'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.write(nextByte,  0,  count);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.write(nextByte,  0,  count);	  bitsOut.write(nextByte);    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
287	[BUG]  [BUGGY]  bitsOut.write(nextByte  +  1,  nextByte);  [CE]  'else'  without  'if'  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.write(nextByte  +  1,  nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.write(nextByte  +  1,  nextByte);	  bitsOut.write(nextByte);    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
288	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    =    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
289	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    >    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	add
290	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    >    bitsCachedSize)    {    if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	add
291	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    >    bitsCachedSize)    {    If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	77	None	add
292	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    >    bitsCachedSize)    {    if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	add
293	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    >    bitsCachedSize)    {    if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	add
294	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	20	None	replace
295	[BUG]  [BUGGY]  if(numbersCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  numbersCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(numbersCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(numbersCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  numbersCachedSize	20	None	replace
296	[BUG]  [BUGGY]  if(numberByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  numberByte  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(numberByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(numberByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  numberByte	20	None	replace
297	[BUG]  [BUGGY]  if(currentByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  currentByte  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(currentByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(currentByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  currentByte	20	None	replace
298	[BUG]  [BUGGY]  bitsOut  =  in.readBits(nextByte  +  1);  [CE]  'else'  without  'if'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.readBits(nextByte  +  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.readBits(nextByte  +  1);	  bitsOut    =    in.readBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	47	None	replace
299	[BUG]  [BUGGY]  bitsOut  =  in.readBits(nextByte  -  1);  [CE]  'else'  without  'if'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.readBits(nextByte  -  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.readBits(nextByte  -  1);	  bitsOut    =    in.readBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	47	None	replace
300	[BUG]  [BUGGY]  bitsOut  =  in.readBits(nextByte,  0,  nextByte);  [CE]  'else'  without  'if'  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.readBits(nextByte,  0,  nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.readBits(nextByte,  0,  nextByte);	  bitsOut    =    in.readBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	47	None	replace
301	[BUG]  [BUGGY]  bitsOut  =  in.readBits(nextByte,  0,  count);  [CE]  'else'  without  'if'  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.readBits(nextByte,  0,  count);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.readBits(nextByte,  0,  count);	  bitsOut    =    in.readBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	47	None	replace
302	[BUG]  [BUGGY]  bitsOut  =  in.readBits(nextByte,  0);  [CE]  'else'  without  'if'  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.readBits(nextByte,  0);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.readBits(nextByte,  0);	  bitsOut    =    in.readBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	47	None	replace
303	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	71	None	replace
304	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.NUMBER_INTIAN  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_INTIAN  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.NUMBER_INTIAN  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.NUMBER_INTIAN  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INTIAN	71	None	replace
305	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_STATEMENT  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_STATEMENT  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_STATEMENT  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_STATEMENT  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_STATEMENT	71	None	replace
306	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.NUMBER_INT  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.NUMBER_INT  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.NUMBER_INT  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	71	None	replace
307	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FOR  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FOR  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.FOR  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	71	None	replace
308	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  bitsCachedSize  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  bitsCachedSize  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  bitsCachedSize  ==  ByteOrder.FIELD_NAME)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	71	None	replace
309	[BUG]  [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	69	None	replace
310	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
311	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	69	None	replace
312	[BUG]  [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	8	None	replace
313	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder    >=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
314	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  bitsCachedSize)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder    >=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	59	None	replace
315	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
316	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	73	None	replace
317	[BUG]  [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	73	None	replace
318	[BUG]  [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	73	None	replace
319	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	73	None	replace
320	[BUG]  [BUGGY]  if(byteOrder!=  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder!=  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder!=  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder!=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	40	None	replace
321	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_START  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_START  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_START  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.BYTE_START  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_START	12	None	replace
322	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	12	None	replace
323	[BUG]  [BUGGY]  bitsOut  =  readShort(nextByte  -  1);  [CE]  'else'  without  'if'  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readShort(nextByte  -  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readShort(nextByte  -  1);	  bitsOut    =    readShort(nextByte);    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
324	[BUG]  [BUGGY]  bitsOut  =  readShort(nextByte,  0);  [CE]  'else'  without  'if'  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readShort(nextByte,  0);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readShort(nextByte,  0);	  bitsOut    =    readShort(nextByte);    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
325	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  0)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  0)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
326	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  8)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  8)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  8)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
327	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	add
328	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(count    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
329	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	add
330	[BUG]  [BUGGY]  bitsOut  =  in.read(bitsCachedSize);  [CE]  'else'  without  'if'  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.read(bitsCachedSize);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read(bitsCachedSize);	  bitsOut    =    in.read();    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
331	[BUG]  [BUGGY]  bitsOut  =  in.read(bytesCachedSize);  [CE]  'else'  without  'if'  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.read(bytesCachedSize);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read(bytesCachedSize);	  bitsOut    =    in.read();    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
332	[BUG]  [BUGGY]  bitsOut  =  in.readFully(nextByte);  [CE]  'else'  without  'if'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.readFully(nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.readFully(nextByte);	  bitsOut    =    in.read();    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
333	[BUG]  [BUGGY]  bitsOut  =  in.read(bits);  [CE]  'else'  without  'if'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.read(bits);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read(bits);	  bitsOut    =    in.read();    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
334	[BUG]  [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	69	None	replace
335	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	69	None	replace
336	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  bitsOut  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsOut  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsOut  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	13	None	replace
337	[BUG]  [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >=  ByteOrder.BYTE_SIZE)  {	  if    (nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	52	None	replace
338	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_STATE  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_STATE  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_STATE  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_STATE  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_STATE	71	None	replace
339	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SCALE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SCALE_ENDIAN  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SCALE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_SCALE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SCALE_ENDIAN	71	None	replace
340	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	71	None	replace
341	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE	71	None	replace
342	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
343	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
344	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  <  bitsCachedSize)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  <  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
345	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  >=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  >=  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	27	None	replace
346	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	84	None	replace
347	[BUG]  [BUGGY]  bitsOut.write(nextByte  -  1);  [CE]  'else'  without  'if'  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.write(nextByte  -  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.write(nextByte  -  1);	  bitsOut.write(nextByte);    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
348	[BUG]  [BUGGY]  bitsOut.write(nextByte,  0);  [CE]  'else'  without  'if'  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.write(nextByte,  0);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.write(nextByte,  0);	  bitsOut.write(nextByte);    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
349	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.BYTE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE	55	None	replace
350	[BUG]  [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_TRY)  {  [CE]  cannot  find  symbol  BYTE_TRY  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_TRY)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bitsCachedSize  ==  ByteOrder.BYTE_TRY)  {	  if    (bitsCachedSize    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_TRY	54	None	replace
351	[BUG]  [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_INT)  {  [CE]  cannot  find  symbol  BYTE_INT  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_INT)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bitsCachedSize  ==  ByteOrder.BYTE_INT)  {	  if    (bitsCachedSize    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_INT	54	None	replace
352	[BUG]  [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_LAST)  {  [CE]  cannot  find  symbol  BYTE_LAST  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_LAST)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bitsCachedSize  ==  ByteOrder.BYTE_LAST)  {	  if    (bitsCachedSize    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_LAST	54	None	replace
353	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  counts  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  counts  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  counts  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    counts    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	28	None	replace
354	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    counts    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	28	None	replace
355	[BUG]  [BUGGY]  if(byteOrder  >=  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  >=  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  >=  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder    >=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	42	None	replace
356	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	16	None	replace
357	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.DEFAULT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  DEFAULT  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.DEFAULT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.DEFAULT  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	16	None	replace
358	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.NUMBER_OF_BYTE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_OF_BYTE  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.NUMBER_OF_BYTE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.NUMBER_OF_BYTE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_OF_BYTE	16	None	replace
359	[BUG]  [BUGGY]  bitsOut  =  in.readBits(nextByte  -  count);  [CE]  'else'  without  'if'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.readBits(nextByte  -  count);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.readBits(nextByte  -  count);	  bitsOut    =    in.readBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	47	None	replace
360	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
361	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
362	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
363	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
364	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  >  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  >  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  >  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	75	None	replace
365	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [BUGGY]  bitsCachedSize)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [BUGGY]  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  [BUGGY]  bitsCachedSize)  {	  	non-compiled	[CE]  ')'  expected	35	None	add
366	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  nextByte  :  bytesCachedSize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  nextByte  :  bytesCachedSize;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  8)?  nextByte  :  bytesCachedSize;	  bitsOut    |=(bytesCachedSize    <    <    8)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
367	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  nextByte  :  BYTE_SIZE;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  nextByte  :  BYTE_SIZE;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  8)?  nextByte  :  BYTE_SIZE;	  bitsOut    |=(bytesCachedSize    <    <    8)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
368	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  BYTE_SIZE  :  nextByte;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  BYTE_SIZE  :  nextByte;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  8)?  BYTE_SIZE  :  nextByte;	  bitsOut    |=(bytesCachedSize    <    <    8)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
369	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  cannot  find  symbol  bitsOut  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	34	None	replace
370	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  BYTE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	34	None	replace
371	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  true);  [CE]  'else'  without  'if'  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  true);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  true);	  bitsOut    =    readBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	45	None	replace
372	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_END  ||  nextByte  ==  ByteOrder.LITTLE_END)  {  [CE]  cannot  find  symbol  BYTE_END  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_END  ||  nextByte  ==  ByteOrder.LITTLE_END)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.BYTE_END  ||  nextByte  ==  ByteOrder.LITTLE_END)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_END)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_END	80	None	replace
373	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_END)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	80	None	replace
374	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.LITTLE_END)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.LITTLE_END)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.LITTLE_END)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_END)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	80	None	replace
375	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	23	None	replace
376	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bitsOut  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	23	None	replace
377	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	23	None	replace
378	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bitsOut  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	20	None	replace
379	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	6	None	replace
380	[BUG]  [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	6	None	replace
381	[BUG]  [BUGGY]  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	6	None	replace
382	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  nextByte)  {  [CE]  cannot  find  symbol  bitsOut  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  nextByte)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  nextByte)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    nextByte)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	82	None	replace
383	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  nextByte)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  nextByte)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  bitsOut  ==  nextByte)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    nextByte)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	82	None	replace
384	[BUG]  [BUGGY]  bitsOut  =  in.read(nextByte  -  1);  [CE]  'else'  without  'if'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.read(nextByte  -  1);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read(nextByte  -  1);	  bitsOut    =    in.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
385	[BUG]  [BUGGY]  bitsOut  =  in.read(nextByte,  0);  [CE]  'else'  without  'if'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.read(nextByte,  0);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read(nextByte,  0);	  bitsOut    =    in.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
386	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	78	None	replace
387	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BIT_SIZE)  {  [CE]  cannot  find  symbol  BIT_SIZE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.BIT_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.BIT_SIZE)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  BIT_SIZE	9	None	replace
388	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BITS_CASE)  {  [CE]  cannot  find  symbol  BITS_CASE  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.BITS_CASE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.BITS_CASE)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  BITS_CASE	9	None	replace
389	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {  [CE]  cannot  find  symbol  DEFAULT_BYTE_SIZE  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.DEFAULT_BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_BYTE_SIZE	9	None	replace
390	[BUG]  [BUGGY]  bitsOut  =  readShortBits(nextByte,  0);  [CE]  'else'  without  'if'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readShortBits(nextByte,  0);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readShortBits(nextByte,  0);	  bitsOut    =    readShortBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
391	[BUG]  [BUGGY]  bitsOut  =  new  long[bitsCachedSize  +  16];  [CE]  'else'  without  'if'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  new  long[bitsCachedSize  +  16];  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  new  long[bitsCachedSize  +  16];	  bitsOut    =    new    long[bitsCachedSize];    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
392	[BUG]  [BUGGY]  bitsOut  =  new  long[bitsCachedSize  +  8];  [CE]  'else'  without  'if'  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  new  long[bitsCachedSize  +  8];  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  new  long[bitsCachedSize  +  8];	  bitsOut    =    new    long[bitsCachedSize];    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
393	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  2);  [CE]  'else'  without  'if'  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  2);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  0,  count  -  2);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
394	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	8	None	replace
395	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  |&  nextByte  >  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  |&  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    >    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  |&  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
396	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte!=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte!=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	38	2	replace
397	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte!=  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte!=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte!=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	38	2	replace
398	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.MINIMUM_BYTE_SIZE)  {  [CE]  cannot  find  symbol  MINIMUM_BYTE_SIZE  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (byteOrder  ==  ByteOrder.MINIMUM_BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.MINIMUM_BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIMUM_BYTE_SIZE	53	None	replace
399	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.SIZE)  {  [CE]  cannot  find  symbol  SIZE  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (byteOrder  ==  ByteOrder.SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.SIZE)  {	  if    (byteOrder    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	53	None	replace
400	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.MAXIMUM_BYTE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_BYTE_SIZE  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (byteOrder  ==  ByteOrder.MAXIMUM_BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.MAXIMUM_BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_BYTE_SIZE	53	None	replace
401	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MINIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	86	None	replace
402	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	86	None	replace
403	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  count  >=  ByteOrder.BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	70	None	replace
404	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	21	None	replace
405	[BUG]  [BUGGY]  if(bytesCount  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  bytesCount  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCount  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCount  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCount    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCount	63	None	replace
406	[BUG]  [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	29	None	replace
407	[BUG]  [BUGGY]  if(bitsCachedSize!=  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize!=  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize!=  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	29	None	replace
408	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	74	None	replace
409	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	74	None	replace
410	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	74	None	replace
411	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	74	None	replace
412	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  nextByte  :  bytesCachedSize;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  nextByte  :  bytesCachedSize;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  1)?  nextByte  :  bytesCachedSize;	  bitsOut    |=(bytesCachedSize    <    <    1)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
413	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  count  :  bytesCachedSize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  count  :  bytesCachedSize;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  1)?  count  :  bytesCachedSize;	  bitsOut    |=(bytesCachedSize    <    <    1)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
414	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	26	None	replace
415	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  &&  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	26	None	replace
416	[BUG]  [BUGGY]  bitsOut.read(nextByte,  0,  count);  [CE]  'else'  without  'if'  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.read(nextByte,  0,  count);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.read(nextByte,  0,  count);	  bitsOut.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
417	[BUG]  [BUGGY]  bitsOut.read(nextByte,  0);  [CE]  'else'  without  'if'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.read(nextByte,  0);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.read(nextByte,  0);	  bitsOut.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
418	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	19	2	replace
419	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	19	2	replace
420	[BUG]  [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  count!=  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	4	None	replace
421	[BUG]  [BUGGY]  if(bitsCachedSize!=  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize!=  ByteOrder.FIELD_NAME)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize!=  ByteOrder.FIELD_NAME)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	4	None	replace
422	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  BitsCachedSize.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  BitsCachedSize.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  BitsCachedSize.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	83	None	replace
423	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  BYTEOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  BYTEOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  BYTEOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	83	None	replace
424	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	36	7	replace
425	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	36	7	replace
426	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  bitsOut  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsOut  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsOut  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	14	None	replace
427	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.BYTE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_SIZE    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE	14	None	replace
428	[BUG]  [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	7	None	replace
429	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.DEFAULT  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  DEFAULT  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.DEFAULT  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.DEFAULT  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	76	None	replace
430	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.FIRST  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  FIRST  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.FIRST  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.FIRST  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST	76	None	replace
431	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.UTF8)  {  [CE]  cannot  find  symbol  UTF8  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.UTF8)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.UTF8)  {	  if(bitsCachedSize    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  UTF8	62	None	replace
432	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.DEFAULT)  {  [CE]  cannot  find  symbol  DEFAULT  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.DEFAULT)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.DEFAULT)  {	  if(bitsCachedSize    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	62	None	replace
433	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIRST)  {  [CE]  cannot  find  symbol  FIRST  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIRST)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.FIRST)  {	  if(bitsCachedSize    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST	62	None	replace
434	[BUG]  [BUGGY]  if(bitsByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  bitsByte  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bitsByte	61	None	replace
435	[BUG]  [BUGGY]  if(bitsSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  bitsSize  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bitsSize	61	None	replace
436	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.SIZE  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  SIZE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.SIZE  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.SIZE  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.SIZE    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	15	None	replace
437	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  &&  nextByte  <  bitsCachedSize)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.FIELD_NAME  &&  nextByte  <  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	81	None	replace
438	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    counts    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	28	None	replace
439	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts!=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts!=  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    counts    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	28	None	replace
440	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  >  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  >  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  >  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    counts    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	28	None	replace
441	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	25	None	replace
442	[BUG]  [BUGGY]  if(bitsCachedSize  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
443	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
444	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  bitsCachedSize);  [CE]  'else'  without  'if'  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  readBits(nextByte,  bitsCachedSize);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  bitsCachedSize);	  bitsOut    =    readBits(nextByte);    	non-compiled	[CE]  'else'  without  'if'	45	None	replace
445	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  BitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  BitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  BitsCachedSize)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	83	None	replace
446	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  ByteOrder.BYTE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  ByteOrder.BYTE_SIZE)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
447	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    >    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	add
448	[BUG]  [BUGGY]  if(number  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  number  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(number  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(number  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  number	86	None	replace
449	[BUG]  [BUGGY]  if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bitsCount  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bitsCount	86	None	replace
450	[BUG]  [BUGGY]  if(length  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  length  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(length  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(length  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  length	86	None	replace
451	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.TOP_BYTE)  {  [CE]  cannot  find  symbol  TOP_BYTE  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.TOP_BYTE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.TOP_BYTE)  {	  if(bitsCachedSize    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  TOP_BYTE	62	None	replace
452	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_NAME)  {  [CE]  cannot  find  symbol  BYTE_NAME  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_NAME)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_NAME)  {	  if(bitsCachedSize    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_NAME	62	None	replace
453	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.DEFAULT_BYTE)  {  [CE]  cannot  find  symbol  DEFAULT_BYTE  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.DEFAULT_BYTE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.DEFAULT_BYTE)  {	  if(bitsCachedSize    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_BYTE	62	None	replace
454	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_TOP)  {  [CE]  cannot  find  symbol  BYTE_TOP  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_TOP)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_TOP)  {	  if(bitsCachedSize    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_TOP	62	None	replace
455	[BUG]  [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	27	None	replace
456	[BUG]  [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	27	None	replace
457	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  FIELD_SIZE  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.FIELD_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.FIELD_NAME    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_SIZE	76	None	replace
458	[BUG]  [BUGGY]  if  (bytesCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (bytesCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bytesCachedSize  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	70	None	replace
459	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
460	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.DEFAULT)  {  [CE]  cannot  find  symbol  DEFAULT  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (byteOrder  ==  ByteOrder.DEFAULT)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.DEFAULT)  {	  if    (byteOrder    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	53	None	replace
461	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	3	None	replace
462	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  bitsCachedSize)  {	  if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
463	[BUG]  [BUGGY]  if(nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  =  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  =  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
464	[BUG]  [BUGGY]  if(nextByte  >  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  >  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  >  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	56	None	replace
465	[BUG]  [BUGGY]  if(nextByte  >  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  >  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  >  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	56	None	replace
466	[BUG]  [BUGGY]  bitsOut  =  in.read(bitsCachedSize,  nextByte);  [CE]  'else'  without  'if'  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.read(bitsCachedSize,  nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read(bitsCachedSize,  nextByte);	  bitsOut    =    in.read();    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
467	[BUG]  [BUGGY]  bitsOut  =  in.read(ByteOrder.BYTE_SIZE);  [CE]  'else'  without  'if'  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.read(ByteOrder.BYTE_SIZE);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read(ByteOrder.BYTE_SIZE);	  bitsOut    =    in.read();    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
468	[BUG]  [BUGGY]  bitsOut  =  in.read(bytesCachedSize,  nextByte);  [CE]  'else'  without  'if'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  in.read(bytesCachedSize,  nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read(bytesCachedSize,  nextByte);	  bitsOut    =    in.read();    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
469	[BUG]  [BUGGY]  if(byteSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  byteSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder    >>    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  byteSize	43	None	replace
470	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder    >>    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	43	None	replace
471	[BUG]  [BUGGY]  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder    >=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	42	None	replace
472	[BUG]  [BUGGY]  if(byteOrder  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  <  =  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder    >=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
473	[BUG]  [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	73	None	replace
474	[BUG]  [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	73	None	replace
475	[BUG]  [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    bitsCachedSize)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	36	None	replace
476	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.FIELD_NAME  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	5	None	replace
477	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(nextByte    <    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	7	None	replace
478	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
479	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	33	None	replace
480	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  >  nextByte)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  >  nextByte)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  >  nextByte)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	33	None	replace
481	[BUG]  [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	23	None	replace
482	[BUG]  [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	23	None	replace
483	[BUG]  [BUGGY]  if(bitsCachedSize  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
484	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  count  :  bytesCachedSize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  count  :  bytesCachedSize;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  8)?  count  :  bytesCachedSize;	  bitsOut    |=(bytesCachedSize    <    <    8)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
485	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  secondByte  :  count;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  8)?  secondByte  :  count;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  8)?  secondByte  :  count;	  bitsOut    |=(bytesCachedSize    <    <    8)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
486	[BUG]  [BUGGY]  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder    >=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	59	None	replace
487	[BUG]  [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	26	None	replace
488	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte!=    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	replace
489	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsOut)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsOut)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsOut)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	34	None	replace
490	[BUG]  [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  count  <  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  count  <  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  count  <  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	29	None	replace
491	[BUG]  [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
492	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SCALE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SCALE_ENDIAN  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_SCALE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_SCALE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SCALE_ENDIAN	16	None	replace
493	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.TOP  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  TOP  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.TOP  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.TOP  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	16	None	replace
494	[BUG]  [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
495	[BUG]  [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN,  bitsOut)  {  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN,  bitsOut)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN,  bitsOut)  {	  if(bitsCachedSize!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
496	[BUG]  [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	21	None	replace
497	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  nextByte)  {  [CE]  cannot  find  symbol  bitsOut  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  nextByte)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  nextByte)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    bitsOut    ==    nextByte)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	82	None	replace
498	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	81	None	replace
499	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN    &&    nextByte    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
500	[BUG]  [BUGGY]  if(bytesCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	39	None	replace
501	[BUG]  [BUGGY]  if(bytesCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
502	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_START  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_START  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_START  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_START  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_START	71	None	replace
503	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_DECLARED  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_DECLARED  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_DECLARED  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_DECLARED  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsCachedSize    ==    ByteOrder.BYTE_ENDIAN    ||    bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_DECLARED	71	None	replace
504	[BUG]  [BUGGY]  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder!=    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
505	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_ENDIAN)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    byteOrder    ==    ByteOrder.BYTE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	17	None	replace
506	[BUG]  [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	75	None	replace
507	[BUG]  [BUGGY]  if(bitsCachedSize  >  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  >  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  >  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    >    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	75	None	replace
508	[BUG]  [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  secondByte  :  count;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  |=(nextByte  <  <  1)?  secondByte  :  count;  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(nextByte  <  <  1)?  secondByte  :  count;	  bitsOut    |=(bytesCachedSize    <    <    1)?    nextByte    :    count;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
509	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
510	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
511	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  <  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	74	None	replace
512	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	74	None	replace
513	[BUG]  [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  <  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    count    ==    ByteOrder.MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	74	None	replace
514	[BUG]  [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (nextByte  ==  ByteOrder.BYTE_SIZE  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if    (nextByte    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
515	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte!=  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte!=  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.BYTE_ENDIAN    ||    nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	12	None	replace
516	[BUG]  [BUGGY]  bitsOut.read(in);  [CE]  'else'  without  'if'  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.read(in);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.read(in);	  bitsOut.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
517	[BUG]  [BUGGY]  bitsOut.read(in,  nextByte);  [CE]  'else'  without  'if'  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut.read(in,  nextByte);  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.read(in,  nextByte);	  bitsOut.read(nextByte);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
518	[BUG]  [BUGGY]  if(bitsCachedSize  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
519	[BUG]  [BUGGY]  if(bytesCachedSize  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bytesCachedSize  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
520	[BUG]  [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
521	[BUG]  [BUGGY]  bitsOut  =  new  long[count];  [CE]  'else'  without  'if'  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  bitsOut  =  new  long[count];  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  new  long[count];	  bitsOut    =    new    long[bitsCachedSize];    	non-compiled	[CE]  'else'  without  'if'	48	None	replace
522	[BUG]  [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  2)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  2)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  2)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
523	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(nextByte    <    =    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
524	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  if(nextByte    <    =    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
525	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIRST)  {  [CE]  cannot  find  symbol  FIRST  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.FIRST)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.FIRST)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST	9	None	replace
526	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.TOP_BYTE)  {  [CE]  cannot  find  symbol  TOP_BYTE  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.TOP_BYTE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.TOP_BYTE)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  TOP_BYTE	9	None	replace
527	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.DEFAULT)  {  [CE]  cannot  find  symbol  DEFAULT  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(nextByte  ==  ByteOrder.DEFAULT)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.DEFAULT)  {	  if(nextByte    ==    ByteOrder.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	9	None	replace
528	[BUG]  [BUGGY]  if(bitsCategory  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  bitsCategory  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCategory  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCategory  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bitsCategory	61	None	replace
529	[BUG]  [BUGGY]  if(bitsCalculatedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  bitsCalculatedSize  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCalculatedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCalculatedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bitsOut    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bitsCalculatedSize	61	None	replace
530	[BUG]  [BUGGY]  if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  nextByte)  {  [CE]  cannot  find  symbol  bitsCount  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  nextByte)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  nextByte)  {	  if(bitsCount    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bitsCount	63	None	replace
531	[BUG]  [BUGGY]  if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  bitsCount  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCount    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bitsCount	63	None	replace
532	[BUG]  [BUGGY]  if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  bitsCount  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }      [BUGGY]  if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]      bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCount    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bitsCount	63	None	replace
