bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(numbersCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  numbersCachedSize  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(numbersCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(numbersCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  numbersCachedSize	5	None	replace
2	[BUG]  [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(count  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(count  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	5	None	replace
3	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	5	None	replace
4	[BUG]  [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	5	None	replace
5	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	1	None	replace
6	[BUG]  [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	1	None	replace
7	[BUG]  [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(nextByte  <  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	1	None	replace
8	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  ByteOrder.BYTE_SIZE)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	1	None	replace
9	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(nextByte  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.FIELD_NAME)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	1	None	replace
10	[BUG]  [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  <  =  ByteOrder.LITTLE_ENDIAN)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_ENDIAN    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	8	None	replace
12	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(nextByte  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_ENDIAN    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	8	None	replace
13	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_ENDIAN    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	8	None	replace
14	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_ENDIAN    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	8	None	replace
15	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.SIZE  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  SIZE  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.SIZE  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.SIZE  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_ENDIAN    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  SIZE	8	None	replace
16	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_ENDIAN  ||  nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_ENDIAN    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	8	None	replace
17	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  byteOrder  ==  ByteOrder.BYTE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  byteOrder  ==  ByteOrder.BYTE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  byteOrder  ==  ByteOrder.BYTE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_ENDIAN    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	8	None	replace
18	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	4	None	replace
19	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	4	None	replace
21	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	4	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	4	6	replace
23	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	4	6	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	4	6	replace
25	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	4	6	replace
26	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
27	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >=  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
28	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  counts  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
29	[BUG]  [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize!=  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
30	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	10	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	10	6	replace
32	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	10	6	replace
33	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	10	None	replace
34	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	10	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	10	6	replace
36	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	10	6	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	10	6	replace
38	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte!=  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	10	6	replace
39	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
40	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
41	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
42	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
43	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
44	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  [BUGGY]  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  if(byteOrder  [BUGGY]  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    if(byteOrder  [BUGGY]  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
45	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte);  [CE]  'else'  without  'if'  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  bitsOut  =  readBits(nextByte);  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte);	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
46	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  count);  [CE]  'else'  without  'if'  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  bitsOut  =  readBits(nextByte,  count);  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  count);	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
47	[BUG]  [BUGGY]  bitsOut  =  in.readBits(nextByte);  [CE]  'else'  without  'if'  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  bitsOut  =  in.readBits(nextByte);  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.readBits(nextByte);	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
48	[BUG]  [BUGGY]  bitsOut  =  new  long[bitsCachedSize];  [CE]  'else'  without  'if'  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  bitsOut  =  new  long[bitsCachedSize];  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  new  long[bitsCachedSize];	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
49	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count);  [CE]  'else'  without  'if'  [FE]                        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count);  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readBits(nextByte,  0,  count);	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
50	[BUG]  [BUGGY]  bitsOut  |=(bytesCachedSize  <  <  1)?  nextByte  :  count;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  bitsOut  |=(bytesCachedSize  <  <  1)?  nextByte  :  count;  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(bytesCachedSize  <  <  1)?  nextByte  :  count;	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  bitsOut  |=(bytesCachedSize  <  <  8)?  nextByte  :  count;  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  bitsOut  |=(bytesCachedSize  <  <  8)?  nextByte  :  count;  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  |=(bytesCachedSize  <  <  8)?  nextByte  :  count;	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if  (nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	7	None	replace
53	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if  (byteOrder  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_CACHE_SIZE	7	None	replace
54	[BUG]  [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (bitsCachedSize  ==  ByteOrder.BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	7	None	replace
55	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  ==  ByteOrder.BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	7	None	replace
56	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
57	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder!=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
58	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    If(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
59	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder  >=  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
60	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    if(byteOrder  >>  ByteOrder.LITTLE_ENDIAN  ||  nextByte  >  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
61	[BUG]  [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  bitsOut  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsOut  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	5	None	replace
62	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize  ==  ByteOrder.FIELD_NAME)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.FIELD_NAME)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	5	None	replace
63	[BUG]  [BUGGY]  if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  bitsCount  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCount  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bitsCount	5	None	replace
64	[BUG]  [BUGGY]  bitsOut.write(nextByte);  [CE]  'else'  without  'if'  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  bitsOut.write(nextByte);  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.write(nextByte);	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
65	[BUG]  [BUGGY]  bitsOut.read(nextByte);  [CE]  'else'  without  'if'  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  bitsOut.read(nextByte);  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut.read(nextByte);	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
66	[BUG]  [BUGGY]  bitsOut  =  in.read(nextByte);  [CE]  'else'  without  'if'  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  bitsOut  =  in.read(nextByte);  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read(nextByte);	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
67	[BUG]  [BUGGY]  bitsOut  =  readShortBits(nextByte);  [CE]  'else'  without  'if'  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  bitsOut  =  readShortBits(nextByte);  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readShortBits(nextByte);	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
68	[BUG]  [BUGGY]  bitsOut  =  readShort(nextByte);  [CE]  'else'  without  'if'  [FE]                        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  bitsOut  =  readShort(nextByte);  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  readShort(nextByte);	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
69	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	7	None	replace
70	[BUG]  [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [CE]  cannot  find  symbol  BYTE_SIZE  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if  (byteOrder  ==  ByteOrder.BYTE_SIZE  ||  count  ==  ByteOrder.BYTE_SIZE)  {	  if    (byteOrder    ==    ByteOrder.BYTE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_SIZE	7	None	replace
71	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  BYTE_ENDIAN  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize  ==  ByteOrder.BYTE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.BYTE_ENDIAN  ||  bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_ENDIAN    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  BYTE_ENDIAN	8	None	replace
72	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.NUMBER_INT  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  cannot  find  symbol  NUMBER_INT  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.NUMBER_INT  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.NUMBER_INT  ||  byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {	  if(byteOrder    ==    ByteOrder.BYTE_ENDIAN    ||    byteOrder    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_INT	8	None	replace
73	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
74	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
75	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  ByteOrder.BYTE_SIZE)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
76	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.FIELD_NAME  ||  nextByte  >  MAXIMUM_CACHE_SIZE)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	4	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	add	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	10	7	replace
78	[BUG]  [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(byteOrder  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  >  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	10	7	replace
79	[BUG]  [BUGGY]  bitsOut  =  in.read();  [CE]  'else'  without  'if'  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  bitsOut  =  in.read();  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	bitsOut  =  in.read();	      	non-compiled	[CE]  'else'  without  'if'	6	None	replace
80	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  ==  ByteOrder.BYTE_END)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	1	None	replace
81	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  &&  nextByte  <  bitsCachedSize)  {	  if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	1	None	replace
82	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  nextByte)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  nextByte)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  bitsOut  ==  nextByte)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
83	[BUG]  [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bitsCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  >  bitsCachedSize)  {	  if(bitsCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	2	None	replace
84	[BUG]  [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(nextByte  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  bitsCachedSize)  {	  if(byteOrder    ==    ByteOrder.LITTLE_ENDIAN    ||    nextByte    >    bitsCachedSize)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	10	None	replace
85	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  nextByte  <  =  MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
86	[BUG]  [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }  while  (bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }    [BUGGY]  if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {  [BUGGY]    bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  }  final  long  bitsOut;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	90	90	2	replace	if(bytesCachedSize  ==  ByteOrder.LITTLE_ENDIAN  ||  count  ==  ByteOrder.MAXIMUM_CACHE_SIZE)  {	  if(bytesCachedSize    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	5	None	replace
