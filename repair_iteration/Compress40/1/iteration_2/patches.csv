bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	add
2	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	add
3	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	add
4	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	add
5	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	add
6	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	add
7	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
8	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(count);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(count);	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
9	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
10	[BUG]  [BUGGY]  while(count  <  8)  {  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  8)  {  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  8)  {  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	17	None	replace
11	[BUG]  [BUGGY]  while  (in.read()  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.read()  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
12	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
13	[BUG]  [BUGGY]  while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  count)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  count)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  count)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
14	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  count)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  count)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  count)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
15	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  bitsCachedSize)  {	  while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	52	12	replace
17	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  bitsCachedSize)  {	  while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	52	12	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	52	12	replace
19	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	52	12	replace
20	[BUG]  [BUGGY]  while  (count  <  MASKS_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MASKS_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MASKS_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	52	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MASKS.length  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MASKS.length  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	52	12	replace
22	[BUG]  [BUGGY]  while  (count  <  MASKS.length  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MASKS.length  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MASKS.length  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	52	12	replace
23	[BUG]  [BUGGY]  while  (count  <  MASKS_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MASKS_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MASKS_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
24	[BUG]  [BUGGY]  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
25	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	96	None	replace
26	[BUG]  [BUGGY]  while(nextByte  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	96	None	replace
27	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	96	None	replace
28	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	add
29	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  While(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  While(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    While(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
30	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	add
31	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	add
32	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	add
33	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	add
34	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	add
35	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  in.read();  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  in.read();  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    in.read();  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  not  a  statement	124	None	add
36	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
37	[BUG]  [BUGGY]  final  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
38	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	135	None	replace
39	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
40	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	135	None	replace
41	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
42	[BUG]  [BUGGY]  bitsCachedSize  =  8;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  bitsCachedSize  =  8;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	bitsCachedSize  =  8;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    8;    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  in.read();  bitsCachedSize  =  0;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0)  {  in.read();  bitsCachedSize  =  0;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    8;    	compilable	  [FE]  AssertionError  	183	12	replace
44	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  in.read();  bitsCachedSize  =  0;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  in.read();  bitsCachedSize  =  0;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  in.read();  bitsCachedSize  =  0;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    8;    	compilable	  [FE]  AssertionError  	183	12	replace
45	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  in.read();  bitsCachedSize  =  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  in.read();  bitsCachedSize  =  0;  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  in.read();  bitsCachedSize  =  0;  }	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    8;    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  bitsCachedSize  =  in.read();  bitsCachedSize  =  0;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0)  {  bitsCachedSize  =  in.read();  bitsCachedSize  =  0;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    8;    	compilable	  [FE]  AssertionError  	183	12	replace
47	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  bitsCachedSize  =  in.read();  bitsCachedSize  =  0;  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  bitsCachedSize  =  in.read();  bitsCachedSize  =  0;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  bitsCachedSize  =  in.read();  bitsCachedSize  =  0;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    8;    	compilable	  [FE]  AssertionError  	183	12	replace
48	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8)  {  in.read();  bitsCachedSize  =  8;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8)  {  in.read();  bitsCachedSize  =  8;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8)  {  in.read();  bitsCachedSize  =  8;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    8;    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
49	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  bitsCachedSize  =  in.read();  bitsCachedSize  =  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  bitsCachedSize  =  in.read();  bitsCachedSize  =  0;  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  bitsCachedSize  =  in.read();  bitsCachedSize  =  0;  }	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    8;    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  8)  {  in.read();  bitsCachedSize  =  8;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  8)  {  in.read();  bitsCachedSize  =  8;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    8;    	compilable	  [FE]  AssertionError  	183	12	replace
51	[BUG]  [BUGGY]  while(count  <  8)  {  in.read();  bitsCachedSize  =  8;  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  8)  {  in.read();  bitsCachedSize  =  8;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  8)  {  in.read();  bitsCachedSize  =  8;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    8;    	compilable	  [FE]  AssertionError  	183	12	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.read()  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	109	12	replace
53	[BUG]  [BUGGY]  while  (in.read()  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.read()  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	109	12	replace
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	109	12	replace
55	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	109	12	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	109	12	replace
57	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	109	12	replace
58	[BUG]  [BUGGY]  while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	155	12	replace
60	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	155	12	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.read()  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	155	12	replace
62	[BUG]  [BUGGY]  while  (in.read()  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.read()  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	155	12	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	155	12	replace
64	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	155	12	replace
65	[BUG]  [BUGGY]  while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	155	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	compilable	  [FE]  AssertionError  	143	12	replace
67	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in!=  null)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	compilable	  [FE]  AssertionError  	143	12	replace
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in  ==  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in  ==  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	compilable	  [FE]  AssertionError  	143	12	replace
69	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in  ==  null)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in  ==  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in  ==  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	compilable	  [FE]  AssertionError  	143	12	replace
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  ||  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	compilable	  [FE]  AssertionError  	143	12	replace
71	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  in!=  null)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  ||  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	compilable	  [FE]  AssertionError  	143	12	replace
72	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize  &&  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
73	[BUG]  [BUGGY]  while  (in  <  bitsCachedSize  &&  count  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in  <  bitsCachedSize  &&  count  >=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in  <  bitsCachedSize  &&  count  >=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	143	None	replace
74	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	137	None	replace
75	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
76	[BUG]  [BUGGY]  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
77	[BUG]  [BUGGY]  while  (bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    count    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	179	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    count    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	179	12	replace
79	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    count    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	179	12	replace
80	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
81	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
82	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
83	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
84	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(in.read());  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(in.read());  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(in.read());  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
85	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    While    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	176	12	replace
87	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    While    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	176	12	replace
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    While    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	176	12	replace
89	[BUG]  [BUGGY]  while  (in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    While    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	176	12	replace
90	[BUG]  [BUGGY]  while  (count  <  1)  {  while  (count  <  1)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  while  (count  <  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    while  (count  <  1)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
91	[BUG]  [BUGGY]  while  (count  <  1)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
92	[BUG]  [BUGGY]  while  (count  <  1)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
93	[BUG]  [BUGGY]  while  (count  <  1)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
94	[BUG]  [BUGGY]  while  (count  <  1)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
95	[BUG]  [BUGGY]  while  (count  <  1)  {  InputStream  in  =  new  ByteInputStream(count,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  InputStream  in  =  new  ByteInputStream(count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    InputStream  in  =  new  ByteInputStream(count,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
96	[BUG]  [BUGGY]  while  (count  <  1)  {  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
97	[BUG]  [BUGGY]  while  (count  <  1)  {  long  nextByte  =  in.read();  if(nextByte  <  0)  {  return  nextByte;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  long  nextByte  =  in.read();  if(nextByte  <  0)  {  return  nextByte;  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    long  nextByte  =  in.read();  if(nextByte  <  0)  {  return  nextByte;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
98	[BUG]  [BUGGY]  InputStream  in  =  new  ByteInputStream(bytesCachedSize);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  ByteInputStream(bytesCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  ByteInputStream(bytesCachedSize);	  InputStream    in    =    new    ByteInputStream(count);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
99	[BUG]  [BUGGY]  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  ByteInputStream(bitsCachedSize);	  InputStream    in    =    new    ByteInputStream(count);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
100	[BUG]  [BUGGY]  InputStream  in  =  new  ByteInputStream(count  -  1);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  ByteInputStream(count  -  1);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  ByteInputStream(count  -  1);	  InputStream    in    =    new    ByteInputStream(count);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
101	[BUG]  [BUGGY]  InputStream  in  =  new  ByteInputStream(count  +  1);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  ByteInputStream(count  +  1);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  ByteInputStream(count  +  1);	  InputStream    in    =    new    ByteInputStream(count);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
102	[BUG]  [BUGGY]  InputStream  in  =  new  ByteInputStream(MASKS_SIZE);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  ByteInputStream(MASKS_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  ByteInputStream(MASKS_SIZE);	  InputStream    in    =    new    ByteInputStream(count);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
103	[BUG]  [BUGGY]  InputStream  in  =  new  ByteInputStream(bitsOut,  count);  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  ByteInputStream(bitsOut,  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  ByteInputStream(bitsOut,  count);	  InputStream    in    =    new    ByteInputStream(count);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
104	[BUG]  [BUGGY]  InputStream  in  =  new  ByteInputStream(bitsOut);  [CE]  illegal  start  of  type  [FE]                                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  ByteInputStream(bitsOut);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  ByteInputStream(bitsOut);	  InputStream    in    =    new    ByteInputStream(count);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
105	[BUG]  [BUGGY]  while(count  <  =  bitsCachedSize)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  bitsCachedSize)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  bitsCachedSize)  {  InputStream  in  =  new  BufferedInputStream(in.read());	  while    (count    <    bitsCachedSize)    {    InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
106	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  in  =  new  BufferedInputStream(in.read());  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize)  {  in  =  new  BufferedInputStream(in.read());	  while    (count    <    bitsCachedSize)    {    InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	129	None	replace
107	[BUG]  [BUGGY]  while  (count  <  bitsOut.length)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  cannot  find  symbol  bitsOut  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsOut.length)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsOut.length)  {  InputStream  in  =  new  BufferedInputStream(in.read());	  while    (count    <    bitsCachedSize)    {    InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  cannot  find  symbol  bitsOut	129	None	replace
108	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
109	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
110	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
111	[BUG]  [BUGGY]  while  (count  <  2)  {  final  long  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  2)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  2)  {  final  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    2)    {    final    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	192	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	120	12	replace
113	[BUG]  [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	120	12	replace
114	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
115	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  ||  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  bitsCachedSize  ||  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	120	12	replace
116	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  ||  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  ||  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  ||  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	120	12	replace
117	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	193	None	replace
118	[BUG]  [BUGGY]  while(count  <  2)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  2)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  2)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
119	[BUG]  [BUGGY]  while(count  <  2)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  1)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  2)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  2)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  1)  {	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
120	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	193	None	replace
121	[BUG]  [BUGGY]  while(count  <  2)  {  final  long  nextByte  =  in.read();  if(nextByte  <  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  2)  {  final  long  nextByte  =  in.read();  if(nextByte  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  2)  {  final  long  nextByte  =  in.read();  if(nextByte  <  0)  {	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
122	[BUG]  [BUGGY]  while(count  <  2)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  2)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  2)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	193	None	replace
123	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  1)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  1)  {	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	193	None	replace
124	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	add
125	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	add
126	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  not  a  statement	48	None	add
127	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	add
128	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.available();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	add
129	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	add
130	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	add
131	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
132	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.available();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	170	None	replace
133	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.available();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	170	None	replace
134	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
135	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.available();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	170	None	replace
136	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	64	12	replace
137	[BUG]  [BUGGY]  while  (count  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	64	12	replace
138	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	64	12	replace
139	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	64	12	replace
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	64	12	replace
141	[BUG]  [BUGGY]  while  (in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	64	12	replace
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.available()  <  0  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(in.available()  <  0  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	64	12	replace
143	[BUG]  [BUGGY]  while(in.available()  <  0  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.available()  <  0  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.available()  <  0  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	64	12	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.available()  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	64	12	replace
145	[BUG]  [BUGGY]  while  (in.available()  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	64	12	replace
146	[BUG]  [BUGGY]  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    1)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
147	[BUG]  [BUGGY]  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    1)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
148	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  1)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    1)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	158	12	replace
149	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    1)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	158	12	replace
150	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  1)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  1)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    1)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	158	12	replace
151	[BUG]  [BUGGY]  while(count  <  1)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  1)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  1)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    1)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	158	12	replace
152	[BUG]  [BUGGY]  while  (count  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
153	[BUG]  [BUGGY]  while  (bytesCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
154	[BUG]  [BUGGY]  while  (count  <  =  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
155	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  count)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  count)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  count)  {	  while(bitsCachedSize    <    =    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
156	[BUG]  [BUGGY]  while(count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  bitsCachedSize)  {	  while(bitsCachedSize    <    =    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
157	[BUG]  [BUGGY]  while(count  <  2)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  2)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  2)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {	  while    (bitsCachedSize    <    2)    {    final    int    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
158	[BUG]  [BUGGY]  while(count  <  2)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  1)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  2)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  2)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  1)  {	  while    (bitsCachedSize    <    2)    {    final    int    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
159	[BUG]  [BUGGY]  while(count  <  2)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  2)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  2)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {	  while    (bitsCachedSize    <    2)    {    final    int    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	194	None	replace
160	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  8)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  8)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  8)  {	  while    (bitsCachedSize    <    2)    {    final    int    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	194	None	replace
161	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
162	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
163	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
164	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  maxIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  maxIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  maxIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
165	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
166	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
167	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  while  (count  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  while  (count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE)    {    while  (count  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
168	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
169	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
170	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(count  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();  if(count  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
171	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(count  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(count  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
172	[BUG]  [BUGGY]  final  int  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  nextByte  =  in.read();	  while    (bitsCachedSize    <    1)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
173	[BUG]  [BUGGY]  while(bytesCachedSize  <  1)  {  final  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bytesCachedSize  <  1)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bytesCachedSize  <  1)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    1)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	25	None	replace
174	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	113	12	replace
175	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	113	12	replace
176	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	113	12	replace
177	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	113	12	replace
178	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	113	12	replace
179	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	113	12	replace
180	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
181	[BUG]  [BUGGY]  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	186	None	replace
182	[BUG]  [BUGGY]  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	186	None	replace
183	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
184	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	186	None	replace
185	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
186	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	186	None	replace
187	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	186	None	replace
188	[BUG]  [BUGGY]  while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	30	None	replace
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	30	12	replace
190	[BUG]  [BUGGY]  while  (in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	30	12	replace
191	[BUG]  [BUGGY]  while  (bytesCachedSize  <  count)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  count)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  count)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	30	None	replace
192	[BUG]  [BUGGY]  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	177	None	replace
193	[BUG]  [BUGGY]  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	177	None	replace
194	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	177	None	replace
195	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
196	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
197	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	177	None	replace
198	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
199	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
200	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
201	[BUG]  [BUGGY]  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
202	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	145	None	replace
203	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  count);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  count);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
204	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
205	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	76	12	replace
206	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	76	12	replace
207	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
208	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  bitsCachedSize)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  bitsCachedSize)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  bitsCachedSize)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
209	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
210	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
211	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
212	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
213	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  count  <  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    count    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	46	12	replace
214	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  count  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  count  <  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    count    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	46	12	replace
215	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  count  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  count  <  =  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  count  <  =  bitsCachedSize)  {	  while    (count    <    bitsCachedSize    &&    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
216	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE))  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    While    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	185	12	replace
217	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE))  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    While    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	185	12	replace
218	[BUG]  [BUGGY]  while  (bytesCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    While    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	185	None	replace
219	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE))  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    While    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	185	None	replace
220	[BUG]  [BUGGY]  final  int  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	8	None	replace
221	[BUG]  [BUGGY]  final  int  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  int  and  ByteOrder  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  int  and  ByteOrder	8	None	replace
222	[BUG]  [BUGGY]  final  int  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	8	None	replace
223	[BUG]  [BUGGY]  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	8	None	replace
224	[BUG]  [BUGGY]  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	8	None	replace
225	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	add
226	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  While  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  While  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    While  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {	  	non-compiled	[CE]  ';'  expected	40	None	add
227	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  whil  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  whil  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    whil  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {	  	non-compiled	[CE]  ';'  expected	40	None	add
228	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE));  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE));  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	add
229	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  while  ((  count  >=  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  while  ((  count  >=  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    while  ((  count  >=  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	add
230	[BUG]  [BUGGY]  int  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  int  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	int  nextByte  =  in.read();	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
231	[BUG]  [BUGGY]  long  nextByte  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  nextByte  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  nextByte  =  this.in.read();	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
232	[BUG]  [BUGGY]  byte  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  byte  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	byte  nextByte  =  in.read();	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
233	[BUG]  [BUGGY]  long  nextByte  =  in.read()  -  count;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  nextByte  =  in.read()  -  count;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  nextByte  =  in.read()  -  count;	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
234	[BUG]  [BUGGY]  short  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  short  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	short  nextByte  =  in.read();	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
235	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	add
236	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	add
237	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >>  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >>  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  >>  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	add
238	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	add
239	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	add
240	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  [Delete]  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  [Delete]  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  [Delete]  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	77	None	add
241	[BUG]  [BUGGY]  while  (count  <  1)  {  InputStream  in  =  this.in.read();  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  1)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  incompatible  types	161	None	replace
242	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  final  InputStream  in  =  this.in.read();  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  final  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  final  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  incompatible  types	161	None	replace
243	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  InputStream  in  =  this.in.readInt();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  InputStream  in  =  this.in.readInt();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  InputStream  in  =  this.in.readInt();	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
244	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
245	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
246	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
247	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
248	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >>  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >>  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  >>  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
249	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
250	[BUG]  [BUGGY]  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int[]  bitsOut  =  new  int[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
251	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	compilable	  [FE]  AssertionError  	35	12	replace
252	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	compilable	  [FE]  AssertionError  	35	12	replace
253	[BUG]  [BUGGY]  final  int[]  bitsOut  =  new  int[count];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int[]  bitsOut  =  new  int[count];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int[]  bitsOut  =  new  int[count];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
254	[BUG]  [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [CE]  cannot  find  symbol  bitsOut  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsOut  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	non-compiled	[CE]  cannot  find  symbol  bitsOut	35	None	replace
255	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  bitsOut!=  null)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [CE]  cannot  find  symbol  bitsOut  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  bitsOut!=  null)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  &&  bitsOut!=  null)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	non-compiled	[CE]  cannot  find  symbol  bitsOut	35	None	replace
256	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  bitsOut.length)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [CE]  cannot  find  symbol  bitsOut  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  bitsOut.length)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  bitsOut.length)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	non-compiled	[CE]  cannot  find  symbol  bitsOut	35	None	replace
257	[BUG]  [BUGGY]  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
258	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
259	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
260	[BUG]  [BUGGY]  while(count  <  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
261	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
262	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
263	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  2)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	162	12	replace
264	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	162	12	replace
265	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  2)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  2)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	162	12	replace
266	[BUG]  [BUGGY]  while  (count  <  2)  {  long  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  2)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  2)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	162	12	replace
267	[BUG]  [BUGGY]  while  (count  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  0)  {	  while    (bitsCachedSize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
268	[BUG]  [BUGGY]  while  (bytesCachedSize  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  =  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  =  0)  {	  while    (bitsCachedSize    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
269	[BUG]  [BUGGY]  long  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
270	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
271	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
272	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
273	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
274	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
275	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
276	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
277	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
278	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  count  &&  in.available()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
279	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.available()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
280	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int  nextByte  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	31	None	replace
281	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  final  long  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	31	None	replace
282	[BUG]  [BUGGY]  long  nextByte  =  in.available();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.available();    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
283	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.available();  [CE]  cannot  find  symbol  nextByte  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.available();    	non-compiled	[CE]  cannot  find  symbol  nextByte	106	None	replace
284	[BUG]  [BUGGY]  while(nextByte  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [CE]  cannot  find  symbol  nextByte  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.available();    	non-compiled	[CE]  cannot  find  symbol  nextByte	106	None	replace
285	[BUG]  [BUGGY]  while(in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.available();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	106	None	replace
286	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
287	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
288	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
289	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
290	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(in.read());  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(in.read());  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(in.read());  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
291	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  return  nextByte;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  return  nextByte;  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  return  nextByte;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
292	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	104	None	replace
293	[BUG]  [BUGGY]  while  (count  <  =  16)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  16)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  16)  {	  while    (bitsCachedSize    <    =    16)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
294	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  16)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  16)  {	  while    (bitsCachedSize    <    =    16)    {    	compilable	  [FE]  AssertionError  	22	12	replace
295	[BUG]  [BUGGY]  while  (bitsCachedSize  <  16)  {  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  16)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  16)  {	  while    (bitsCachedSize    <    =    16)    {    	compilable	  [FE]  AssertionError  	22	12	replace
296	[BUG]  [BUGGY]  while  (bytesCachedSize  <  =  16)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  =  16)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  =  16)  {	  while    (bitsCachedSize    <    =    16)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
297	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE)  {  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    in.read();    	compilable	  [FE]  AssertionError  	139	12	replace
298	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  in.read();  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE)  {  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    in.read();    	compilable	  [FE]  AssertionError  	139	12	replace
299	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  in.read();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    in.read();    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
300	[BUG]  [BUGGY]  while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE)  {  in.read();  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  MAXIMUM_CACHE_SIZE)  {  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    in.read();    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	139	None	replace
301	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MASKS.length)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  MASKS.length)  {  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    in.read();    	compilable	  [FE]  AssertionError  	139	12	replace
302	[BUG]  [BUGGY]  while(bitsCachedSize  <  MASKS.length)  {  in.read();  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MASKS.length)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  MASKS.length)  {  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    in.read();    	compilable	  [FE]  AssertionError  	139	12	replace
303	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  bitsCachedSize)  {  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	128	12	replace
304	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize)  {  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	128	12	replace
305	[BUG]  [BUGGY]  while(count  <  =  bitsCachedSize)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  bitsCachedSize)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  bitsCachedSize)  {  long  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
306	[BUG]  [BUGGY]  while(count  <  =  bitsCachedSize)  {  final  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  bitsCachedSize)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  bitsCachedSize)  {  final  long  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
307	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MASKS.length)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  MASKS.length)  {  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	128	12	replace
308	[BUG]  [BUGGY]  while(count  <  MASKS.length)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MASKS.length)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MASKS.length)  {  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	128	12	replace
309	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(in.read());    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
310	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(in.read());    bitsCachedSize    =    in.available();    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
311	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(in.read());    bitsCachedSize    =    in.available();    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
312	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(in.read());    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
313	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(in.read());    bitsCachedSize    =    in.available();    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
314	[BUG]  [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(in.read());    bitsCachedSize    =    in.available();    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
315	[BUG]  [BUGGY]  InputStream  in.skipChildren();  [CE]  ';'  expected  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in.skipChildren();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in.skipChildren();	  in.skipChildren();    	non-compiled	[CE]  ';'  expected	74	None	replace
316	[BUG]  [BUGGY]  bitsOut.skipChildren();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  bitsOut.skipChildren();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	bitsOut.skipChildren();	  in.skipChildren();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
317	[BUG]  [BUGGY]  InputStream  in  =  readBits(count,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  readBits(count,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  readBits(count,  MAXIMUM_CACHE_SIZE);	  in.skipChildren();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
318	[BUG]  [BUGGY]  in.close();  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.close();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.close();	  in.skipChildren();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
319	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	201	None	replace
320	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	201	None	replace
321	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	201	None	replace
322	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  ==  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	201	None	replace
323	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  8)||(bitsCachedSize  <  8))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  bitsCachedSize  <  8)||(bitsCachedSize  <  8))  {	  while    (bitsCachedSize    <    8)    {    While    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	181	11	replace
324	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  8)||(bitsCachedSize  <  8))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  8)||(bitsCachedSize  <  8))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  8)||(bitsCachedSize  <  8))  {	  while    (bitsCachedSize    <    8)    {    While    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	181	11	replace
325	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  8)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  8)  {	  while    (bitsCachedSize    <    8)    {    While    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	181	12	replace
326	[BUG]  [BUGGY]  while  (count  <  8)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  8)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  8)  {	  while    (bitsCachedSize    <    8)    {    While    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	181	12	replace
327	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  2))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  2))  {	  while    (bitsCachedSize    <    8)    {    While    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	181	11	replace
328	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  2))  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  2))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  2))  {	  while    (bitsCachedSize    <    8)    {    While    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	181	11	replace
329	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  1))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  1))  {	  while    (bitsCachedSize    <    8)    {    While    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	181	11	replace
330	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  1))  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  1))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  1))  {	  while    (bitsCachedSize    <    8)    {    While    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	181	11	replace
331	[BUG]  [BUGGY]  while  (bytesCachedSize  <  8)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  8)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  8)  {	  while    (bitsCachedSize    <    8)    {    While    (bitsCachedSize    <    8)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	181	None	replace
332	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  8)&&(bitsCachedSize  <  8))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  bitsCachedSize  <  8)&&(bitsCachedSize  <  8))  {	  while    (bitsCachedSize    <    8)    {    While    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	181	11	replace
333	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  8)&&(bitsCachedSize  <  8))  {  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  8)&&(bitsCachedSize  <  8))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  8)&&(bitsCachedSize  <  8))  {	  while    (bitsCachedSize    <    8)    {    While    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	181	11	replace
334	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	45	12	replace
335	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	45	12	replace
336	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE  &&  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	45	12	replace
337	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	45	12	replace
338	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
339	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  8)||(bitsCachedSize  >  8))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  bitsCachedSize  <  8)||(bitsCachedSize  >  8))  {	  while    (bitsCachedSize    <    8)    {    while    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	12	11	replace
340	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  8)||(bitsCachedSize  >  8))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  8)||(bitsCachedSize  >  8))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  8)||(bitsCachedSize  >  8))  {	  while    (bitsCachedSize    <    8)    {    while    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	12	11	replace
341	[BUG]  [BUGGY]  while  (bytesCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	195	None	replace
342	[BUG]  [BUGGY]  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
343	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	195	12	replace
344	[BUG]  [BUGGY]  while  (count  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	195	12	replace
345	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
346	[BUG]  [BUGGY]  while  (bytesCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
347	[BUG]  [BUGGY]  while  (count  <  =  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
348	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  0)  {	  while    (count    <    1)    {    	compilable	  [FE]  AssertionError  	59	12	replace
349	[BUG]  [BUGGY]  while  (count  <  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  0)  {	  while    (count    <    1)    {    	compilable	  [FE]  AssertionError  	59	12	replace
350	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  2)  {	  while    (count    <    1)    {    	compilable	  [FE]  AssertionError  	59	12	replace
351	[BUG]  [BUGGY]  while  (count  <  2)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  2)  {	  while    (count    <    1)    {    	compilable	  [FE]  AssertionError  	59	12	replace
352	[BUG]  [BUGGY]  while  (count  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  1)  {	  while    (count    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
353	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  incompatible  types	138	None	replace
354	[BUG]  [BUGGY]  final  int  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  ';'  expected	138	None	replace
355	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  incompatible  types	138	None	replace
356	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
357	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  incompatible  types	138	None	replace
358	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  2)||(bitsCachedSize  <  2))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  bitsCachedSize  <  2)||(bitsCachedSize  <  2))  {	  while    (bitsCachedSize    <    2)    {    while    (bitsCachedSize    <    2)    {    	compilable	  [FE]  AssertionError  	80	11	replace
359	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  2)||(bitsCachedSize  <  2))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  2)||(bitsCachedSize  <  2))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  2)||(bitsCachedSize  <  2))  {	  while    (bitsCachedSize    <    2)    {    while    (bitsCachedSize    <    2)    {    	compilable	  [FE]  AssertionError  	80	11	replace
360	[BUG]  [BUGGY]  while  (bytesCachedSize  <  2)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  2)  {	  while    (bitsCachedSize    <    2)    {    while    (bitsCachedSize    <    2)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	80	None	replace
361	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
362	[BUG]  [BUGGY]  while  (count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
363	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	50	12	replace
364	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	50	12	replace
365	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	50	12	replace
366	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	50	12	replace
367	[BUG]  [BUGGY]  while  (count  <  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
368	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  bitsOut)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  bitsOut)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  bitsOut)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
369	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	50	12	replace
370	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	50	12	replace
371	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	add
372	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    while(bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	add
373	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  <  count  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  <  count  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    while(bitsCachedSize  <  count  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	add
374	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  <  count  &&  in.read()  >>  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  <  count  &&  in.read()  >>  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    while(bitsCachedSize  <  count  &&  in.read()  >>  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	add
375	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  <  count  &&  in.read()  [Delete]  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  <  count  &&  in.read()  [Delete]  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    while(bitsCachedSize  <  count  &&  in.read()  [Delete]  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	119	None	add
376	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	add
377	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  <  count  &&  in.read()  [BUGGY]  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  <  count  &&  in.read()  [BUGGY]  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    while(bitsCachedSize  <  count  &&  in.read()  [BUGGY]  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	119	None	add
378	[BUG]  [BUGGY]  while  (count  <  1)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  1)  {  InputStream  in  =  new  BufferedInputStream(in.read());	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
379	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  InputStream  in  =  new  BufferedInputStream(in.read(),  count);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  InputStream  in  =  new  BufferedInputStream(in.read(),  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  InputStream  in  =  new  BufferedInputStream(in.read(),  count);	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
380	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  in  =  new  BufferedInputStream(in.read());  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  in  =  new  BufferedInputStream(in.read());	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	159	None	replace
381	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	32	None	replace
382	[BUG]  [BUGGY]  while(count  <  =  bitsCachedSize)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  bitsCachedSize)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  bitsCachedSize)  {  final  int  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
383	[BUG]  [BUGGY]  while(bitsCachedSize  <  count)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count)  {  final  int  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	126	None	replace
384	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  final  int  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize)  {  final  int  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize)  {  final  int  nextByte  =  in.read();	  while    (count    <    bitsCachedSize)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	126	None	replace
385	[BUG]  [BUGGY]  while  (count  <  MASKS.length)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MASKS.length)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MASKS.length)  {  final  int  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	126	None	replace
386	[BUG]  [BUGGY]  while  (count  <  2)  {  long  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  2)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  2)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    2)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	81	None	replace
387	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  nextByte  =  in.read();	  while    (bitsCachedSize    <    2)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	81	None	replace
388	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	add
389	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  not  a  statement	63	None	add
390	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	add
391	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	add
392	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.available();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	add
393	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	add
394	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE);  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    in.available()  >  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  not  a  statement	63	None	add
395	[BUG]  [BUGGY]  while(count  <  bitsCachedSize.length)  {  [CE]  int  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize.length)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize.length)  {	  while(count    <    bitsOut.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	184	None	replace
396	[BUG]  [BUGGY]  while(count  <  in.length)  {  [CE]  cannot  find  symbol  length  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  in.length)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  in.length)  {	  while(count    <    bitsOut.length)    {    	non-compiled	[CE]  cannot  find  symbol  length	184	None	replace
397	[BUG]  [BUGGY]  while(count  <  bitsCached.length)  {  [CE]  long  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCached.length)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCached.length)  {	  while(count    <    bitsOut.length)    {    	non-compiled	[CE]  long  cannot  be  dereferenced	184	None	replace
398	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE.length)  {  [CE]  int  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE.length)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE.length)  {	  while(count    <    bitsOut.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	184	None	replace
399	[BUG]  [BUGGY]  while(count  <  bits.length)  {  [CE]  cannot  find  symbol  bits  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bits.length)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bits.length)  {	  while(count    <    bitsOut.length)    {    	non-compiled	[CE]  cannot  find  symbol  bits	184	None	replace
400	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  2)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  2)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  2)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
401	[BUG]  [BUGGY]  while  (count  <  2)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  2)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  2)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
402	[BUG]  [BUGGY]  final  long  nextByte  =  in.available();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.available();    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
403	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.available();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	107	None	replace
404	[BUG]  [BUGGY]  while(nextByte  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [CE]  cannot  find  symbol  nextByte  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.available();    	non-compiled	[CE]  cannot  find  symbol  nextByte	107	None	replace
405	[BUG]  [BUGGY]  while(bytesCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bytesCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bytesCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.available();    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	107	None	replace
406	[BUG]  [BUGGY]  while(in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.available();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	107	None	replace
407	[BUG]  [BUGGY]  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
408	[BUG]  [BUGGY]  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
409	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
410	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	178	None	replace
411	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	151	12	replace
412	[BUG]  [BUGGY]  while  (count  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	151	12	replace
413	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	151	12	replace
414	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	151	12	replace
415	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	151	12	replace
416	[BUG]  [BUGGY]  while  (count  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	151	12	replace
417	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.read()  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	151	12	replace
418	[BUG]  [BUGGY]  while  (in.read()  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.read()  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	151	12	replace
419	[BUG]  [BUGGY]  while  (bytesCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	151	None	replace
420	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.read()  <  bitsCachedSize)  {	  while    (count    <    bitsCachedSize)    {    while    (count    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	4	12	replace
421	[BUG]  [BUGGY]  while  (in.read()  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.read()  <  bitsCachedSize)  {	  while    (count    <    bitsCachedSize)    {    while    (count    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	4	12	replace
422	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  in.read())  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  in.read())  {	  while    (count    <    bitsCachedSize)    {    while    (count    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	4	12	replace
423	[BUG]  [BUGGY]  while  (count  <  in.read())  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  in.read())  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  in.read())  {	  while    (count    <    bitsCachedSize)    {    while    (count    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	4	12	replace
424	[BUG]  [BUGGY]  while  (count  <  MASKS_SIZE)  {  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MASKS_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MASKS_SIZE)  {	  while    (count    <    bitsCachedSize)    {    while    (count    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	4	None	replace
425	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	add
426	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	add
427	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	add
428	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	add
429	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	add
430	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	add
431	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	add
432	[BUG]  [BUGGY]  while  (count  <  8)  {  long  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  8)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  8)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    8)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	13	None	replace
433	[BUG]  [BUGGY]  while  (count  <  8)  {  final  long  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  8)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  8)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    8)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	13	None	replace
434	[BUG]  [BUGGY]  while(count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	198	None	replace
435	[BUG]  [BUGGY]  while(bytesCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bytesCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bytesCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	198	None	replace
436	[BUG]  [BUGGY]  while(in.read()  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	198	None	replace
437	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	198	12	replace
438	[BUG]  [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	198	12	replace
439	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(count);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  getInputStream(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  getInputStream(count);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
440	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(),  count;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  getInputStream(),  count;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  getInputStream(),  count;	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
441	[BUG]  [BUGGY]  InputStream  in  =  this.getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.getInputStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
442	[BUG]  [BUGGY]  InputStream  in  =  getInputStream().readBits(count);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  getInputStream().readBits(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  getInputStream().readBits(count);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
443	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(),  count);  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  getInputStream(),  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  getInputStream(),  count);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  ';'  expected	68	None	replace
444	[BUG]  [BUGGY]  InputStream  in  =  getInputStream().readBits(0,  count);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  getInputStream().readBits(0,  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  getInputStream().readBits(0,  count);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
445	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	146	None	replace
446	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
447	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
448	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
449	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	65	12	replace
450	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	65	12	replace
451	[BUG]  [BUGGY]  while  (bytesCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
452	[BUG]  [BUGGY]  while  (count  <  =  8  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  8  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  8  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    =    bitsCachedSize    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
453	[BUG]  [BUGGY]  while  (count  <  =  MASKS_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  MASKS_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  MASKS_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    =    bitsCachedSize    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
454	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  bitsCachedSize)  {	  while    (count    <    =    bitsCachedSize    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
455	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    =    bitsCachedSize    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
456	[BUG]  [BUGGY]  Integer  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  Integer  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	Integer  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    Integer    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
457	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    Integer    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	148	12	replace
458	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    Integer    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	148	12	replace
459	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    Integer    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
460	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    Integer    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
461	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    Integer    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
462	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  while  (bitsCachedSize  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  while  (bitsCachedSize  <  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    bitsCachedSize)    {    while  (bitsCachedSize  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	add
463	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    bitsCachedSize)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	add
464	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    bitsCachedSize)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	add
465	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    bitsCachedSize)    {    final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	add
466	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    bitsCachedSize)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	add
467	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    bitsCachedSize)    {    final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	add
468	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  final  int[]  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  final  int[]  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    bitsCachedSize)    {    final  int[]  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	add
469	[BUG]  [BUGGY]  InputStream  in  =(int)this.in.readInt();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =(int)this.in.readInt();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =(int)this.in.readInt();	  InputStream    in    =    this.in.readInt();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
470	[BUG]  [BUGGY]  InputStream  in  =  this.in.readUTF();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.in.readUTF();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.readUTF();	  InputStream    in    =    this.in.readInt();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
471	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(this.in,  count);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(this.in,  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(this.in,  count);	  InputStream    in    =    this.in.readInt();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
472	[BUG]  [BUGGY]  InputStream  in  =  this.in.readInt(count);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.in.readInt(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.readInt(count);	  InputStream    in    =    this.in.readInt();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
473	[BUG]  [BUGGY]  InputStream  in  =  this.in.readInt()  -  1;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.in.readInt()  -  1;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.readInt()  -  1;	  InputStream    in    =    this.in.readInt();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
474	[BUG]  [BUGGY]  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	188	None	replace
475	[BUG]  [BUGGY]  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	188	None	replace
476	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
477	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	188	None	replace
478	[BUG]  [BUGGY]  short  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  short  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	short  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	188	None	replace
479	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	67	12	replace
480	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	67	12	replace
481	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
482	[BUG]  [BUGGY]  while  (count  <  MASKS_SIZE  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MASKS_SIZE  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MASKS_SIZE  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	67	None	replace
483	[BUG]  [BUGGY]  while  (count  <  =  8)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  8)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  8)  {	  while    (bitsCachedSize    <    =    8)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
484	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(in.read(),  count);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(in.read(),  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(in.read(),  count);	  InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
485	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(bytesOut.read());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(bytesOut.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(bytesOut.read());	  InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
486	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(bytesOut,  in.read());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(bytesOut,  in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(bytesOut,  in.read());	  InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
487	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(in.read(),  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(in.read(),  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(in.read(),  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
488	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(byteOrder.read());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(byteOrder.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(byteOrder.read());	  InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
489	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(in.read()  +  count);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(in.read()  +  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(in.read()  +  count);	  InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
490	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	171	12	replace
491	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	171	12	replace
492	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	171	12	replace
493	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	171	12	replace
494	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	171	12	replace
495	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	171	12	replace
496	[BUG]  [BUGGY]  while  (count  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
497	[BUG]  [BUGGY]  while  (bytesCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
498	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  =  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
499	[BUG]  [BUGGY]  while  (count  <  =  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
500	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	157	12	replace
501	[BUG]  [BUGGY]  while  (count  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	157	12	replace
502	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	157	12	replace
503	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	157	12	replace
504	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.read()  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	157	12	replace
505	[BUG]  [BUGGY]  while  (in.read()  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.read()  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	157	12	replace
506	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	157	12	replace
507	[BUG]  [BUGGY]  while  (count  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	157	12	replace
508	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    count    &&    Integer.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
509	[BUG]  [BUGGY]  while  (bytesCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    count    &&    Integer.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	196	None	replace
510	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    count    &&    Integer.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
511	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE))  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE))  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    count    &&    Integer.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
512	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  1)  {  in.read();	  while    (bitsCachedSize    <    1)    {    in.read();    	compilable	  [FE]  AssertionError  	28	12	replace
513	[BUG]  [BUGGY]  while  (count  <  1)  {  in.read();  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  1)  {  in.read();	  while    (bitsCachedSize    <    1)    {    in.read();    	compilable	  [FE]  AssertionError  	28	12	replace
514	[BUG]  [BUGGY]  while  (bytesCachedSize  <  1)  {  in.read();  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  1)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  1)  {  in.read();	  while    (bitsCachedSize    <    1)    {    in.read();    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	28	None	replace
515	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  2)  {  in.read();	  while    (bitsCachedSize    <    1)    {    in.read();    	compilable	  [FE]  AssertionError  	28	12	replace
516	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  in.read();  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  in.read();	  while    (bitsCachedSize    <    1)    {    in.read();    	compilable	  [FE]  AssertionError  	28	12	replace
517	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in.close();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  1)  {  in.close();	  while    (bitsCachedSize    <    1)    {    in.read();    	compilable	  [FE]  AssertionError  	28	11	replace
518	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  in.close();  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in.close();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  in.close();	  while    (bitsCachedSize    <    1)    {    in.read();    	compilable	  [FE]  AssertionError  	28	11	replace
519	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize  &&  count  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize  &&  count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize  &&  count  <  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    =    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
520	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while    (count    <    =    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
521	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
522	[BUG]  [BUGGY]  while  (in.read()  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.read()  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
523	[BUG]  [BUGGY]  while  (count  <  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
524	[BUG]  [BUGGY]  while  (bytesCachedSize  <  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
525	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  =  1))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  =  1))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  =  1))  {	  while    (bitsCachedSize    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
526	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  =  0))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  =  0))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  =  0))  {	  while    (bitsCachedSize    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
527	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  =  8))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  =  8))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  =  8))  {	  while    (bitsCachedSize    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
528	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
529	[BUG]  [BUGGY]  while  (count  <  MASKS_SIZE  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MASKS_SIZE  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MASKS_SIZE  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	78	None	replace
530	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  final  long  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  final  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    8)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	165	None	replace
531	[BUG]  [BUGGY]  while(bitsCachedSize  <  8)  {  final  long  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  8)  {  final  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    8)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	165	None	replace
532	[BUG]  [BUGGY]  while  (count  <  8)  {  final  long  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  8)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  8)  {  final  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    8)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	165	None	replace
533	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  8)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    8)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	165	12	replace
534	[BUG]  [BUGGY]  while(bitsCachedSize  <  8)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  8)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    8)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	165	12	replace
535	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
536	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
537	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  not  a  statement	61	None	add
538	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
539	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
540	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
541	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(Math.min(bitsCachedSize,  count));  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(Math.min(bitsCachedSize,  count));  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(Math.min(bitsCachedSize,  count));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
542	[BUG]  [BUGGY]  while  (count  <  =  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
543	[BUG]  [BUGGY]  while  (bytesCachedSize  <  =  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  =  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  =  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
544	[BUG]  [BUGGY]  while  (count  <  =  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
545	[BUG]  [BUGGY]  while  (count  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
546	[BUG]  [BUGGY]  while  (count  <  =  0  &&  bitsCachedSize.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  0  &&  bitsCachedSize.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  0  &&  bitsCachedSize.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
547	[BUG]  [BUGGY]  while  (bytesCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
548	[BUG]  [BUGGY]  while(in.available()  <  count  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.available()  <  count  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.available()  <  count  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
549	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
550	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	add
551	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  While  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  While  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    While  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	111	None	add
552	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  <  bitsCachedSize)&&  in.read()  <  maxIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  <  bitsCachedSize)&&  in.read()  <  maxIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  ((  count  <  bitsCachedSize)&&  in.read()  <  maxIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	add
553	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  >=  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  >=  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  ((  count  >=  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	add
554	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)	  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	add
555	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(byteOrder.DEFAULT_TIME_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(byteOrder.DEFAULT_TIME_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(byteOrder.DEFAULT_TIME_SIZE);	  InputStream    in    =    new    BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE);    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
556	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE,  count);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE,  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE,  count);	  InputStream    in    =    new    BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE);    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
557	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(bytesOut,  ByteOrder.DEFAULT_TIME_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(bytesOut,  ByteOrder.DEFAULT_TIME_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(bytesOut,  ByteOrder.DEFAULT_TIME_SIZE);	  InputStream    in    =    new    BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE);    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
558	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE  +  count);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE  +  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE  +  count);	  InputStream    in    =    new    BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE);    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
559	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    new    BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE);    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
560	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE  *  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE  *  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE  *  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    new    BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE);    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
561	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE  -  count);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE  -  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE  -  count);	  InputStream    in    =    new    BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE);    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
562	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	88	None	replace
563	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
564	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
565	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
566	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(in.read());  }  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(in.read());  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(in.read());  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
567	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
568	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
569	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
570	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(in.read());  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(in.read());  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(in.read());  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
571	[BUG]  [BUGGY]  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
572	[BUG]  [BUGGY]  while(count  <  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  ';'  expected	91	None	replace
573	[BUG]  [BUGGY]  while(count  <  =  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
574	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
575	[BUG]  [BUGGY]  while(nextByte  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	89	None	replace
576	[BUG]  [BUGGY]  while  (bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  bytesCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	89	None	replace
577	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  MAXIMUM_CACHE_SIZE  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.available()  <  MAXIMUM_CACHE_SIZE  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
578	[BUG]  [BUGGY]  while  (in.available()  <  MAXIMUM_CACHE_SIZE  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  MAXIMUM_CACHE_SIZE  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  MAXIMUM_CACHE_SIZE  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
579	[BUG]  [BUGGY]  while  (in.available()  <  =  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  =  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  =  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
580	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  count  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
581	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.available()  <  count  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
582	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  count  &&  bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
583	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  >  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.available()  >  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
584	[BUG]  [BUGGY]  while  (in.available()  >  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  >  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  >  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
585	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.available()  <  count  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
586	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  count  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
587	[BUG]  [BUGGY]  while(count  <  bitsOut)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsOut)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsOut)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
588	[BUG]  [BUGGY]  while(count  <  bitsOut.length)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsOut.length)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsOut.length)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
589	[BUG]  [BUGGY]  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
590	[BUG]  [BUGGY]  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
591	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
592	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	187	None	replace
593	[BUG]  [BUGGY]  long  nextByte  =  in.read();  if(bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  nextByte  =  in.read();  if(bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  nextByte  =  in.read();  if(bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(bytesCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	90	None	replace
594	[BUG]  [BUGGY]  short  nextByte  =  in.read();  if(bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  short  nextByte  =  in.read();  if(bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	short  nextByte  =  in.read();  if(bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(bytesCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
595	[BUG]  [BUGGY]  while(nextByte  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  nextByte  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(bytesCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  nextByte	90	None	replace
596	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
597	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
598	[BUG]  [BUGGY]  while  (count  <  =  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
599	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	43	12	replace
600	[BUG]  [BUGGY]  while  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	43	12	replace
601	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  ||  count  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  0  ||  count  >  0)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	43	12	replace
602	[BUG]  [BUGGY]  while  (count  <  0  ||  count  >  0)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  ||  count  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  0  ||  count  >  0)  {	  while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	43	12	replace
603	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
604	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	172	None	replace
605	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	172	None	replace
606	[BUG]  [BUGGY]  while(count  <  =  bitsCachedSize)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  bitsCachedSize)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  bitsCachedSize)  {  InputStream  in  =  getInputStream();	  while    (count    <    bitsCachedSize)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
607	[BUG]  [BUGGY]  while  (count  <  bitsOut.length)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  bitsOut  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsOut.length)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsOut.length)  {  InputStream  in  =  getInputStream();	  while    (count    <    bitsCachedSize)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	9	None	replace
608	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
609	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
610	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
611	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
612	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
613	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
614	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
615	[BUG]  [BUGGY]  while  (count  <  8)  {  InputStream  in  =  this.in.read();  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  8)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  8)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  incompatible  types	166	None	replace
616	[BUG]  [BUGGY]  AssertionError  in  =  this.in.read();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  AssertionError  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	AssertionError  in  =  this.in.read();	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
617	[BUG]  [BUGGY]  while(count  <  2)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  2)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  2)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    ByteInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
618	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    ByteInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
619	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  InputStream  in  =  new  ByteInputStream(count);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  InputStream  in  =  new  ByteInputStream(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  InputStream  in  =  new  ByteInputStream(count);	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    ByteInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
620	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  in  =  new  ByteInputStream(count);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  in  =  new  ByteInputStream(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  in  =  new  ByteInputStream(count);	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    ByteInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	84	None	replace
621	[BUG]  [BUGGY]  while(count  <  2)  {  final  long  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  2)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  2)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    2)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	83	None	replace
622	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  MAXIMUM_CACHE_SIZE)&&(count  >  MAXIMUM_CACHE_SIZE))  {	  while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    	compilable	  [FE]  AssertionError  	41	12	replace
623	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&(count  >  MAXIMUM_CACHE_SIZE))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  MAXIMUM_CACHE_SIZE)&&(count  >  MAXIMUM_CACHE_SIZE))  {	  while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    	compilable	  [FE]  AssertionError  	41	12	replace
624	[BUG]  [BUGGY]  while  ((  count  <  MASKS_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MASKS_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  MASKS_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {	  while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	41	None	replace
625	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  0)||(count  >  0))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  0)||(count  >  0))  {	  while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    	compilable	  [FE]  AssertionError  	41	12	replace
626	[BUG]  [BUGGY]  while  ((  count  <  0)||(count  >  0))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  0)||(count  >  0))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  0)||(count  >  0))  {	  while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    	compilable	  [FE]  AssertionError  	41	12	replace
627	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  1)||(count  >  1))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  1)||(count  >  1))  {	  while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    	compilable	  [FE]  AssertionError  	41	12	replace
628	[BUG]  [BUGGY]  while  ((  count  <  1)||(count  >  1))  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  1)||(count  >  1))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  1)||(count  >  1))  {	  while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    	compilable	  [FE]  AssertionError  	41	12	replace
629	[BUG]  [BUGGY]  while  (count  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
630	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	38	12	replace
631	[BUG]  [BUGGY]  while  (count  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	38	12	replace
632	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  1)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  1)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  1)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
633	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  in  =  getInputStream();  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  in  =  getInputStream();	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	26	None	replace
634	[BUG]  [BUGGY]  while  (nextByte  <  0)  {  [CE]  cannot  find  symbol  nextByte  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (nextByte  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (nextByte  <  0)  {	  while    (bitsCachedSize    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  nextByte	3	None	replace
635	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
636	[BUG]  [BUGGY]  while  (count  <  8)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  8)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  8)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
637	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
638	[BUG]  [BUGGY]  while(count  <  2)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  2)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  2)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
639	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  InputStream  in  =  new  BufferedInputStream(count);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  InputStream  in  =  new  BufferedInputStream(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  InputStream  in  =  new  BufferedInputStream(count);	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
640	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  >  1))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  bitsCachedSize  <  1)||(bitsCachedSize  >  1))  {	  while    (bitsCachedSize    <    1)    {    while    (bitsCachedSize    <    1)    {    	compilable	  [FE]  AssertionError  	23	12	replace
641	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  >  1))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  >  1))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  1)||(bitsCachedSize  >  1))  {	  while    (bitsCachedSize    <    1)    {    while    (bitsCachedSize    <    1)    {    	compilable	  [FE]  AssertionError  	23	12	replace
642	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  bitsCachedSize  <  1)||(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {	  while    (bitsCachedSize    <    1)    {    while    (bitsCachedSize    <    1)    {    	compilable	  [FE]  AssertionError  	23	11	replace
643	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  1)||(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {	  while    (bitsCachedSize    <    1)    {    while    (bitsCachedSize    <    1)    {    	compilable	  [FE]  AssertionError  	23	11	replace
644	[BUG]  [BUGGY]  while  (bytesCachedSize  <  1)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  1)  {	  while    (bitsCachedSize    <    1)    {    while    (bitsCachedSize    <    1)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	23	None	replace
645	[BUG]  [BUGGY]  while(nextByte  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	103	None	replace
646	[BUG]  [BUGGY]  while(bytesCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  bytesCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bytesCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bytesCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	103	None	replace
647	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  0)  {  final  long  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  0)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.available()  >  0)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	103	None	replace
648	[BUG]  [BUGGY]  while  (count  <  2)  {  Integer  in  =  getInput();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  2)  {  Integer  in  =  getInput();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  2)  {  Integer  in  =  getInput();	  while    (bitsCachedSize    <    2)    {    Integer    in    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
649	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  Integer  in  =  getInput();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  Integer  in  =  getInput();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  Integer  in  =  getInput();	  while    (bitsCachedSize    <    2)    {    Integer    in    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
650	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  2)  {  Integer  in  =  getInput();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  2)  {  Integer  in  =  getInput();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  2)  {  Integer  in  =  getInput();	  while    (bitsCachedSize    <    2)    {    Integer    in    =    getInput();    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
651	[BUG]  [BUGGY]  while(bitsCachedSize  <  8)  {  Integer  in  =  getInput();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  Integer  in  =  getInput();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  8)  {  Integer  in  =  getInput();	  while    (bitsCachedSize    <    2)    {    Integer    in    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
652	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  Integer  in  =  getInput();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  Integer  in  =  getInput();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  Integer  in  =  getInput();	  while    (bitsCachedSize    <    2)    {    Integer    in    =    getInput();    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
653	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	add
654	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	add
655	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >>  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >>  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  >>  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	add
656	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	add
657	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	add
658	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	add
659	[BUG]  [BUGGY]  bitsCachedSize  =  0;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  bitsCachedSize  =  0;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	bitsCachedSize  =  0;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    0;    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
660	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8)  {  in.read();  bitsCachedSize  =  0;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8)  {  in.read();  bitsCachedSize  =  0;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8)  {  in.read();  bitsCachedSize  =  0;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    0;    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
661	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  8)  {  in.read();  bitsCachedSize  =  0;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  8)  {  in.read();  bitsCachedSize  =  0;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    0;    	compilable	  [FE]  AssertionError  	182	12	replace
662	[BUG]  [BUGGY]  while(count  <  8)  {  in.read();  bitsCachedSize  =  0;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  8)  {  in.read();  bitsCachedSize  =  0;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  8)  {  in.read();  bitsCachedSize  =  0;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    0;    	compilable	  [FE]  AssertionError  	182	12	replace
663	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  0;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  0;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    0;    	compilable	  [FE]  AssertionError  	182	12	replace
664	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  0;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  0;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  0;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    0;    	compilable	  [FE]  AssertionError  	182	12	replace
665	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  in.read();  bitsCachedSize  =  0;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  2)  {  in.read();  bitsCachedSize  =  0;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    0;    	compilable	  [FE]  AssertionError  	182	12	replace
666	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  in.read();  bitsCachedSize  =  0;  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  in.read();  bitsCachedSize  =  0;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  in.read();  bitsCachedSize  =  0;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    0;    	compilable	  [FE]  AssertionError  	182	12	replace
667	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize)  {  nextByte  =  in.read();	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	6	None	replace
668	[BUG]  [BUGGY]  while(count  <  =  bitsCachedSize)  {  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  bitsCachedSize)  {  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  bitsCachedSize)  {  nextByte  =  in.read();	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
669	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize)  {  long  nextByte  =  in.read();	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
670	[BUG]  [BUGGY]  while(nextByte  <  bitsCachedSize)  {  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  bitsCachedSize)  {  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  bitsCachedSize)  {  nextByte  =  in.read();	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	6	None	replace
671	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	34	None	replace
672	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  &&  bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
673	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  bitsCachedSize)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  bitsCachedSize)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  bitsCachedSize)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	34	None	replace
674	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	add
675	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	add
676	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	add
677	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	add
678	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	add
679	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0)  {  while  (bitsCachedSize  <  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0)  {  while  (bitsCachedSize  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0)    {    while  (bitsCachedSize  <  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
680	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
681	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0)    {    final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
682	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0)  {  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0)  {  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0)    {    final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
683	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0)  {  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0)  {  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0)    {    final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
684	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0)  {  final  long  nextByte  =  in.read();  if(nextByte  <  0)  {  return  bitsCachedSize;  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0)  {  final  long  nextByte  =  in.read();  if(nextByte  <  0)  {  return  bitsCachedSize;  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0)    {    final  long  nextByte  =  in.read();  if(nextByte  <  0)  {  return  bitsCachedSize;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
685	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
686	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	114	None	replace
687	[BUG]  [BUGGY]  while  (count  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    8    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
688	[BUG]  [BUGGY]  while  (count  <  =  8  &&  bitsCachedSize.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  8  &&  bitsCachedSize.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  8  &&  bitsCachedSize.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    8    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
689	[BUG]  [BUGGY]  while  (bytesCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    8    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
690	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  nextByte  =  in.read();	  while    (bitsCachedSize    <    1)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	24	None	replace
691	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
692	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.available()  >>  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.available()  >>  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.available()  >>  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
693	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
694	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.available()!=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.available()!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.available()!=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
695	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.available()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.available()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.available()  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
696	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
697	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.available()  [Delete]  MAXIMUM_CACHE_SIZE)  {  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.available()  [Delete]  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.available()  [Delete]  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ')'  expected	66	None	add
698	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  <  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  <  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  count  &&  bitsCachedSize  <  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	101	None	replace
699	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE))  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	101	12	replace
700	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE))  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)||(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE))  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	101	12	replace
701	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
702	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
703	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	200	None	replace
704	[BUG]  [BUGGY]  final  int[]  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int[]  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int[]  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
705	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsCachedSize  =  in.read();  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsCachedSize    =    in.read();    	non-compiled	[CE]  incompatible  types	36	None	replace
706	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
707	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  final  int[]  bitsCachedSize  =  in.read();  [CE]  incompatible  types  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  final  int[]  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  final  int[]  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsCachedSize    =    in.read();    	non-compiled	[CE]  incompatible  types	36	None	replace
708	[BUG]  [BUGGY]  int[]  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  int[]  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	int[]  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
709	[BUG]  [BUGGY]  while(count  <  1)  {  final  long  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  1)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  1)  {  final  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    1)    {    final    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	189	None	replace
710	[BUG]  [BUGGY]  while  (count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
711	[BUG]  [BUGGY]  while  (in.read()  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.read()  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.read()  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
712	[BUG]  [BUGGY]  while  ((  count  <  =  MAXIMUM_CACHE_SIZE)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  =  MAXIMUM_CACHE_SIZE)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  =  MAXIMUM_CACHE_SIZE)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
713	[BUG]  [BUGGY]  while(in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
714	[BUG]  [BUGGY]  while(in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
715	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  in.readInt();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  in.readInt();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  in.readInt();	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
716	[BUG]  [BUGGY]  while  (count  <  1)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  1)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	27	None	replace
717	[BUG]  [BUGGY]  InputStream  in  =  this.byteOrder.readInt();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.byteOrder.readInt();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.byteOrder.readInt();	  InputStream    in    =    byteOrder.readInt();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
718	[BUG]  [BUGGY]  InputStream  in  =  byteOrder.readUTF();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  byteOrder.readUTF();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  byteOrder.readUTF();	  InputStream    in    =    byteOrder.readInt();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
719	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder.readInt());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  readBits(byteOrder.readInt());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  readBits(byteOrder.readInt());	  InputStream    in    =    byteOrder.readInt();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
720	[BUG]  [BUGGY]  InputStream  in  =  byteOrder.readFully(MASKS);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  byteOrder.readFully(MASKS);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  byteOrder.readFully(MASKS);	  InputStream    in    =    byteOrder.readInt();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
721	[BUG]  [BUGGY]  InputStream  in  =  readBits(count,  byteOrder.readInt());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  readBits(count,  byteOrder.readInt());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  readBits(count,  byteOrder.readInt());	  InputStream    in    =    byteOrder.readInt();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
722	[BUG]  [BUGGY]  InputStream  in  =  byteOrder.readFully(MASKS,  count);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  byteOrder.readFully(MASKS,  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  byteOrder.readFully(MASKS,  count);	  InputStream    in    =    byteOrder.readInt();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
723	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	144	12	replace
724	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	144	12	replace
725	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
726	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
727	[BUG]  [BUGGY]  InputStream  in  =  this.in.readBits(count);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.in.readBits(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.readBits(count);	  InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
728	[BUG]  [BUGGY]  InputStream  in  =(int)this.in.read();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =(int)this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =(int)this.in.read();	  InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
729	[BUG]  [BUGGY]  InputStream  in  =  readBits(count,  this.in);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  readBits(count,  this.in);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  readBits(count,  this.in);	  InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
730	[BUG]  [BUGGY]  InputStream  in  =  this.in.readBits();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.in.readBits();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.readBits();	  InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
731	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
732	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  bitsCachedSize)&&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
733	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
734	[BUG]  [BUGGY]  while  ((  count  <  MASKS_SIZE)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MASKS_SIZE)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  MASKS_SIZE)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	112	None	replace
735	[BUG]  [BUGGY]  while  ((  count  <  =  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  =  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  =  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
736	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  <  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  <  bitsCachedSize)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
737	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  <  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.read()  <  bitsCachedSize)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
738	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  1)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  1)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
739	[BUG]  [BUGGY]  while  ((  count  <  1)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  1)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  1)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
740	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  2)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  2)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
741	[BUG]  [BUGGY]  while  ((  count  <  2)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  2)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  2)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
742	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  while  (count  <  bitsCachedSize  &&  in!=  null)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  while  (count  <  bitsCachedSize  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    while  (count  <  bitsCachedSize  &&  in!=  null)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	add
743	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	add
744	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	add
745	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	add
746	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  while  (count  <  bitsCachedSize  &&  in  ==  null)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  while  (count  <  bitsCachedSize  &&  in  ==  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    while  (count  <  bitsCachedSize  &&  in  ==  null)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	add
747	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  while  (count  <  bitsCachedSize  &&  in  >=  null)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  while  (count  <  bitsCachedSize  &&  in  >=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    while  (count  <  bitsCachedSize  &&  in  >=  null)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	add
748	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  final  int[]  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  final  int[]  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    final  int[]  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	add
749	[BUG]  [BUGGY]  while  (bytesCachedSize  <  =  8)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  =  8)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  =  8)  {	  while    (bytesCachedSize    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
750	[BUG]  [BUGGY]  while  (count  <  MASKS_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  MASKS_SIZE  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MASKS_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MASKS_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  MASKS_SIZE	49	None	replace
751	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	49	12	replace
752	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	49	12	replace
753	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.available()  >  0)  {	  while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	49	12	replace
754	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  0)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.available()  >  0)  {	  while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	49	12	replace
755	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	125	12	replace
756	[BUG]  [BUGGY]  while(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	125	12	replace
757	[BUG]  [BUGGY]  while(bytesCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bytesCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bytesCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	125	None	replace
758	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	add
759	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  not  a  statement	132	None	add
760	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	add
761	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	add
762	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    in.available()  >  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  not  a  statement	132	None	add
763	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  |&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  |&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  |&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
764	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	add
765	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
766	[BUG]  [BUGGY]  while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
767	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
768	[BUG]  [BUGGY]  while(count  <  1)  {  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  1)  {  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  1)  {  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	29	None	replace
769	[BUG]  [BUGGY]  while(count  <  1)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  1)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  1)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
770	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  in  =  new  BufferedInputStream(count);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in  =  new  BufferedInputStream(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  in  =  new  BufferedInputStream(count);	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	29	None	replace
771	[BUG]  [BUGGY]  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	10	None	replace
772	[BUG]  [BUGGY]  while(count  <  bitsOut)  {  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsOut)  {  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsOut)  {  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
773	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    8)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
774	[BUG]  [BUGGY]  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
775	[BUG]  [BUGGY]  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
776	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	197	12	replace
777	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	197	12	replace
778	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	197	12	replace
779	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	197	12	replace
780	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
781	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	197	12	replace
782	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	197	12	replace
783	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
784	[BUG]  [BUGGY]  while(count  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
785	[BUG]  [BUGGY]  while(bytesCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bytesCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bytesCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
786	[BUG]  [BUGGY]  while(in.available()  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.available()  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.available()  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
787	[BUG]  [BUGGY]  while(count  <  =  MAXIMUM_CACHE_SIZE  &&  bitsOut.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  MAXIMUM_CACHE_SIZE  &&  bitsOut.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  MAXIMUM_CACHE_SIZE  &&  bitsOut.available()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
788	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	199	12	replace
789	[BUG]  [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	199	12	replace
790	[BUG]  [BUGGY]  in.defaultRead(bytesCachedSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.defaultRead(bytesCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.defaultRead(bytesCachedSize);	  in.defaultRead();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
791	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(in,  count);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(in,  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(in,  count);	  in.defaultRead();    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
792	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	95	None	replace
793	[BUG]  [BUGGY]  while  (bytesCachedSize  <  =  8  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  =  8  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  =  8  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    8    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
794	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  8)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  8)  {  in.read();	  while    (bitsCachedSize    <    8)    {    in.read();    	compilable	  [FE]  AssertionError  	18	12	replace
795	[BUG]  [BUGGY]  while  (count  <  8)  {  in.read();  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  8)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  8)  {  in.read();	  while    (bitsCachedSize    <    8)    {    in.read();    	compilable	  [FE]  AssertionError  	18	12	replace
796	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8)  {  in.read();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8)  {  in.read();	  while    (bitsCachedSize    <    8)    {    in.read();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
797	[BUG]  [BUGGY]  while  (count  <  =  2)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  2)  {	  while    (bitsCachedSize    <    =    2)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
798	[BUG]  [BUGGY]  while  (count  <  2)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  2)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  2)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    2)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	85	None	replace
799	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  ';'  expected	97	None	replace
800	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
801	[BUG]  [BUGGY]  while(count  <  =  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
802	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	169	None	replace
803	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	169	None	replace
804	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
805	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	169	None	replace
806	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize)  {  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  bitsCachedSize)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize)  {  in.read();	  while    (count    <    bitsCachedSize)    {    in.read();    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
807	[BUG]  [BUGGY]  while  (count  <  bitsOut.length)  {  in.read();  [CE]  cannot  find  symbol  bitsOut  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsOut.length)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsOut.length)  {  in.read();	  while    (count    <    bitsCachedSize)    {    in.read();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	130	None	replace
808	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MASKS.length)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MASKS.length)  {  in.read();	  while    (count    <    bitsCachedSize)    {    in.read();    	compilable	  [FE]  AssertionError  	130	12	replace
809	[BUG]  [BUGGY]  while  (count  <  MASKS.length)  {  in.read();  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MASKS.length)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MASKS.length)  {  in.read();	  while    (count    <    bitsCachedSize)    {    in.read();    	compilable	  [FE]  AssertionError  	130	12	replace
810	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  in.read(bitsOut);  [CE]  cannot  find  symbol  bitsOut  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize)  {  in.read(bitsOut);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize)  {  in.read(bitsOut);	  while    (count    <    bitsCachedSize)    {    in.read();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	130	None	replace
811	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.available()  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	133	12	replace
812	[BUG]  [BUGGY]  while  (in.available()  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	133	12	replace
813	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	133	12	replace
814	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  MAXIMUM_CACHE_SIZE)&&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	133	12	replace
815	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
816	[BUG]  [BUGGY]  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  incomparable  types:  long  and  ByteOrder  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  incomparable  types:  long  and  ByteOrder	11	None	replace
817	[BUG]  [BUGGY]  while(in.read()  <  count)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
818	[BUG]  [BUGGY]  while(count  <  bitsOut)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsOut)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsOut)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
819	[BUG]  [BUGGY]  while(nextByte  <  bitsCachedSize)  {  [CE]  cannot  find  symbol  nextByte  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  bitsCachedSize)  {	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  cannot  find  symbol  nextByte	11	None	replace
820	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize)  {  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
821	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	136	12	replace
822	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	136	12	replace
823	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	136	12	replace
824	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	136	12	replace
825	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  readBits(count);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  readBits(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  readBits(count);	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    readBits(in);    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
826	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(count);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(count);	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    readBits(in);    	non-compiled	[CE]  possible  loss  of  precision	160	None	replace
827	[BUG]  [BUGGY]  while  (count  <  1)  {  final  int  bitsCachedSize  =  readBits(in);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  final  int  bitsCachedSize  =  readBits(in);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  1)  {  final  int  bitsCachedSize  =  readBits(in);	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    readBits(in);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	160	None	replace
828	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  final  int  bitsCachedSize  =  readBits(in);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  final  int  bitsCachedSize  =  readBits(in);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  final  int  bitsCachedSize  =  readBits(in);	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    readBits(in);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	160	None	replace
829	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(count,  in);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(count,  in);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(count,  in);	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    readBits(in);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	160	None	replace
830	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  =  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  bitsCachedSize)  {	  while    (bitsCachedSize    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
831	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&(bitsOut  <  =  MAXIMUM_CACHE_SIZE))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&(bitsOut  <  =  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&(bitsOut  <  =  MAXIMUM_CACHE_SIZE))  {	  while    (bitsCachedSize    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
832	[BUG]  [BUGGY]  while  (bitsOut  <  bitsCachedSize)  {  [CE]  cannot  find  symbol  bitsOut  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsOut  <  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsOut  <  bitsCachedSize)  {	  while    (bitsCachedSize    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	141	None	replace
833	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
834	[BUG]  [BUGGY]  final  int  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  ';'  expected	33	None	replace
835	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  final  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  final  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  final  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
836	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  in  =  getInputStream();  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  in  =  getInputStream();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	33	None	replace
837	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    8)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
838	[BUG]  [BUGGY]  while  (count  <  8)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  8)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  8)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    8)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	14	None	replace
839	[BUG]  [BUGGY]  in.readBits(count);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.readBits(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.readBits(count);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
840	[BUG]  [BUGGY]  in.readBits(count,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.readBits(count,  bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.readBits(count,  bitsCachedSize);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
841	[BUG]  [BUGGY]  in.defaultReadBits(count);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.defaultReadBits(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.defaultReadBits(count);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
842	[BUG]  [BUGGY]  in.readBits(bytesCachedSize,  count);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.readBits(bytesCachedSize,  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.readBits(bytesCachedSize,  count);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
843	[BUG]  [BUGGY]  in.readBits(bytesCachedSize);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.readBits(bytesCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.readBits(bytesCachedSize);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
844	[BUG]  [BUGGY]  in.readBits(count,  bitsOut);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.readBits(count,  bitsOut);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.readBits(count,  bitsOut);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
845	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
846	[BUG]  [BUGGY]  while  (bytesCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
847	[BUG]  [BUGGY]  while  (count  <  2)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  2)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  2)  {  InputStream  in  =  new  BufferedInputStream(in.read());	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
848	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  2)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  2)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  2)  {  InputStream  in  =  new  BufferedInputStream(in.read());	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
849	[BUG]  [BUGGY]  while  (count  <  8)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  8)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  8)  {  InputStream  in  =  new  BufferedInputStream(in.read());	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
850	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8)  {  InputStream  in  =  new  BufferedInputStream(in.read());	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
851	[BUG]  [BUGGY]  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
852	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
853	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
854	[BUG]  [BUGGY]  while(count  <  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
855	[BUG]  [BUGGY]  while(count  <  =  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
856	[BUG]  [BUGGY]  while(count  <  =  bitsCachedSize)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  =  bitsCachedSize)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  =  bitsCachedSize)  {  final  long  nextByte  =  in.read();	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
857	[BUG]  [BUGGY]  while  (count  <  MASKS.length)  {  final  long  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MASKS.length)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MASKS.length)  {  final  long  nextByte  =  in.read();	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	5	None	replace
858	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	add
859	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	77	None	add
860	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	77	None	add
861	[BUG]  [BUGGY]  while  (bytesCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	64	None	replace
862	[BUG]  [BUGGY]  while  (bytesCachedSize  <  bitsCachedSize)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bytesCachedSize  <  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  bitsCachedSize)  {	  while    (bitsCachedSize    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	141	None	replace
863	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
864	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
865	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
866	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
867	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
868	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
869	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.read()  >  0)  {	  while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	76	12	replace
870	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  >  0)  {	  while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	76	12	replace
871	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  bitsCachedSize)  {  in.read();	  while    (count    <    bitsCachedSize)    {    in.read();    	compilable	  [FE]  AssertionError  	130	12	replace
872	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  in.read();  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  bitsCachedSize)  {  in.read();	  while    (count    <    bitsCachedSize)    {    in.read();    	compilable	  [FE]  AssertionError  	130	12	replace
873	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  count)  {  in.read();	  while    (count    <    bitsCachedSize)    {    in.read();    	compilable	  [FE]  AssertionError  	130	12	replace
874	[BUG]  [BUGGY]  while(bitsCachedSize  <  count)  {  in.read();  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count)  {  in.read();	  while    (count    <    bitsCachedSize)    {    in.read();    	compilable	  [FE]  AssertionError  	130	12	replace
875	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
876	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
877	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
878	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
879	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_S  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_S  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_S	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
880	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
881	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIM  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIM  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIM	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
882	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  ==  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  ==  1)  {	  while    (bitsCachedSize    <    =    1)    {    	compilable	  [FE]  AssertionError  	60	12	replace
883	[BUG]  [BUGGY]  while  (bitsCachedSize  ==  1)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  ==  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  ==  1)  {	  while    (bitsCachedSize    <    =    1)    {    	compilable	  [FE]  AssertionError  	60	12	replace
884	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  >=  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  >=  1)  {	  while    (bitsCachedSize    <    =    1)    {    	compilable	  [FE]  AssertionError  	60	12	replace
885	[BUG]  [BUGGY]  while  (bitsCachedSize  >=  1)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  >=  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  >=  1)  {	  while    (bitsCachedSize    <    =    1)    {    	compilable	  [FE]  AssertionError  	60	12	replace
886	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  2)  {  final  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  2)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  2)  {  final  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    2)    {    final    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
887	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    8)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
888	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
889	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
890	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  >  0)  {	  while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	125	12	replace
891	[BUG]  [BUGGY]  while(bitsCachedSize  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  >  0)  {	  while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	125	12	replace
892	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    8    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	134	12	replace
893	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    8    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	134	12	replace
894	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  0  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	67	12	replace
895	[BUG]  [BUGGY]  while  (count  <  0  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  0  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	67	12	replace
896	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0)  {  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    in.read();    	compilable	  [FE]  AssertionError  	139	12	replace
897	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  in.read();  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    in.read();    	compilable	  [FE]  AssertionError  	139	12	replace
898	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  16  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  16  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  16  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
899	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    8)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
900	[BUG]  [BUGGY]  long  nextByte  =  in.read(bits);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  nextByte  =  in.read(bits);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  nextByte  =  in.read(bits);	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
901	[BUG]  [BUGGY]  long  nextByte  =  in.read(bytes);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  nextByte  =  in.read(bytes);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  nextByte  =  in.read(bytes);	  long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
902	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	199	12	replace
903	[BUG]  [BUGGY]  while(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	199	12	replace
904	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  in.available()  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  =  in.available()  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  in.available()  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
905	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
906	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
907	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
908	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	96	None	replace
909	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
910	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
911	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
912	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8)  {  InputStream  in  =  this.in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
913	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  InputStream  in  =  this.in.read();  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  incompatible  types	166	None	replace
914	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	add
915	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	add
916	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.read()!=  0)  {	  while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	57	12	replace
917	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()!=  0)  {	  while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	57	12	replace
918	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.read()  >=  0)  {	  while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	57	12	replace
919	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  0)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  >=  0)  {	  while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	57	12	replace
920	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  1)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  1)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  1)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    1)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
921	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  in.read(nextByte);  [CE]  cannot  find  symbol  nextByte  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in.read(nextByte);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  in.read(nextByte);	  while    (bitsCachedSize    <    1)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	24	None	replace
922	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	171	12	replace
923	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	171	12	replace
924	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
925	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
926	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
927	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE  -  1);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE  -  1);	  InputStream    in    =    new    BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE);    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
928	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
929	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
930	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
931	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
932	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
933	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
934	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
935	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
936	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
937	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
938	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    Integer  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
939	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
940	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
941	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
942	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
943	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
944	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
945	[BUG]  [BUGGY]  while(byteOrder  <  bitsCachedSize)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(byteOrder  <  bitsCachedSize)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(byteOrder  <  bitsCachedSize)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
946	[BUG]  [BUGGY]  while(count  <  bitsOut.length)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsOut.length)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsOut.length)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
947	[BUG]  [BUGGY]  while(bitsCachedSize  <  count)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
948	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	add
949	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	add
950	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.available();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	add
951	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	add
952	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  bitsCachedSize)&&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
953	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
954	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  bitsCachedSize)&&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
955	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
956	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  bitsCachedSize)&&  in.read()  <  0)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
957	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  0)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&  in.read()  <  0)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
958	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  2)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  2)  {	  while    (bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
959	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  8  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  =  8  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  8  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    8    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
960	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  8  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  =  8  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  8  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    8    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
961	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(bytes.read());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(bytes.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(bytes.read());	  InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
962	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(in,  readBits(count));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(in,  readBits(count));  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(in,  readBits(count));	  InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
963	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
964	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
965	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
966	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(in.read());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
967	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  Integer  in  =  getInput();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  Integer  in  =  getInput();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    Integer  in  =  getInput();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
968	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  this.in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
969	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  1)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  1)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  1)  {  InputStream  in  =  new  BufferedInputStream(in.read());	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
970	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  InputStream  in  =  new  BufferedInputStream(in.read());	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
971	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
972	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	95	None	replace
973	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(in.read());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
974	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  final  int  count  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  final  int  count  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE)    {    final  int  count  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
975	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while    (count    <    =    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	19	None	replace
976	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  bitsCachedSize)&&(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {	  while    (count    <    =    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	19	12	replace
977	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&(bitsCachedSize  >  MAXIMUM_CACHE_SIZE))  {	  while    (count    <    =    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	19	12	replace
978	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	120	12	replace
979	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	120	12	replace
980	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	120	12	replace
981	[BUG]  [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	120	12	replace
982	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
983	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    final  long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
984	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
985	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
986	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.available();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
987	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	109	12	replace
988	[BUG]  [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	109	12	replace
989	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
990	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
991	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
992	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  in  =  getInputStream();  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize)  {  in  =  getInputStream();	  while    (count    <    bitsCachedSize)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	9	None	replace
993	[BUG]  [BUGGY]  while(bitsCachedSize  <  count)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count)  {  InputStream  in  =  getInputStream();	  while    (count    <    bitsCachedSize)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
994	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
995	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
996	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final  long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	add
997	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.available();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	add
998	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  Integer.parseInt(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  Integer.parseInt(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  Integer.parseInt(bitsCachedSize);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	add
999	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
1000	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	177	None	replace
1001	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	177	None	replace
1002	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  final  int  nextByte  =  in.read();	  while    (bitsCachedSize    <    1)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	25	None	replace
1003	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  final  long  nextByte  =  in.read(count);  [CE]  no  suitable  method  found  for  read(int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  1)  {  final  long  nextByte  =  in.read(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  1)  {  final  long  nextByte  =  in.read(count);	  while    (bitsCachedSize    <    1)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	25	None	replace
1004	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  while  (in.available()  <  count  &&  bitsCachedSize  >  maxIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  while  (in.available()  <  count  &&  bitsCachedSize  >  maxIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    while  (in.available()  <  count  &&  bitsCachedSize  >  maxIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
1005	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(in.read());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
1006	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(in,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
1007	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream(count);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream(count);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
1008	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  1)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  1)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  1)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    1)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
1009	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  1)  {  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  1)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  1)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    1)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
1010	[BUG]  [BUGGY]  while(byteOrder  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(byteOrder  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(byteOrder  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
1011	[BUG]  [BUGGY]  while(byteOrder  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(byteOrder  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(byteOrder  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
1012	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  bitsCachedSize  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.available()  <  bitsCachedSize  &&  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
1013	[BUG]  [BUGGY]  while  (in.available()  <  bitsCachedSize  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  bitsCachedSize  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  bitsCachedSize  &&  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
1014	[BUG]  [BUGGY]  while  (in.available()  <  =  bitsCachedSize  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  =  bitsCachedSize  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  =  bitsCachedSize  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
1015	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  bitsCachedSize  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.available()  <  bitsCachedSize  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
1016	[BUG]  [BUGGY]  while  (in.available()  <  bitsCachedSize  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  bitsCachedSize  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  bitsCachedSize  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
1017	[BUG]  [BUGGY]  in.skipChild(bytesCachedSize);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.skipChild(bytesCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.skipChild(bytesCachedSize);	  in.skipChildren();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1018	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	113	12	replace
1019	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	113	12	replace
1020	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1021	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1022	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1023	[BUG]  [BUGGY]  while(bitsCachedSize  <  8)  {  final  int  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  final  int  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  8)  {  final  int  nextByte  =  in.read();	  while    (bitsCachedSize    <    8)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	16	None	replace
1024	[BUG]  [BUGGY]  while(bitsCachedSize  <  8)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  8)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    ByteInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
1025	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    ByteInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
1026	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  2)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  2)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  2)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    ByteInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
1027	[BUG]  [BUGGY]  InputStream  in  =  new  ByteInputStream(bits);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  ByteInputStream(bits);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  ByteInputStream(bits);	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    ByteInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
1028	[BUG]  [BUGGY]  in.defaultReadBits(count,  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.defaultReadBits(count,  bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.defaultReadBits(count,  bitsCachedSize);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
1029	[BUG]  [BUGGY]  in.defaultReadBits(bytesCachedSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.defaultReadBits(bytesCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.defaultReadBits(bytesCachedSize);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
1030	[BUG]  [BUGGY]  in.readBits(this.bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.readBits(this.bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.readBits(this.bitsCachedSize);	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
1031	[BUG]  [BUGGY]  while  (count  <  1)  {  final  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  final  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    final  InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
1032	[BUG]  [BUGGY]  while  (count  <  1)  {  final  int  count  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  final  int  count  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    final  int  count  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
1033	[BUG]  [BUGGY]  while  (count  <  1)  {  Integer  in  =  getInput();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  Integer  in  =  getInput();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    Integer  in  =  getInput();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
1034	[BUG]  [BUGGY]  while  (count  <  1)  {  final  int[]  bitsOut  =  new  int[size()  ];  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  final  int[]  bitsOut  =  new  int[size()  ];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    final  int[]  bitsOut  =  new  int[size()  ];	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
1035	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  1)  {  InputStream  in  =  this.in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  1)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  1)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
1036	[BUG]  [BUGGY]  While(bitsCachedSize  <  1)  {  InputStream  in  =  this.in.read();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  While(bitsCachedSize  <  1)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	While(bitsCachedSize  <  1)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  ';'  expected	161	None	replace
1037	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  2)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  2)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  2)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
1038	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
1039	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(bits);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(bits);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(bits);	  while    (bitsCachedSize    <    2)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1040	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
1041	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  2)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  2)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  2)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    2)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
1042	[BUG]  [BUGGY]  while(bitsCachedSize  <  count)  {  final  long  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count)  {  final  long  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    final    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	127	None	replace
1043	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count)  {  final  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count)  {  final  long  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    final    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
1044	[BUG]  [BUGGY]  while(bitsCachedSize  <  bitsCachedSize)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  bitsCachedSize)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  bitsCachedSize)  {  final  int  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    final    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	127	None	replace
1045	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
1046	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
1047	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1048	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_S  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_S  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_S	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
1049	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIM  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIM  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIM	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
1050	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
1051	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
1052	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
1053	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
1054	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
1055	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    final  long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
1056	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1057	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	178	None	replace
1058	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	178	None	replace
1059	[BUG]  [BUGGY]  InputStream  in  =  this.in.read(bits);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.in.read(bits);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.read(bits);	  InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
1060	[BUG]  [BUGGY]  InputStream  in  =  this.in.read(this.bits);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.in.read(this.bits);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.read(this.bits);	  InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
1061	[BUG]  [BUGGY]  InputStream  in  =  this.in.read(bytes);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.in.read(bytes);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.read(bytes);	  InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
1062	[BUG]  [BUGGY]  InputStream  in  =  readBits(this.in,  count);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  readBits(this.in,  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  readBits(this.in,  count);	  InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
1063	[BUG]  [BUGGY]  InputStream  in  =  readBits(this.in);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  readBits(this.in);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  readBits(this.in);	  InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
1064	[BUG]  [BUGGY]  while(bitsCachedSize  <  8)  {  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  8)  {  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	17	None	replace
1065	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
1066	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	197	12	replace
1067	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	197	12	replace
1068	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	add
1069	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	75	None	add
1070	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  Integer.parseInt(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  Integer.parseInt(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  Integer.parseInt(bitsCachedSize);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	add
1071	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  Integer.parseInt(ByteOrder.LITTLE_ENDIAN);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  Integer.parseInt(ByteOrder.LITTLE_ENDIAN);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  Integer.parseInt(ByteOrder.LITTLE_ENDIAN);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	add
1072	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	75	None	add
1073	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  0  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	78	12	replace
1074	[BUG]  [BUGGY]  while  (count  <  0  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  0  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	78	12	replace
1075	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  1)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  1)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  1)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1076	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	29	None	replace
1077	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	add
1078	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	add
1079	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    Integer  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	add
1080	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  getBitsCachedSize();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  getBitsCachedSize();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    Integer  bitsCachedSize  =  getBitsCachedSize();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	add
1081	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
1082	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	144	12	replace
1083	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	144	12	replace
1084	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
1085	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
1086	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
1087	[BUG]  [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	137	None	replace
1088	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1089	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1090	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1091	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1092	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1093	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
1094	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	add
1095	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
1096	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
1097	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  0)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  0)  {	  while    (bitsCachedSize    <    2)    {    final    int    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	194	None	replace
1098	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >=  0)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >=  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  >=  0)  {	  while    (bitsCachedSize    <    2)    {    final    int    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	194	None	replace
1099	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  ==  0)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  ==  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  ==  0)  {	  while    (bitsCachedSize    <    2)    {    final    int    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	194	None	replace
1100	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
1101	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
1102	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	add
1103	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  ==  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  ==  0)  {	  while    (bitsCachedSize    <    =    0)    {    	compilable	  [FE]  AssertionError  	175	11	replace
1104	[BUG]  [BUGGY]  while  (bitsCachedSize  ==  0)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  ==  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  ==  0)  {	  while    (bitsCachedSize    <    =    0)    {    	compilable	  [FE]  AssertionError  	175	11	replace
1105	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
1106	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1107	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  Integer.parseInt(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  Integer.parseInt(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  Integer.parseInt(bitsCachedSize);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
1108	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  Integer.parseInt(ByteOrder.LITTLE_ENDIAN);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  Integer.parseInt(ByteOrder.LITTLE_ENDIAN);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  Integer.parseInt(ByteOrder.LITTLE_ENDIAN);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
1109	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
1110	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
1111	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
1112	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
1113	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  count  <  =  8)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  count  <  =  8)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  count  <  =  8)  {	  while    (count    <    bitsCachedSize    &&    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
1114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  2)||(count  >  1))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  2)||(count  >  1))  {	  while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    	compilable	  [FE]  AssertionError  	41	12	replace
1115	[BUG]  [BUGGY]  while  ((  count  <  2)||(count  >  1))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  2)||(count  >  1))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  2)||(count  >  1))  {	  while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    	compilable	  [FE]  AssertionError  	41	12	replace
1116	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  1)||(count  >  2))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  1)||(count  >  2))  {	  while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    	compilable	  [FE]  AssertionError  	41	12	replace
1117	[BUG]  [BUGGY]  while  ((  count  <  1)||(count  >  2))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  1)||(count  >  2))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  1)||(count  >  2))  {	  while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    	compilable	  [FE]  AssertionError  	41	12	replace
1118	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1119	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  0);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  0);	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
1120	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  =  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
1121	[BUG]  [BUGGY]  InputStream  in  =  bitsOut.readInt();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  bitsOut.readInt();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  bitsOut.readInt();	  InputStream    in    =    this.in.readInt();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
1122	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    Integer    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
1123	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    Integer    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
1124	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    Integer    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	148	12	replace
1125	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    Integer    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	148	12	replace
1126	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
1127	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
1128	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  bitsCachedSize)  {	  while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	45	12	replace
1129	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  bitsCachedSize)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE  ||  count  >  bitsCachedSize)  {	  while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	45	12	replace
1130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	long  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	200	12	replace
1131	[BUG]  [BUGGY]  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  bitsCachedSize  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	200	12	replace
1132	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    bitsCachedSize)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	add
1133	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  final  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    bitsCachedSize)    {    final  long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	add
1134	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    bitsCachedSize)    {    InputStream  in  =  new  BufferedInputStream(in.read());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	add
1135	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  >  0)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	198	None	replace
1136	[BUG]  [BUGGY]  while(nextByte  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	5	None	replace
1137	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  =  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
1138	[BUG]  [BUGGY]  InputStream  in  =  readInt(byteOrder.readInt());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  readInt(byteOrder.readInt());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  readInt(byteOrder.readInt());	  InputStream    in    =    byteOrder.readInt();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1139	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	add
1140	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	add
1141	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
1142	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
1143	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count)  {  long  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
1144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  1;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  1;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    0;    	compilable	  [FE]  AssertionError  	182	12	replace
1145	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  1;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  1;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  1;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    0;    	compilable	  [FE]  AssertionError  	182	12	replace
1146	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(in.read());    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1147	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(in.read());    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1148	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  final  int  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  final  int  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize)  {  final  int  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
1149	[BUG]  [BUGGY]  while(bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
1150	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
1151	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
1152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  &&  in.read()  >  0)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	155	12	replace
1153	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  0)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  >  0)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	155	12	replace
1154	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  lastByte  =  in.read();  [CE]  cannot  find  symbol  lastByte  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  lastByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize)  {  lastByte  =  in.read();	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  lastByte	6	None	replace
1155	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  in.read(in);  [CE]  no  suitable  method  found  for  read(InputStream)  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  1)  {  in.read(in);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  1)  {  in.read(in);	  while    (bitsCachedSize    <    1)    {    in.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(InputStream)	28	None	replace
1156	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  1)  {  in.read();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  1)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  1)  {  in.read();	  while    (bitsCachedSize    <    1)    {    in.read();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1157	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1158	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1159	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1160	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1161	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
1162	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
1163	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(in.read());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
1164	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
1165	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	compilable	  [FE]  AssertionError  	193	12	replace
1166	[BUG]  [BUGGY]  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  0)  {	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	compilable	  [FE]  AssertionError  	193	12	replace
1167	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsOut)  {  [CE]  cannot  find  symbol  bitsOut  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsOut)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  bitsOut)  {	  while    (bitsCachedSize    <    =    bitsOut)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	174	None	replace
1168	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsOut.length)  {  [CE]  cannot  find  symbol  bitsOut  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsOut.length)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  bitsOut.length)  {	  while    (bitsCachedSize    <    =    bitsOut)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	174	None	replace
1169	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1170	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1171	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1172	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1173	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  readBits(in);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  readBits(in);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  readBits(in);	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    readBits(in);    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
1174	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  1)  {  final  int  bitsCachedSize  =  readBits(in);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  1)  {  final  int  bitsCachedSize  =  readBits(in);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  1)  {  final  int  bitsCachedSize  =  readBits(in);	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    readBits(in);    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
1175	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  readBits(count);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  readBits(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  readBits(count);	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    readBits(in);    	non-compiled	[CE]  possible  loss  of  precision	160	None	replace
1176	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
1177	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
1178	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
1179	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
1180	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  in.readInt();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  in.readInt();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  in.readInt();	  while    (bitsCachedSize    <    2)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
1181	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count)  {  final  int  bitsCachedSize  =  in.read();	  while    (count    <    bitsCachedSize)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
1182	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1183	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1184	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1185	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  long  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  long  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    long  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {	  	non-compiled	[CE]  not  a  statement	40	None	add
1186	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
1187	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
1188	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
1189	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  bitsCachedSize  &&  in!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  =  bitsCachedSize  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  bitsCachedSize  &&  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1190	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  0  &&  in!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  =  0  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  0  &&  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1191	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  bitsCachedSize  &&  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	compilable	  [FE]  AssertionError  	143	12	replace
1192	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize  &&  in!=  null)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  bitsCachedSize  &&  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	compilable	  [FE]  AssertionError  	143	12	replace
1193	[BUG]  [BUGGY]  while  (bitsCachedSize  <  &&  in!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  &&  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1194	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  count  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  count  &&  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	compilable	  [FE]  AssertionError  	143	2	replace
1195	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in!=  null)  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  count  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  count  &&  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	compilable	  [FE]  AssertionError  	143	2	replace
1196	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  2)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  2)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  2)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    2)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
1197	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	add
1198	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  long  bitsCachedSize  &&  in!=  null)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  long  bitsCachedSize  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    long  bitsCachedSize  &&  in!=  null)  {	  	non-compiled	[CE]  ';'  expected	142	None	add
1199	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  long  bitsCachedSize  =  in.read();  while(count  <  bitsCachedSize  &&  in!=  null)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  long  bitsCachedSize  =  in.read();  while(count  <  bitsCachedSize  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    long  bitsCachedSize  =  in.read();  while(count  <  bitsCachedSize  &&  in!=  null)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	add
1200	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  ==  0)  {  return  bitsCachedSize;  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  ==  0)  {  return  bitsCachedSize;  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    long  bitsCachedSize  =  in.read();  if(bitsCachedSize  ==  0)  {  return  bitsCachedSize;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	add
1201	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	add
1202	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	add
1203	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	add
1204	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	add
1205	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	add
1206	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	add
1207	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
1208	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
1209	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
1210	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
1211	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  0  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	54	12	replace
1212	[BUG]  [BUGGY]  while  (count  <  0  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  0  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  0  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	54	12	replace
1213	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.read()  ==  0)  {	  while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	54	12	replace
1214	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  0)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  ==  0)  {	  while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	54	12	replace
1215	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.read()  ==  1)  {	  while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	54	12	replace
1216	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  1)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  ==  1)  {	  while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	54	12	replace
1217	[BUG]  [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	186	None	replace
1218	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	186	None	replace
1219	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	186	None	replace
1220	[BUG]  [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	186	None	replace
1221	[BUG]  [BUGGY]  InputStream  in  =  isEnabled(Feature.QUOTE_FIELD_NAMES)?  getInputStream()  :  BYTE_SIZE;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  isEnabled(Feature.QUOTE_FIELD_NAMES)?  getInputStream()  :  BYTE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  isEnabled(Feature.QUOTE_FIELD_NAMES)?  getInputStream()  :  BYTE_SIZE;	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
1222	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
1223	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  this.in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
1224	[BUG]  [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize!=  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize!=  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	201	None	replace
1225	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
1226	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
1227	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
1228	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
1229	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  in.read(count);  [CE]  no  suitable  method  found  for  read(int)  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  in.read(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  in.read(count);	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	27	None	replace
1230	[BUG]  [BUGGY]  while(count  <  bitsByteSize.length)  {  [CE]  cannot  find  symbol  bitsByteSize  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsByteSize.length)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsByteSize.length)  {	  while(count    <    bitsOut.length)    {    	non-compiled	[CE]  cannot  find  symbol  bitsByteSize	184	None	replace
1231	[BUG]  [BUGGY]  while(bitsCachedSize  <  8)  {  final  int[]  bitsCachedSize  =  in.read();  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  final  int[]  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  8)  {  final  int[]  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsCachedSize    =    in.read();    	non-compiled	[CE]  incompatible  types	36	None	replace
1232	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  final  int[]  bitsCachedSize  =  in.read();  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  final  int[]  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  final  int[]  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsCachedSize    =    in.read();    	non-compiled	[CE]  incompatible  types	36	None	replace
1233	[BUG]  [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  long[]  bitsCachedSize  =  in.read();  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  long[]  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  long[]  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsCachedSize    =    in.read();    	non-compiled	[CE]  incompatible  types	36	None	replace
1234	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	187	None	replace
1235	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	187	None	replace
1236	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	187	None	replace
1237	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int  nextByte  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
1238	[BUG]  [BUGGY]  while(byteOrder  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(byteOrder  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(byteOrder  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
1239	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  final  int  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  final  int  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize)  {  final  int  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
1240	[BUG]  [BUGGY]  while(in.read()  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
1241	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
1242	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.available();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	106	None	replace
1243	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
1244	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
1245	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
1246	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
1247	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
1248	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
1249	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
1250	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	compilable	  [FE]  AssertionError  	35	12	replace
1251	[BUG]  [BUGGY]  while(bitsCachedSize  <  0)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	compilable	  [FE]  AssertionError  	35	12	replace
1252	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  1)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	compilable	  [FE]  AssertionError  	35	11	replace
1253	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	compilable	  [FE]  AssertionError  	35	11	replace
1254	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
1255	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
1256	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  <  bitsCachedSize)&&  Integer.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  <  bitsCachedSize)&&  Integer.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  ((  count  <  bitsCachedSize)&&  Integer.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	add
1257	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  1)  {  final  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  1)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  1)  {  final  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    1)    {    final    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
1258	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
1259	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE)),  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE)),  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE)),  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
1260	[BUG]  [BUGGY]  While  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  While  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	While  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    While    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	185	None	replace
1261	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
1262	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
1263	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.available();  [CE]  cannot  find  symbol  nextByte  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.available();    	non-compiled	[CE]  cannot  find  symbol  nextByte	106	None	replace
1264	[BUG]  [BUGGY]  final  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	200	None	replace
1265	[BUG]  [BUGGY]  long  nextByte  =  in.read();  if(nextByte  <  0)  {  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  long  nextByte  =  in.read();  if(nextByte  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  nextByte  =  in.read();  if(nextByte  <  0)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	200	None	replace
1266	[BUG]  [BUGGY]  while(in.read())  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read())  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read())  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	200	None	replace
1267	[BUG]  [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	200	None	replace
1268	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
1269	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    While  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
1270	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	add
1271	[BUG]  [BUGGY]  while(nextByte  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	88	None	replace
1272	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  while  (count  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  while  (count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  while  (count  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
1273	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  While  (count  <  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  While  (count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE)    {    While  (count  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
1274	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  while  (count  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  while  (count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();  while  (count  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
1275	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1276	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut.available()  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut.available()  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut.available()  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1277	[BUG]  [BUGGY]  while(in.available()  >  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  assign  a  value  to  final  variable  in  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.available()  >  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.available()  >  MAXIMUM_CACHE_SIZE)  {  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  in	172	None	replace
1278	[BUG]  [BUGGY]  while(in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
1279	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_S  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_S  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_S	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1280	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  in.read();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in.read();  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  in.read();  }	  while    (bitsCachedSize    <    1)    {    in.read();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
1281	[BUG]  [BUGGY]  while(bytesCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bytesCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bytesCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	64	None	replace
1282	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(in.read(),  bitsOut);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(in.read(),  bitsOut);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(in.read(),  bitsOut);	  InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
1283	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(in);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  BufferedInputStream(in);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(in);	  InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
1284	[BUG]  [BUGGY]  while(in.read()  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
1285	[BUG]  [BUGGY]  while(bytesCachedSize  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bytesCachedSize  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bytesCachedSize  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
1286	[BUG]  [BUGGY]  while(in.read()  <  count)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
1287	[BUG]  [BUGGY]  InputStream  in  =  new  ByteInputStream(0,  count);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  ByteInputStream(0,  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  ByteInputStream(0,  count);	  InputStream    in    =    new    ByteInputStream(count);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
1288	[BUG]  [BUGGY]  InputStream  in  =  new  ByteInputStream(in.read());  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  new  ByteInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  ByteInputStream(in.read());	  InputStream    in    =    new    ByteInputStream(count);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
1289	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  While  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  While  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    While  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	108	None	add
1290	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  maxIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  maxIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  maxIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
1291	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
1292	[BUG]  [BUGGY]  while(nextByte  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	95	None	replace
1293	[BUG]  [BUGGY]  while(count  <  bitsOut)  {  [CE]  cannot  find  symbol  bitsOut  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsOut)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsOut)  {	  while    (count    <    1)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	59	None	replace
1294	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
1295	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
1296	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  bitsCachedSize  &&  in.read()  <  2)  {	  while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	52	12	replace
1297	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  2)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  2)  {	  while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	52	12	replace
1298	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()!=    MAXIMUM_CACHE_SIZE)    {    While  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
1299	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  InputStream  in  =  new  BufferedInputStream(count);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  InputStream  in  =  new  BufferedInputStream(count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  InputStream  in  =  new  BufferedInputStream(count);	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
1300	[BUG]  [BUGGY]  while(in.read()  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
1301	[BUG]  [BUGGY]  final  int  nextByte  =  in.read();  if(nextByte  <  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  int  nextByte  =  in.read();  if(nextByte  <  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  int  nextByte  =  in.read();  if(nextByte  <  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	replace
1302	[BUG]  [BUGGY]  final  long  nextByte  =  in.read();  if(nextByte  <  ByteOrder.LITTLE_ENDIAN)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  long  nextByte  =  in.read();  if(nextByte  <  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  long  nextByte  =  in.read();  if(nextByte  <  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    if(nextByte    >=    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	replace
1303	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  2)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	compilable	  [FE]  AssertionError  	35	11	replace
1304	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	compilable	  [FE]  AssertionError  	35	11	replace
1305	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  long[]  bitsOut  =  new  long[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  long[]  bitsOut  =  new  long[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	compilable	  [FE]  AssertionError  	35	12	replace
1306	[BUG]  [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  long[]  bitsOut  =  new  long[bitsCachedSize];  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  long[]  bitsOut  =  new  long[bitsCachedSize];  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  long[]  bitsOut  =  new  long[bitsCachedSize];	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsOut    =    new    int[bitsCachedSize];    	compilable	  [FE]  AssertionError  	35	12	replace
1307	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
1308	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
1309	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
1310	[BUG]  [BUGGY]  while(in  <  bitsCachedSize)  {  InputStream  in  =  getInputStream();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in  <  bitsCachedSize)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in  <  bitsCachedSize)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	33	None	replace
1311	[BUG]  [BUGGY]  while(in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
1312	[BUG]  [BUGGY]  while(in  <  MAXIMUM_CACHE_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	33	None	replace
1313	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut.read()  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut.read()  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut.read()  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
1314	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
1315	[BUG]  [BUGGY]  while  (count  <  1)  {  long  bitsOut  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  long  bitsOut  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    long  bitsOut  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
1316	[BUG]  [BUGGY]  while  (count  <  1)  {  final  int  bitsOut  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  final  int  bitsOut  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    final  int  bitsOut  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
1317	[BUG]  [BUGGY]  while  (count  <  1)  {  final  long  bitsOut  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  final  long  bitsOut  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    final  long  bitsOut  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
1318	[BUG]  [BUGGY]  while  (count  <  1)  {  long  nextByte  =  in.read();  if(nextByte  <  1)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  1)  {  long  nextByte  =  in.read();  if(nextByte  <  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    1)    {    long  nextByte  =  in.read();  if(nextByte  <  1)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	add
1319	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
1320	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  ';'  expected	188	None	replace
1321	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  bitsCachedSize)&&  in.read()  >  0)  {	  while    (count    <    =    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	19	12	replace
1322	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  >  0)  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  >  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&  in.read()  >  0)  {	  while    (count    <    =    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	19	12	replace
1323	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
1324	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  ';'  expected	97	None	replace
1325	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1326	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
1327	[BUG]  [BUGGY]  while(in.read()  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
1328	[BUG]  [BUGGY]  while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
1329	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    8    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
1330	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  8  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  8  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  8  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    8    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
1331	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  ||  count  >  bitsOut.length)  {  [CE]  cannot  find  symbol  bitsOut  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  ||  count  >  bitsOut.length)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  ||  count  >  bitsOut.length)  {	  while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	45	None	replace
1332	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  bitsCachedSize)&&(count  >  MAXIMUM_CACHE_SIZE))  {	  while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	45	12	replace
1333	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&(count  >  MAXIMUM_CACHE_SIZE))  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&(count  >  MAXIMUM_CACHE_SIZE))  {	  while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	45	12	replace
1334	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE))  {	  while    (count    <    bitsCachedSize)    {    while    (count    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1335	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&(count  <  =  MAXIMUM_CACHE_SIZE))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&(count  <  =  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&(count  <  =  MAXIMUM_CACHE_SIZE))  {	  while    (count    <    bitsCachedSize)    {    while    (count    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1336	[BUG]  [BUGGY]  while(bitsCachedSize  <  8)  {  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  8)  {  nextByte  =  in.read();	  while    (bitsCachedSize    <    8)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	13	None	replace
1337	[BUG]  [BUGGY]  while(bitsCachedSize  <  8)  {  final  int  bitsCachedSize  =  this.in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  final  int  bitsCachedSize  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  8)  {  final  int  bitsCachedSize  =  this.in.read();	  while    (bitsCachedSize    <    8)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	14	None	replace
1338	[BUG]  [BUGGY]  while(bytesCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  cannot  find  symbol  bytesCachedSize  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bytesCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bytesCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol  bytesCachedSize	157	None	replace
1339	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  0  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(in.read()  <  0  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	157	12	replace
1340	[BUG]  [BUGGY]  while(in.read()  <  0  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  0  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  0  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	157	12	replace
1341	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
1342	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
1343	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  While  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  While  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    While  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
1344	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  while  (in.available()  >=  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  while  (in.available()  >=  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    while  (in.available()  >=  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
1345	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  while  (in.available()  <  count  &&  bitscachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  while  (in.available()  <  count  &&  bitscachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    while  (in.available()  <  count  &&  bitscachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	add
1346	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
1347	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  8))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  8))  {	  while    (bitsCachedSize    <    8)    {    While    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	181	11	replace
1348	[BUG]  [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  8))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  8))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  bitsCachedSize  <  1)||(bitsCachedSize  <  8))  {	  while    (bitsCachedSize    <    8)    {    While    (bitsCachedSize    <    8)    {    	compilable	  [FE]  AssertionError  	181	11	replace
1349	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    While  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
1350	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
1351	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
1352	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  <  maxIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (count  <  bitsCachedSize  &&  in.read()  <  maxIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (count  <  bitsCachedSize  &&  in.read()  <  maxIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
1353	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  While  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  While  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    While  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	154	None	add
1354	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	add
1355	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  |&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  |&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  |&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
1356	[BUG]  [BUGGY]  while(in.read()  <  bitsCachedSize)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  bitsCachedSize)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  bitsCachedSize)  {  InputStream  in  =  new  BufferedInputStream(in.read());	  while    (count    <    bitsCachedSize)    {    InputStream    in    =    new    BufferedInputStream(in.read());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
1357	[BUG]  [BUGGY]  while(bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  0;  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  0;  }	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    0;    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
1358	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  1;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  1;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    0;    	compilable	  [FE]  AssertionError  	182	12	replace
1359	[BUG]  [BUGGY]  while(bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  1;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  1;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  1;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    0;    	compilable	  [FE]  AssertionError  	182	12	replace
1360	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1361	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1362	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
1363	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
1364	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
1365	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available();    	compilable	  [FE]  AssertionError  	168	12	replace
1366	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
1367	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
1368	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
1369	[BUG]  [BUGGY]  while(nextByte  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
1370	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte!=    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
1371	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  count)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  count)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  count)  {	  while    (bitsCachedSize    <    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
1372	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	add
1373	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  1)  {  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	162	12	replace
1374	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  int  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	162	12	replace
1375	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
1376	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
1377	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  in.read();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  in.read();  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize)  {  in.read();  }	  while    (count    <    bitsCachedSize)    {    in.read();    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
1378	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  this.in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  this.in.read();	  while    (bitsCachedSize    <    2)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	85	None	replace
1379	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
1380	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    ||    count    >    MAXIMUM_CACHE_SIZE)    {    While  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	44	None	add
1381	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    While  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	77	None	add
1382	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    While  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	75	None	add
1383	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	add
1384	[BUG]  [BUGGY]  while(bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  8;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  8;  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  8;  }	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    8;    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
1385	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  8;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  8;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    8;    	compilable	  [FE]  AssertionError  	183	12	replace
1386	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  8;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  8;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  in.read();  bitsCachedSize  =  8;	  while    (bitsCachedSize    <    8)    {    in.read();    bitsCachedSize    =    8;    	compilable	  [FE]  AssertionError  	183	12	replace
1387	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();  while(bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
1388	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
1389	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  &&  in.read()  <  maxIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  &&  in.read()  <  maxIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  0  &&  in.read()  <  maxIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	add
1390	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1391	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1392	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1393	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1394	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1395	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  short  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  short  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  short  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1396	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1397	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1398	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    bitsCachedSize)    {    long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	add
1399	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  long  bitsCachedSize  =  in.read();  while(bitsCachedSize  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  long  bitsCachedSize  =  in.read();  while(bitsCachedSize  <  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    bitsCachedSize)    {    long  bitsCachedSize  =  in.read();  while(bitsCachedSize  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	140	None	add
1400	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  InputStream  in  =  this.in.read();  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    8)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  incompatible  types	166	None	replace
1401	[BUG]  [BUGGY]  final  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  final  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	final  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {	  while    (bitsCachedSize    <    2)    {    long    bitsCachedSize    =    in.read();    if(bitsCachedSize    <    2)    {    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	193	None	replace
1402	[BUG]  [BUGGY]  while(in  <  2)  {  Integer  in  =  getInput();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in  <  2)  {  Integer  in  =  getInput();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in  <  2)  {  Integer  in  =  getInput();	  while    (bitsCachedSize    <    2)    {    Integer    in    =    getInput();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	164	None	replace
1403	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  byte  nextByte  =  in.read();  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  byte  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  byte  nextByte  =  in.read();	  while    (bitsCachedSize    <    1)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
1404	[BUG]  [BUGGY]  in.setChildCount(in.read());  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.setChildCount(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.setChildCount(in.read());	  in.skipChildren();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
1405	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  this.in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  this.in.read();	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	27	None	replace
1406	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while(bitsCachedSize    <    =    MAXIMUM_CACHE_SIZE    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	198	None	replace
1407	[BUG]  [BUGGY]  while(count  <  bitsByte.length)  {  [CE]  cannot  find  symbol  bitsByte  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsByte.length)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsByte.length)  {	  while(count    <    bitsOut.length)    {    	non-compiled	[CE]  cannot  find  symbol  bitsByte	184	None	replace
1408	[BUG]  [BUGGY]  while(count  <  bitsCachedSize).length)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize).length)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize).length)  {	  while(count    <    bitsOut.length)    {    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
1409	[BUG]  [BUGGY]  while(nextByte  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	31	None	replace
1410	[BUG]  [BUGGY]  while(nextByte  <  MAXIMUM_CACHE_SIZE)  {  final  int  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  MAXIMUM_CACHE_SIZE)  {  final  int  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  MAXIMUM_CACHE_SIZE)  {  final  int  nextByte  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	31	None	replace
1411	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  out.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  out.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  out.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	add
1412	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  maxIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  maxIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  maxIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	add
1413	[BUG]  [BUGGY]  in.read();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.read();	  in.defaultReadBits();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
1414	[BUG]  [BUGGY]  while(nextByte  <  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	32	None	replace
1415	[BUG]  [BUGGY]  while(nextByte  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	32	None	replace
1416	[BUG]  [BUGGY]  while(in.read()  <  bitsCachedSize)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  bitsCachedSize)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  bitsCachedSize)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
1417	[BUG]  [BUGGY]  while(bytesCachedSize  <  bitsCachedSize)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bytesCachedSize  <  bitsCachedSize)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bytesCachedSize  <  bitsCachedSize)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
1418	[BUG]  [BUGGY]  while(bitsOut  <  count)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsOut  <  count)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsOut  <  count)  {  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
1419	[BUG]  [BUGGY]  while(in  <  bitsCachedSize)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in  <  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in  <  bitsCachedSize)  {	  while    (count    <    bitsCachedSize)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	9	None	replace
1420	[BUG]  [BUGGY]  while(count  <  bitsOut)  {  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  bitsOut  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsOut)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsOut)  {  InputStream  in  =  getInputStream();	  while    (count    <    bitsCachedSize)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	9	None	replace
1421	[BUG]  [BUGGY]  while(in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1422	[BUG]  [BUGGY]  while(in.read()  <  count  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count  &&  bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1423	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  <  bitsCachedSize)&&  in.Read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  <  bitsCachedSize)&&  in.Read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  ((  count  <  bitsCachedSize)&&  in.Read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	add
1424	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  <  bitsCachedSize)&&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  ((  count  <  bitsCachedSize)&&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  ((  count  <  bitsCachedSize)&&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	add
1425	[BUG]  [BUGGY]  while(nextByte  <  1)  {  final  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  1)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  1)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    1)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	25	None	replace
1426	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	add
1427	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  for(int  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  for(int  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    for(int  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
1428	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  for(int  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(nextByte  <  =  0)  {  return  bitsCached;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  for(int  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(nextByte  <  =  0)  {  return  bitsCached;  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    for(int  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  if(nextByte  <  =  0)  {  return  bitsCached;  }	  	non-compiled	[CE]  ';'  expected	124	None	add
1429	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
1430	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  for(int  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  for(int  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    for(int  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	124	None	add
1431	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  final  InputStream  in  =  getInputStream();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  final  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  final  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    1)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
1432	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  bitsCachedSize  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  bitsCachedSize)  {  bitsCachedSize  =  this.in.read();	  while    (count    <    bitsCachedSize)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	128	12	replace
1433	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  bitsCachedSize  =  this.in.read();  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  bitsCachedSize  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize)  {  bitsCachedSize  =  this.in.read();	  while    (count    <    bitsCachedSize)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	128	12	replace
1434	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  bitsCachedSize  =  in.readInt();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  bitsCachedSize  =  in.readInt();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize)  {  bitsCachedSize  =  in.readInt();	  while    (count    <    bitsCachedSize)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
1435	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  bitsCachedSize)&&  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	compilable	  [FE]  AssertionError  	143	12	replace
1436	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in!=  null)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	compilable	  [FE]  AssertionError  	143	12	replace
1437	[BUG]  [BUGGY]  while  (bitsCachedSize  <  <  &&  in!=  null)  {  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  <  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  <  &&  in!=  null)  {	  while    (count    <    bitsCachedSize    &&    in!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
1438	[BUG]  [BUGGY]  InputStream  in  =  this.in.read(ByteOrder.SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.in.read(ByteOrder.SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.read(ByteOrder.SIZE);	  InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
1439	[BUG]  [BUGGY]  InputStream  in  =  this.in.read(ByteOrder.BYTE_ENDIAN);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.in.read(ByteOrder.BYTE_ENDIAN);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.read(ByteOrder.BYTE_ENDIAN);	  InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
1440	[BUG]  [BUGGY]  InputStream  in  =  this.in.read(this.bitsOut,  count);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.in.read(this.bitsOut,  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.read(this.bitsOut,  count);	  InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
1441	[BUG]  [BUGGY]  InputStream  in  =  this.in.read(ByteOrder.BASE_SIZE);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  this.in.read(ByteOrder.BASE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.read(ByteOrder.BASE_SIZE);	  InputStream    in    =    this.in.read();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
1442	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
1443	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
1444	[BUG]  [BUGGY]  while(nextByte  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	104	None	replace
1445	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    Integer    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
1446	[BUG]  [BUGGY]  InputStream  in  =  readInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  readInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  readInputStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
1447	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  readBits(in);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  readBits(in);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  readBits(in);	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    readBits(in);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	160	None	replace
1448	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(in,  count);  [CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(in,  count);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(in,  count);	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    readBits(in);    	non-compiled	[CE]  method  readBits  in  class  BitInputStream  cannot  be  applied  to  given  types;	160	None	replace
1449	[BUG]  [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(in.read());  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(in.read());  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(in.read());	  while    (bitsCachedSize    <    1)    {    final    int    bitsCachedSize    =    readBits(in);    	non-compiled	[CE]  possible  loss  of  precision	160	None	replace
1450	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  ||  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  bitsCachedSize  ||  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	78	12	replace
1451	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  ||  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  ||  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  ||  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize    &&    in.read()    >=    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	78	12	replace
1452	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  if(nextByte  <  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  if(nextByte  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  if(nextByte  <  0)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(bytesCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
1453	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  <  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  <  0)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  <  0)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(bytesCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
1454	[BUG]  [BUGGY]  while(count  <  bitsCachedSize)  {  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize)  {  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  }  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize)  {  if(nextByte  <  =  MAXIMUM_CACHE_SIZE)  {  nextByte  =  in.read();  }	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
1455	[BUG]  [BUGGY]  while(count  <  bitsOut.length)  {  nextByte  =  in.read();  [CE]  cannot  find  symbol  bitsOut  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsOut.length)  {  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsOut.length)  {  nextByte  =  in.read();	  while    (count    <    bitsCachedSize)    {    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	6	None	replace
1456	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
1457	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    While  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
1458	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
1459	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0)  {  in.read();  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0)  {  in.read();  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0)    {    in.read();  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
1460	[BUG]  [BUGGY]  InputStream  in  =  byteOrder.readFully(MASKS_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  InputStream  in  =  byteOrder.readFully(MASKS_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  byteOrder.readFully(MASKS_SIZE);	  InputStream    in    =    byteOrder.readInt();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1461	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1462	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	113	12	replace
1463	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.read();    	compilable	  [FE]  AssertionError  	113	12	replace
1464	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)||(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  bitsCachedSize)||(count  >  MAXIMUM_CACHE_SIZE))  {	  while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    	compilable	  [FE]  AssertionError  	41	12	replace
1465	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)||(count  >  MAXIMUM_CACHE_SIZE))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  ((  count  <  bitsCachedSize)||(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)||(count  >  MAXIMUM_CACHE_SIZE))  {	  while    ((    count    <    MAXIMUM_CACHE_SIZE)||(count    >    MAXIMUM_CACHE_SIZE))    {    	compilable	  [FE]  AssertionError  	41	12	replace
1466	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while((  count  <  bitsCachedSize)&&  in.read()  <  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while((  count  <  bitsCachedSize)&&  in.read()  <  2)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
1467	[BUG]  [BUGGY]  while((  count  <  bitsCachedSize)&&  in.read()  <  2)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while((  count  <  bitsCachedSize)&&  in.read()  <  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while((  count  <  bitsCachedSize)&&  in.read()  <  2)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
1468	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while((  count  <  bitsCachedSize)&&  in.read()  <  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while((  count  <  bitsCachedSize)&&  in.read()  <  1)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
1469	[BUG]  [BUGGY]  while((  count  <  bitsCachedSize)&&  in.read()  <  1)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while((  count  <  bitsCachedSize)&&  in.read()  <  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while((  count  <  bitsCachedSize)&&  in.read()  <  1)  {	  while    ((    count    <    bitsCachedSize)&&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	112	12	replace
1470	[BUG]  [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  MAXIMUM_CACHE_SIZE  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
1471	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1472	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	169	None	replace
1473	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();  while(bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	add
1474	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    0    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	add
1475	[BUG]  [BUGGY]  while  (in.available()  <  bitsCachedSize  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  bitsCachedSize  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  bitsCachedSize  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
1476	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  bitsCachedSize  &&  count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.available()  <  bitsCachedSize  &&  count  <  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
1477	[BUG]  [BUGGY]  while  (in.available()  <  bitsCachedSize  &&  count  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (in.available()  <  bitsCachedSize  &&  count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  bitsCachedSize  &&  count  <  MAXIMUM_CACHE_SIZE)  {	  while    (in.available()    <    count    &&    bitsCachedSize    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	62	12	replace
1478	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
1479	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
1480	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	186	None	replace
1481	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  bitsCachedSize)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  bitsCachedSize)  {	  while(bitsCachedSize    <    =    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
1482	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  count  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  count  <  =  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  count  <  =  1)  {	  while    (count    <    bitsCachedSize    &&    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
1483	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  count  <  =  2)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  count  <  =  2)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  count  <  =  2)  {	  while    (count    <    bitsCachedSize    &&    count    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
1484	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
1485	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  While  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in.available()    >=    MAXIMUM_CACHE_SIZE)    {    While  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
1486	[BUG]  [BUGGY]  while(in.read()  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  ';'  expected	99	None	replace
1487	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bytesCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
1488	[BUG]  [BUGGY]  while(bytesCachedSize  <  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bytesCachedSize  <  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bytesCachedSize  <  0  ||  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    0    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
1489	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
1490	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	146	None	replace
1491	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final    int    bitsCachedSize    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  bitsCachedSize	146	None	replace
1492	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut.length  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1493	[BUG]  [BUGGY]  while(in.read()  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1494	[BUG]  [BUGGY]  while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1495	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(count  <  bitsCachedSize  &&  in.available()  >  1)  {	  while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	49	12	replace
1496	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.available()  >  1)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.available()  >  1)  {	  while    (count    <    bitsCachedSize    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	49	12	replace
1497	[BUG]  [BUGGY]  while(in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1498	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  final  int[]  bitsCachedSize  =  in.read();  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  final  int[]  bitsCachedSize  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  final  int[]  bitsCachedSize  =  in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final    int[]    bitsCachedSize    =    in.read();    	non-compiled	[CE]  incompatible  types	36	None	replace
1499	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(in.read());    bitsCachedSize    =    in.available();    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1500	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(in.read());    bitsCachedSize    =    in.available();    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
1501	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(in.read());    bitsCachedSize    =    in.available();    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
1502	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  While  (count  <  bitsCachedSize  &&  in!=  null)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  While  (count  <  bitsCachedSize  &&  in!=  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    While  (count  <  bitsCachedSize  &&  in!=  null)  {	  	non-compiled	[CE]  ';'  expected	142	None	add
1503	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  while  (count  <  bitsCachedSize  &&  in  >>  null)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  while  (count  <  bitsCachedSize  &&  in  >>  null)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize    &&    in!=    null)    {    while  (count  <  bitsCachedSize  &&  in  >>  null)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	add
1504	[BUG]  [BUGGY]  while(count  <  bitsOut.length)  {  final  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  bitsOut  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsOut.length)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsOut.length)  {  final  long  nextByte  =  in.read();	  while    (count    <    bitsCachedSize)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  bitsOut	5	None	replace
1505	[BUG]  [BUGGY]  while(in  <  bitsCachedSize)  {  InputStream  in  =  this.in.read();  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in  <  bitsCachedSize)  {  InputStream  in  =  this.in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in  <  bitsCachedSize)  {  InputStream  in  =  this.in.read();	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    this.in.read();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	138	None	replace
1506	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.pars	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    nextByte    =    in.read();    if(nextByte    ==    ByteOrder.LITTLE_ENDIAN)    {    return    Long.parseLong(bitsCachedSize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
1507	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  While  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  While  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    While  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	42	None	add
1508	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
1509	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MESSAGE_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MESSAGE_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MESSAGE_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
1510	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  lastByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  lastByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    MAXIMUM_CACHE_SIZE    ||    count    >    MAXIMUM_CACHE_SIZE)    {    while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  lastByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
1511	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
1512	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	197	12	replace
1513	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	197	12	replace
1514	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	197	12	replace
1515	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	compilable	  [FE]  AssertionError  	197	12	replace
1516	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    in.available()    -    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
1517	[BUG]  [BUGGY]  while(bitsCachedSize  <  2)  {  final  int  nextByte  =  in.read();  [CE]  variable  nextByte  is  already  defined  in  method  readBits(int)  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  2)  {  final  int  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  2)  {  final  int  nextByte  =  in.read();	  while    (bitsCachedSize    <    2)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  variable  nextByte  is  already  defined  in  method  readBits(int)	83	None	replace
1518	[BUG]  [BUGGY]  while(nextByte  <  2)  {  final  long  nextByte  =  in.read();  [CE]  cannot  find  symbol  nextByte  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(nextByte  <  2)  {  final  long  nextByte  =  in.read();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(nextByte  <  2)  {  final  long  nextByte  =  in.read();	  while    (bitsCachedSize    <    2)    {    final    long    nextByte    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  nextByte	83	None	replace
1519	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  bitsOut.read()  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  =  bitsOut.read()  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  bitsOut.read()  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1520	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	compilable	  [FE]  AssertionError  	98	12	replace
1521	[BUG]  [BUGGY]  while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    getInputStream();    	compilable	  [FE]  AssertionError  	98	12	replace
1522	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  While(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  While(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    While(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
1523	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  >=  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  while(bitsCachedSize  >=  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    while(bitsCachedSize  >=  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	add
1524	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize    <    count    &&    in.read()    ==    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  ';'  expected	119	None	add
1525	[BUG]  [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	177	None	replace
1526	[BUG]  [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  0  ||  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long    bitsCachedSize    =    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ';'  expected	177	None	replace
1527	[BUG]  [BUGGY]  while(in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while(in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(in.read()  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream    in    =    new    BufferedInputStream(bitsCachedSize);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
1528	[BUG]  [BUGGY]  while  (count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  count)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(     "count  must  not  be  negative  or  greater  than       "  +  MAXIMUM_CACHE_SIZE);  }      [BUGGY]  while  (count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  count)  {  [BUGGY]      final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  count)  {	  while    (count    <    =    bitsCachedSize    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
