bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  2)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  2)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  2)  {	  while    (bitsCachedSize    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  0)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  0)  {	  while    (bitsCachedSize    <    2)    {    	compilable	  [FE]  AssertionError  	19	12	replace
3	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  0)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  0)  {	  while    (bitsCachedSize    <    2)    {    	compilable	  [FE]  AssertionError  	19	12	replace
4	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  while  (count  <  bitsCachedSize)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize)  {  while  (count  <  bitsCachedSize)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize)    {    while  (count  <  bitsCachedSize)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
5	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
6	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize)  {  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
7	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize)    {    final  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
8	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize)    {    final  long  nextByte  =  in.read();  if(nextByte  >=  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
9	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize)  {  InputStream  in  =  getInputStream();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
10	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize)  {  final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize)    {    final  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
11	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
12	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  while  (bitsCachedSize  <  8)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  8)  {  while  (bitsCachedSize  <  8)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    8)    {    while  (bitsCachedSize  <  8)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
13	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  8)  {  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    8)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
14	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  8)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    8)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
15	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  8)  {  InputStream  in  =  getInputStream();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    8)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
16	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  8)  {  final  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    8)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
17	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  8)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    8)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
18	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  8)  {  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    8)    {    in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
19	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  =  bitsCachedSize)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize)  {	  while    (bitsCachedSize    <    =    count)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    =    count)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  8)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  8)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  8)  {	  while    (bitsCachedSize    <    =    count)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  16)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  16)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  16)  {	  while    (bitsCachedSize    <    =    count)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  while  (bitsCachedSize  <  1)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  1)  {  while  (bitsCachedSize  <  1)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    1)    {    while  (bitsCachedSize  <  1)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
24	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  1)  {  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    1)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
25	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  1)  {  final  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    1)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
26	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  1)  {  InputStream  in  =  getInputStream();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    1)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
27	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    1)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
28	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  1)  {  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    1)    {    in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
29	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  1)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    1)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
30	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
31	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
32	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
33	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
34	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
35	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsOut  =  new  int[bitsCachedSize];  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final  int[]  bitsOut  =  new  int[bitsCachedSize];	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
36	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  int[]  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final  int[]  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	5	12	replace
38	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	5	12	replace
39	[BUG]  [BUGGY]  while  (bytesCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bytesCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bytesCachedSize  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	5	12	replace
41	[BUG]  [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  MAXIMUM_CACHE_SIZE)||(count  >  MAXIMUM_CACHE_SIZE))  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	5	12	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	5	12	replace
43	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	5	12	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	2	12	replace
45	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  ||  count  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	2	12	replace
46	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  count  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
47	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	2	12	replace
49	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (count    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	2	12	replace
50	[BUG]  [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	10	12	replace
52	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	10	12	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	10	12	replace
54	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	10	12	replace
55	[BUG]  [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  =  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  =  bitsCachedSize  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	10	12	replace
57	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()!=  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	10	12	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  1)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  1)  {	  while    (bitsCachedSize    <    1)    {    	compilable	  [FE]  AssertionError  	17	12	replace
59	[BUG]  [BUGGY]  while  (count  <  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  1)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  1)  {	  while    (bitsCachedSize    <    1)    {    	compilable	  [FE]  AssertionError  	17	12	replace
60	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  1)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  1)  {	  while    (bitsCachedSize    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	7	12	replace
62	[BUG]  [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (in.available()  <  count  &&  bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	7	12	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	7	12	replace
64	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	7	12	replace
65	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	7	12	replace
67	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.available()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	7	12	replace
68	[BUG]  [BUGGY]  InputStream  in  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  InputStream  in  =  getInputStream();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
69	[BUG]  [BUGGY]  in.defaultRead();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  in.defaultRead();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.defaultRead();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
70	[BUG]  [BUGGY]  long  nextByte  =  in.read();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	long  nextByte  =  in.read();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
71	[BUG]  [BUGGY]  in.defaultReadBits();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  in.defaultReadBits();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.defaultReadBits();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
72	[BUG]  [BUGGY]  InputStream  in  =  this.in.readInt();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  InputStream  in  =  this.in.readInt();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.readInt();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
73	[BUG]  [BUGGY]  InputStream  in  =  new  ByteInputStream(count);  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  InputStream  in  =  new  ByteInputStream(count);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  ByteInputStream(count);	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
74	[BUG]  [BUGGY]  in.skipChildren();  [CE]  illegal  start  of  type  [FE]                                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  in.skipChildren();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	in.skipChildren();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	9	12	replace
76	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	9	12	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	9	12	replace
78	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	9	12	replace
79	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
80	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  while  (bitsCachedSize  <  2)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  2)  {  while  (bitsCachedSize  <  2)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    2)    {    while  (bitsCachedSize  <  2)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
81	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  2)  {  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    2)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
82	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  2)  {  InputStream  in  =  getInputStream();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    2)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
83	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  2)  {  final  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    2)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
84	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  2)  {  InputStream  in  =  new  ByteInputStream(bitsCachedSize);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    2)    {    InputStream  in  =  new  ByteInputStream(bitsCachedSize);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
85	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    2)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
86	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  2)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    2)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
87	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
88	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
89	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
90	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(bytesCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
91	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
92	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
93	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
94	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
95	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
96	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
97	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
98	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
99	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte  ==  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bytesCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
100	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();  if(nextByte!=  ByteOrder.LITTLE_ENDIAN)  {  return  Long.parseLong(bitsCachedSize);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
101	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
102	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  not  a  statement	6	None	add
103	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
104	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
105	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  getInputStream();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
106	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  nextByte  =  in.available();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  nextByte  =  in.available();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
107	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  long  nextByte  =  in.available();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final  long  nextByte  =  in.available();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
109	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
110	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
111	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
112	[BUG]  [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  ((  count  <  bitsCachedSize)&&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
113	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
114	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
115	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
116	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
117	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
118	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  8  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  8  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  8  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	10	12	replace
120	[BUG]  [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  count  &&  in.read()  ==  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	10	12	replace
121	[BUG]  [BUGGY]  InputStream  in  =  byteOrder.readInt();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  InputStream  in  =  byteOrder.readInt();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  byteOrder.readInt();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
122	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(in.read());	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
123	[BUG]  [BUGGY]  InputStream  in  =  this.in.read();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  InputStream  in  =  this.in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  this.in.read();	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	5	12	replace
125	[BUG]  [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	5	12	replace
126	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
127	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  final  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize)    {    final  long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
128	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize)  {  long  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
129	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize)    {    InputStream  in  =  new  BufferedInputStream(in.read());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
130	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize)  {  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (count    <    bitsCachedSize)    {    in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
131	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  0  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	7	12	replace
133	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	7	12	replace
134	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  8  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
135	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final  long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
136	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
137	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
138	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  this.in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  this.in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
139	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  bitsCachedSize)  {	  while    (count    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	2	12	replace
141	[BUG]  [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  bitsCachedSize)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  bitsCachedSize)  {	  while    (count    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	2	12	replace
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize  &&  in!=  null)  {	  while    (count    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	2	12	replace
143	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (count  <  bitsCachedSize  &&  in!=  null)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize  &&  in!=  null)  {	  while    (count    <    bitsCachedSize)    {    	compilable	  [FE]  AssertionError  	2	12	replace
144	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
145	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
146	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
147	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
148	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  Integer  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    Integer  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
149	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
150	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
151	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  0  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	12	12	replace
152	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  0  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
153	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
154	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	9	12	replace
155	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	9	12	replace
156	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	9	12	replace
157	[BUG]  [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  0  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	compilable	  [FE]  AssertionError  	9	12	replace
158	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  1)  {  long  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    1)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
159	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  1)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    1)    {    InputStream  in  =  new  BufferedInputStream(in.read());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
160	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(in);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  1)  {  final  int  bitsCachedSize  =  readBits(in);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    1)    {    final  int  bitsCachedSize  =  readBits(in);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
161	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  InputStream  in  =  this.in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  1)  {  InputStream  in  =  this.in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    1)    {    InputStream  in  =  this.in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
162	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  2)  {  long  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    2)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
163	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  2)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    2)    {    InputStream  in  =  new  BufferedInputStream(in.read());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
164	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  Integer  in  =  getInput();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  2)  {  Integer  in  =  getInput();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    2)    {    Integer  in  =  getInput();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
165	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  8)  {  long  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    8)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
166	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  InputStream  in  =  this.in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  8)  {  InputStream  in  =  this.in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    8)    {    InputStream  in  =  this.in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
167	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  8)  {  InputStream  in  =  new  BufferedInputStream(in.read());  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    8)    {    InputStream  in  =  new  BufferedInputStream(in.read());	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
168	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.available();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
169	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
170	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.available();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.available();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
171	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
172	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
173	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    InputStream  in  =  new  BufferedInputStream(in.read());  bitsCachedSize  =  in.available();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
174	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  bitsOut)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  bitsOut)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  bitsOut)  {	  while    (bitsCachedSize    <    =    count)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
175	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  0)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  0)  {	  while    (bitsCachedSize    <    =    count)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
176	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  While  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  While  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    While  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
177	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  ';'  expected	11	None	add
178	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
179	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  count  &&  in.read()  >=  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
180	[BUG]  [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	InputStream  in  =  new  BufferedInputStream(ByteOrder.DEFAULT_TIME_SIZE);	      	non-compiled	[CE]  illegal  start  of  type	13	None	replace
181	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  While  (bitsCachedSize  <  8)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  8)  {  While  (bitsCachedSize  <  8)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    8)    {    While  (bitsCachedSize  <  8)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
182	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  0;  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  0;  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    8)    {    in.read();  bitsCachedSize  =  0;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
183	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  8;  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  8)  {  in.read();  bitsCachedSize  =  8;  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    8)    {    in.read();  bitsCachedSize  =  8;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
184	[BUG]  [BUGGY]  while(count  <  bitsOut.length)  {  [CE]  cannot  find  symbol  bitsOut  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while(count  <  bitsOut.length)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(count  <  bitsOut.length)  {	  while    (count    <    bitsCachedSize)    {    	non-compiled	[CE]  cannot  find  symbol  bitsOut	2	None	replace
185	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  While  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  While  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    While  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
186	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE);	  	non-compiled	[CE]  ';'  expected	8	None	add
187	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
188	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
189	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  final  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  1)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    1)    {    final  long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	add
190	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
191	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while(bitsCachedSize  <  =  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    <    =    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
192	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  final  long  bitsCachedSize  =  in.read();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  2)  {  final  long  bitsCachedSize  =  in.read();  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    2)    {    final  long  bitsCachedSize  =  in.read();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
193	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  2)  {  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    2)    {    long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
194	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  2)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    2)    {    final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  2)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
195	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available();  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.available();  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
196	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  while  (bitsCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    while  (bitsCachedSize  <  count  &&  Integer.available()  >  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
197	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.available()  -  MAXIMUM_CACHE_SIZE;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
198	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.read()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
199	[BUG]  [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while(bitsCachedSize  <  =  MAXIMUM_CACHE_SIZE  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	  while    (bitsCachedSize    <    count    &&    in.available()    >    MAXIMUM_CACHE_SIZE)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
200	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    long  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
201	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]    public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException(   "count  must  not  be  negative  or  greater  than     "  +  MAXIMUM_CACHE_SIZE);  }    [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]    final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while    (bitsCachedSize    <    MAXIMUM_CACHE_SIZE)    {    final  int  bitsCachedSize  =  in.read();  if(bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
