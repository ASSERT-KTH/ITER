bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (count  <  bitsCachedSize)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (count  <  bitsCachedSize)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	12	replace
2	[BUG]  [BUGGY]  while  (count  <  bitsCachedSize)  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (count  <  bitsCachedSize)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (count  <  bitsCachedSize)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	12	replace
3	[BUG]  [BUGGY]  while  (bitsCachedSize  <  =  count)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  =  count)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  =  count)  {	while  (bitsCachedSize  <  count)  {  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	12	replace
5	[BUG]  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  MAXIMUM_CACHE_SIZE)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	12	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	12	replace
7	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  count  &&  in.available()  >  MAXIMUM_CACHE_SIZE)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	12	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	12	replace
9	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  count  &&  in.read()  >  MAXIMUM_CACHE_SIZE)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	12	replace
10	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  count  &&  in.read()  <  =  MAXIMUM_CACHE_SIZE)  {	while  (bitsCachedSize  <  count)  {  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	12	replace
12	[BUG]  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [FE]  AssertionError  [FE]                AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  count  &&  in.read()  <  MAXIMUM_CACHE_SIZE)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	12	replace
13	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]    [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	  	while  (bitsCachedSize  <  count)  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  8)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  8)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	11	replace
15	[BUG]  [BUGGY]  while  (bitsCachedSize  <  8)  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  8)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  8)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	11	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  1)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  1)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	11	replace
17	[BUG]  [BUGGY]  while  (bitsCachedSize  <  1)  {  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  1)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  1)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	11	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  2)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	add	while  (bitsCachedSize  <  2)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	11	replace
19	[BUG]  [BUGGY]  while  (bitsCachedSize  <  2)  {  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  long  readBits(final  int  count)  throws  IOException  {  if  (count  <  0  ||  count  >  MAXIMUM_CACHE_SIZE)  {  throw  new  IllegalArgumentException( "count  must  not  be  negative  or  greater  than   "  +  MAXIMUM_CACHE_SIZE);  }  [BUGGY]  while  (bitsCachedSize  <  2)  {  [BUGGY]  final  long  nextByte  =  in.read();  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	85	85	2	replace	while  (bitsCachedSize  <  2)  {	while  (bitsCachedSize  <  count)  {  	compilable	  [FE]  AssertionError  	1	11	replace
